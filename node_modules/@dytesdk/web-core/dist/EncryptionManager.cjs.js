"use strict";var ml=Object.defineProperty,Gl=Object.defineProperties;var Rl=Object.getOwnPropertyDescriptors;var v=Object.getOwnPropertySymbols;var pl=Object.prototype.hasOwnProperty,Yl=Object.prototype.propertyIsEnumerable;var x=(l,d,Z)=>d in l?ml(l,d,{enumerable:!0,configurable:!0,writable:!0,value:Z}):l[d]=Z,n=(l,d)=>{for(var Z in d||(d={}))pl.call(d,Z)&&x(l,Z,d[Z]);if(v)for(var Z of v(d))Yl.call(d,Z)&&x(l,Z,d[Z]);return l},e=(l,d)=>Gl(l,Rl(d));var R=(l,d,Z)=>(x(l,typeof d!="symbol"?d+"":d,Z),Z),B=(l,d,Z)=>{if(!d.has(l))throw TypeError("Cannot "+Z)};var j=(l,d,Z)=>(B(l,d,"read from private field"),Z?Z.call(l):d.get(l)),p=(l,d,Z)=>{if(d.has(l))throw TypeError("Cannot add the same private member more than once");d instanceof WeakSet?d.add(l):d.set(l,Z)};var Y=(l,d,Z)=>(B(l,d,"access private method"),Z);var i=(l,d,Z)=>new Promise((c,b)=>{var V=G=>{try{W(Z.next(G))}catch(y){b(y)}},X=G=>{try{W(Z.throw(G))}catch(y){b(y)}},W=G=>G.done?c(G.value):Promise.resolve(G.value).then(V,X);W((Z=Z.apply(l,d)).next())});var L={},yl={get exports(){return L},set exports(l){L=l}},h=typeof Reflect=="object"?Reflect:null,M=h&&typeof h.apply=="function"?h.apply:function(d,Z,c){return Function.prototype.apply.call(d,Z,c)},I;h&&typeof h.ownKeys=="function"?I=h.ownKeys:Object.getOwnPropertySymbols?I=function(d){return Object.getOwnPropertyNames(d).concat(Object.getOwnPropertySymbols(d))}:I=function(d){return Object.getOwnPropertyNames(d)};function ul(l){console&&console.warn&&console.warn(l)}var g=Number.isNaN||function(d){return d!==d};function m(){m.init.call(this)}yl.exports=m;L.once=Nl;m.EventEmitter=m;m.prototype._events=void 0;m.prototype._eventsCount=0;m.prototype._maxListeners=void 0;var w=10;function K(l){if(typeof l!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof l)}Object.defineProperty(m,"defaultMaxListeners",{enumerable:!0,get:function(){return w},set:function(l){if(typeof l!="number"||l<0||g(l))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+l+".");w=l}});m.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};m.prototype.setMaxListeners=function(d){if(typeof d!="number"||d<0||g(d))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+d+".");return this._maxListeners=d,this};function f(l){return l._maxListeners===void 0?m.defaultMaxListeners:l._maxListeners}m.prototype.getMaxListeners=function(){return f(this)};m.prototype.emit=function(d){for(var Z=[],c=1;c<arguments.length;c++)Z.push(arguments[c]);var b=d==="error",V=this._events;if(V!==void 0)b=b&&V.error===void 0;else if(!b)return!1;if(b){var X;if(Z.length>0&&(X=Z[0]),X instanceof Error)throw X;var W=new Error("Unhandled error."+(X?" ("+X.message+")":""));throw W.context=X,W}var G=V[d];if(G===void 0)return!1;if(typeof G=="function")M(G,this,Z);else for(var y=G.length,u=_(G,y),c=0;c<y;++c)M(u[c],this,Z);return!0};function O(l,d,Z,c){var b,V,X;if(K(Z),V=l._events,V===void 0?(V=l._events=Object.create(null),l._eventsCount=0):(V.newListener!==void 0&&(l.emit("newListener",d,Z.listener?Z.listener:Z),V=l._events),X=V[d]),X===void 0)X=V[d]=Z,++l._eventsCount;else if(typeof X=="function"?X=V[d]=c?[Z,X]:[X,Z]:c?X.unshift(Z):X.push(Z),b=f(l),b>0&&X.length>b&&!X.warned){X.warned=!0;var W=new Error("Possible EventEmitter memory leak detected. "+X.length+" "+String(d)+" listeners added. Use emitter.setMaxListeners() to increase limit");W.name="MaxListenersExceededWarning",W.emitter=l,W.type=d,W.count=X.length,ul(W)}return l}m.prototype.addListener=function(d,Z){return O(this,d,Z,!1)};m.prototype.on=m.prototype.addListener;m.prototype.prependListener=function(d,Z){return O(this,d,Z,!0)};function hl(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function D(l,d,Z){var c={fired:!1,wrapFn:void 0,target:l,type:d,listener:Z},b=hl.bind(c);return b.listener=Z,c.wrapFn=b,b}m.prototype.once=function(d,Z){return K(Z),this.on(d,D(this,d,Z)),this};m.prototype.prependOnceListener=function(d,Z){return K(Z),this.prependListener(d,D(this,d,Z)),this};m.prototype.removeListener=function(d,Z){var c,b,V,X,W;if(K(Z),b=this._events,b===void 0)return this;if(c=b[d],c===void 0)return this;if(c===Z||c.listener===Z)--this._eventsCount===0?this._events=Object.create(null):(delete b[d],b.removeListener&&this.emit("removeListener",d,c.listener||Z));else if(typeof c!="function"){for(V=-1,X=c.length-1;X>=0;X--)if(c[X]===Z||c[X].listener===Z){W=c[X].listener,V=X;break}if(V<0)return this;V===0?c.shift():il(c,V),c.length===1&&(b[d]=c[0]),b.removeListener!==void 0&&this.emit("removeListener",d,W||Z)}return this};m.prototype.off=m.prototype.removeListener;m.prototype.removeAllListeners=function(d){var Z,c,b;if(c=this._events,c===void 0)return this;if(c.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):c[d]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete c[d]),this;if(arguments.length===0){var V=Object.keys(c),X;for(b=0;b<V.length;++b)X=V[b],X!=="removeListener"&&this.removeAllListeners(X);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(Z=c[d],typeof Z=="function")this.removeListener(d,Z);else if(Z!==void 0)for(b=Z.length-1;b>=0;b--)this.removeListener(d,Z[b]);return this};function r(l,d,Z){var c=l._events;if(c===void 0)return[];var b=c[d];return b===void 0?[]:typeof b=="function"?Z?[b.listener||b]:[b]:Z?Jl(b):_(b,b.length)}m.prototype.listeners=function(d){return r(this,d,!0)};m.prototype.rawListeners=function(d){return r(this,d,!1)};m.listenerCount=function(l,d){return typeof l.listenerCount=="function"?l.listenerCount(d):A.call(l,d)};m.prototype.listenerCount=A;function A(l){var d=this._events;if(d!==void 0){var Z=d[l];if(typeof Z=="function")return 1;if(Z!==void 0)return Z.length}return 0}m.prototype.eventNames=function(){return this._eventsCount>0?I(this._events):[]};function _(l,d){for(var Z=new Array(d),c=0;c<d;++c)Z[c]=l[c];return Z}function il(l,d){for(;d+1<l.length;d++)l[d]=l[d+1];l.pop()}function Jl(l){for(var d=new Array(l.length),Z=0;Z<d.length;++Z)d[Z]=l[Z].listener||l[Z];return d}function Nl(l,d){return new Promise(function(Z,c){function b(X){l.removeListener(d,V),c(X)}function V(){typeof l.removeListener=="function"&&l.removeListener("error",b),Z([].slice.call(arguments))}q(l,d,V,{once:!0}),d!=="error"&&al(l,b,{once:!0})})}function al(l,d,Z){typeof l.on=="function"&&q(l,"error",d,Z)}function q(l,d,Z,c){if(typeof l.on=="function")c.once?l.once(d,Z):l.on(d,Z);else if(typeof l.addEventListener=="function")l.addEventListener(d,function b(V){c.once&&l.removeEventListener(d,b),Z(V)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof l)}class $ extends L.EventEmitter{constructor(Z){super();R(this,"logger");this.logger=Z,super.setMaxListeners(25)}emit(Z,...c){return super.emit("*",Z,...c),super.emit(Z,...c)}on(Z,c){var b;try{const V=this.listenerCount(Z);V>25&&V%25===0&&((b=this.logger)==null||b.warn("DyteEventEmitter::maxListenersExceeded",{eventListener:{eventName:Z.toString(),listenerCount:this.listenerCount(Z)}}))}catch(V){}return super.on(Z,c)}addListener(Z,c){var b;try{const V=this.listenerCount(Z);V>25&&V%25===0&&((b=this.logger)==null||b.warn("DyteEventEmitter::maxListenersExceeded",{eventListener:{eventName:Z.toString(),listenerCount:this.listenerCount(Z)}}))}catch(V){}return super.addListener(Z,c)}off(Z,c){return super.off(Z,c)}once(Z,c){return super.once(Z,c)}prependListener(Z,c){return super.prependListener(Z,c)}prependOnceListener(Z,c){return super.prependOnceListener(Z,c)}removeListener(Z,c){return super.removeListener(Z,c)}removeAllListeners(Z){return super.removeAllListeners(Z)}listeners(Z){return super.listeners(Z)}listenerCount(Z){return super.listenerCount(Z)}}const F="dyte_e2ee",nl="DyteFrameEncryptionKey",Fl={sharedKey:!1,ratchetSalt:nl,ratchetWindowSize:8};function T(){return typeof window.RTCRtpScriptTransform!="undefined"}function Il(){return typeof window.RTCRtpSender!="undefined"&&typeof window.RTCRtpSender.prototype.createEncodedStreams!="undefined"}function Ll(l){return i(this,null,function*(){const d=new TextEncoder;return yield crypto.subtle.importKey("raw",d.encode(l),{name:"PBKDF2"},!1,["deriveBits","deriveKey"])})}function sl(){return Il()||T()}class kl extends ${constructor(Z={}){super(void 0);R(this,"keyInfoMap");R(this,"options");R(this,"onKeyRatcheted",(Z,c)=>{});this.keyInfoMap=new Map,this.options=n(n({},Fl),Z),this.on("keyRatcheted",this.onKeyRatcheted)}onSetEncryptionKey(Z,c,b){const V={key:Z,participantId:c,keyIndex:b};this.keyInfoMap.set(`${c!=null?c:"shared"}-${b!=null?b:0}`,V),this.emit("setKey",V)}getKeys(){return Array.from(this.keyInfoMap.values())}getOptions(){return this.options}ratchetKey(Z,c){this.emit("ratchetRequest",Z,c)}}class Ul extends kl{constructor(Z={}){const c=e(n({},Z),{sharedKey:!0});super(c);R(this,"ratchetInterval")}setKey(Z){return i(this,null,function*(){const c=yield Ll(Z);this.onSetEncryptionKey(c)})}}const E={ParticipantEncryptionStatusChanged:"participantEncryptionStatusChanged",Error:"encryptionError"};var J=(l=>(l.NEW_PRODUCER="NEW_PRODUCER",l.PRODUCER_TRACK_ENDED="PRODUCER_TRACK_ENDED",l.ROOM_NODE_CONNECTION_ERROR="ROOM_NODE_CONNECTION_ERROR",l.SOCKET_SERVICE_ROOM_JOINED="SOCKET_SERVICE_ROOM_JOINED",l.SOCKET_SERVICE_RECONNECTED="SOCKET_SERVICE_RECONNECTED",l.SOCKET_SERVICE_DISCONNECTED="SOCKET_SERVICE_DISCONNECTED",l.SOCKET_SERVICE_FAILED="SOCKET_SERVICE_FAILED",l.SOCKET_STATE_UPDATE="SOCKET_STATE_UPDATE",l.ROOM_NODE_RECONNECTED="ROOM_NODE_RECONNECTED",l.ROOM_NODE_DISCONNECTED="ROOM_NODE_DISCONNECTED",l.ROOM_NODE_FAILED="ROOM_NODE_FAILED",l.TRANSPORT_STATE_UPDATE="TRANSPORT_STATE_UPDATE",l.PRODUCER_SCORE_UPDATE="PRODUCER_SCORE_UPDATE",l.CONSUMER_SCORE_UPDATE="CONSUMER_SCORE_UPDATE",l.PRODUCER_STATUS_UPDATE="PRODUCER_STATUS_UPDATE",l.CONSUMER_STATUS_UPDATE="CONSUMER_STATUS_UPDATE",l.LOW_PRODUCER_SCORE="LOW_PRODUCER_SCORE",l.LOW_CONSUMER_SCORE="LOW_CONSUMER_SCORE",l.MEDIA_PERMISSION_ERROR="MEDIA_PERMISSION_ERROR",l.MEDIA_PERMISSION_UPDATE="MEDIA_PERMISSION_UPDATE",l.WAITLISTED="WAIT_LISTED",l.MESSAGE="websocket/message",l.ROOM_MESSAGE="websocket/room-message",l.PEER_JOINED_INTERNAL="peer/joined-internal",l.PEER_CLOSED="websocket/peer-closed",l.CONSUMER_CLOSED="websocket/consumer-closed",l.CONSUMER_PAUSED="websocket/consumer-paused",l.CONSUMER_RESUMED="websocket/consumer-resumed",l.PRODUCER_CLOSED="websocket/producer-closed",l.NEW_CONSUMER="websocket/new-consumer",l.PRODUCER_SCORE="websocket/producer-score",l.CONSUMER_SCORE="websocket/consumer-score",l.PRODUCER_TOGGLE="hive/producer-toggle",l.CONSUMER_TOGGLE="hive/consumer-toggle",l.SELECTED_PEERS_DIFF="hive/selected-peers-diff",l.UPDATE_ACTIVE="media/update-active",l.RESET_PRODUCER_STATE="hive/reset-producer-state",l.CF_TRANSPORT_STATE_CHANGED="cf/transport-state-changed",l.CF_ROOM_REJOINING="cf/room-rejoining",l.CF_ROOM_REJOIN_FAILED="cf/room-rejoining-failed",l.CF_ROOM_REJOINED="cf/room-rejoined",l.CF_TRANPSORT_RECONNECTING="cf/transport-reconnecting",l.ROOM_STATE="sockethub/room-state",l.PEER_DISPLAY_NAME_CHANGED="hive/display-name-changed",l.GET_STAGE_REQUESTS="GET_STAGE_REQUESTS",l.UPDATE_STAGE_REQUESTS="UPDATE_STAGE_REQUESTS",l.KICK_PEER="KICK_PEER",l.UPDATE_PEER_STAGE_STATUS="UPDATE_PEER_STAGE_STATUS",l.JOIN_MEDIA_ROOM="JOIN_MEDIA_ROOM",l.LEAVE_MEDIA_ROOM="LEAVE_MEDIA_ROOM",l.PIP_HANGUP="PIP_HANGUP",l.E2EE_ACTIVE_PRODUCER="E2EE_ACTIVE_PRODUCER",l.E2EE_INACTIVE_PRODUCER="E2EE_INACTIVE_PRODUCER",l.E2EE_ACTIVE_CONSUMER="E2EE_ACTIVE_CONSUMER",l.E2EE_INACTIVE_CONSUMER="E2EE_INACTIVE_CONSUMER",l.SOCKET_PEERS="SOCKET_PEERS",l.UPDATE_PERMISSIONS="UPDATE_PERMISSIONS",l.MAX_SPATIAL_LAYER_CHANGE="MAX_SPATIAL_LAYER_CHANGE",l.MUTE_SELF="MUTE_SELF",l.MUTE_SELF_VIDEO="MUTE_SELF_VIDEO",l))(J||{});const ll="",P=typeof window!="undefined"&&window.Blob&&new Blob([atob(ll)],{type:"text/javascript;charset=utf-8"});function Sl(){const l=P&&(window.URL||window.webkitURL).createObjectURL(P);try{return l?new Worker(l):new Worker("data:application/javascript;base64,"+ll)}finally{l&&(window.URL||window.webkitURL).revokeObjectURL(l)}}var N,z,s,k,dl,U,cl,a,C,Q,Hl,S,bl,H,Vl,o,Xl,t,Wl;class Zl extends ${constructor(Z){super(void 0);p(this,N);p(this,k);p(this,U);p(this,a);p(this,Q);p(this,S);p(this,H);p(this,o);p(this,t);R(this,"worker");R(this,"encryptionEnabled");R(this,"keyProvider");R(this,"peerSessionStore");R(this,"onWorkerMessage",Z=>{const{kind:c,data:b}=Z.data;switch(c){case"error":this.logger.error("error in worker",{error:b.error}),this.emit(E.Error,b.error);break;case"enable":this.encryptionEnabled!==b.enabled&&!b.participantId?this.encryptionEnabled=b.enabled:b.participantId,this.encryptionEnabled&&this.keyProvider.getKeys().forEach(V=>{Y(this,a,C).call(this,V)});break;case"ratchetKey":this.keyProvider.emit("keyRatcheted",b.material,b.keyIndex);break;case"log":this.logger&&this.logger[b.level](b.str);break}});p(this,s,Z=>{this.logger.error("e2ee worker encountered an error:",{error:Z.error}),this.emit(E.Error,Z.error)});this.keyProvider=Z.keyProvider,this.worker=new Sl,this.encryptionEnabled=!1}get isEnabled(){return this.encryptionEnabled}init(Z,c){this.logger=Z,this.peerSessionStore=c,this.setup()}setup(){if(!sl())throw new Error("tried to setup end-to-end encryption on an unsupported browser");this.logger.info("setting up e2ee"),Y(this,k,dl).call(this,this.keyProvider);const Z={kind:"init",data:{keyProviderOptions:this.keyProvider.getOptions()}};this.worker&&(this.logger.info("initializing worker"),this.worker.onmessage=this.onWorkerMessage,this.worker.onerror=j(this,s),this.worker.postMessage(Z)),Y(this,N,z).call(this,!0)}}N=new WeakSet,z=function(Z,c){return i(this,null,function*(){if(this.logger.info(`set e2ee to ${Z} for ${c||"self"}`),this.worker){const b={kind:"enable",data:{enabled:Z,participantId:c}};this.worker.postMessage(b)}else throw new ReferenceError("failed to enable e2ee, worker is not ready")})},s=new WeakMap,k=new WeakSet,dl=function(Z){this.peerSessionStore.on(J.NEW_CONSUMER,({appData:c,peerId:b})=>{c.e2ee&&Y(this,N,z).call(this,c.e2ee,b)}),this.peerSessionStore.on(J.E2EE_INACTIVE_CONSUMER,({peerId:c,trackId:b})=>{var X;const V={kind:"removeTransform",data:{participantId:c,trackId:b}};(X=this.worker)==null||X.postMessage(V)}),this.peerSessionStore.on(J.E2EE_ACTIVE_CONSUMER,({track:c,rtpReceiver:b,peerId:V})=>Y(this,S,bl).call(this,c,b,V)),this.peerSessionStore.on(J.E2EE_ACTIVE_PRODUCER,({track:c,rtpSender:b,appData:V})=>Y(this,H,Vl).call(this,c,b,V.peerId)),Z.on("setKey",c=>Y(this,a,C).call(this,c)).on("ratchetRequest",(c,b)=>Y(this,U,cl).call(this,c,b))},U=new WeakSet,cl=function(Z,c){if(!this.worker)throw Error("could not ratchet key, worker is missing");const b={kind:"ratchetRequest",data:{participantId:Z,keyIndex:c}};this.worker.postMessage(b)},a=new WeakSet,C=function({key:Z,participantId:c,keyIndex:b}){if(!this.worker)throw Error("could not set key, worker is missing");const V={kind:"setKey",data:{participantId:c,key:Z,keyIndex:b}};this.worker.postMessage(V)},Q=new WeakSet,Hl=function(Z){if(!this.worker)throw Error("could not post rtp map, worker is missing");const c={kind:"setRTPMap",data:{map:Z}};this.worker.postMessage(c)},S=new WeakSet,bl=function(Z,c,b){Y(this,o,Xl).call(this,c,Z.id,b)},H=new WeakSet,Vl=function(Z,c,b){Y(this,t,Wl).call(this,c,Z.id,b)},o=new WeakSet,Xl=function(Z,c,b,V){return i(this,null,function*(){if(!this.worker)return;const X=Z;if(T()){const W={kind:"decode",participantId:b,trackId:c,codec:V};X.transform=new RTCRtpScriptTransform(this.worker,W)}else{if(F in X&&V){const u={kind:"updateCodec",data:{trackId:c,codec:V,participantId:b}};this.worker.postMessage(u);return}let W=X.writableStream,G=X.readableStream;if(!W||!G){const u=X.createEncodedStreams();X.writableStream=u.writable,W=u.writable,X.readableStream=u.readable,G=u.readable}const y={kind:"decode",data:{readableStream:G,writableStream:W,trackId:c,codec:V,participantId:b}};this.worker.postMessage(y,[G,W])}X[F]=!0})},t=new WeakSet,Wl=function(Z,c,b,V){if(F in Z||!this.worker)return;const X=Z;if(T()){this.logger.warn("initialize script transform");const W={kind:"encode",participantId:b,trackId:c,codec:V};X.transform=new RTCRtpScriptTransform(this.worker,W)}else{this.logger.warn("initialize encoded streams");const W=X.createEncodedStreams(),G={kind:"encode",data:{readableStream:W.readable,writableStream:W.writable,codec:V,trackId:c,participantId:b||"publisher"}};this.worker.postMessage(G,[W.readable,W.writable])}X[F]=!0},R(Zl,"SharedKeyProvider",Ul);module.exports=Zl;
