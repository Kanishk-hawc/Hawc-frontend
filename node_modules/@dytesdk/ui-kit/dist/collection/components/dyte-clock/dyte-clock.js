var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Host, h } from "@stencil/core";
import { defaultIconPack } from "../../lib/icons";
import { SyncWithStore } from "../../utils/sync-with-store";
const addZero = (n) => Math.trunc(n).toString().padStart(2, '0');
/**
 * Shows the time elapsed in a meeting.
 */
export class DyteClock {
    constructor() {
        /** Icon pack */
        this.iconPack = defaultIconPack;
        this.disconnectMeeting = () => {
            var _a, _b;
            this.timeout && clearTimeout(this.timeout);
            typeof this.request === 'number' && cancelAnimationFrame(this.request);
            (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.removeListener('meetingStartTimeUpdate', this.startedTimeUpdateListener);
        };
        this.startedTimeUpdateListener = () => {
            var _a, _b, _c;
            this.startedTime = (_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.meetingStartedTimestamp) === null || _c === void 0 ? void 0 : _c.toISOString();
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        this.disconnectMeeting();
    }
    meetingChanged(meeting) {
        var _a, _b, _c;
        this.disconnectMeeting();
        if (meeting != null) {
            this.startedTime = (_b = (_a = meeting.meta) === null || _a === void 0 ? void 0 : _a.meetingStartedTimestamp) === null || _b === void 0 ? void 0 : _b.toISOString();
            (_c = meeting.meta) === null || _c === void 0 ? void 0 : _c.addListener('meetingStartTimeUpdate', this.startedTimeUpdateListener);
        }
    }
    startedTimeChanged(startedTime) {
        if (startedTime !== undefined) {
            const animate = () => {
                this.timeDiff = (Date.now() - new Date(this.startedTime).getTime()) / 1000;
                this.timeout = setTimeout(() => {
                    if (this.request != null) {
                        this.request = requestAnimationFrame(animate);
                    }
                }, 500);
            };
            this.request = requestAnimationFrame(animate);
        }
    }
    getFormattedTime() {
        if (this.timeDiff == null) {
            return null;
        }
        const diff = this.timeDiff;
        let time = '';
        if (diff >= 3600) {
            time = `${addZero(diff / 3600)}:`;
        }
        time += `${addZero((diff % 3600) / 60)}:${addZero(diff % 60)}`;
        return time;
    }
    render() {
        return (h(Host, { key: '3ce9caf85c506b3c200601d492cd281c3e4c630b', tabIndex: 0, role: "timer", "aria-live": "off" }, this.startedTime !== undefined && [
            h("dyte-icon", { key: 'bb4e24a529ee378389b9371bd3b42136da8f2046', icon: this.iconPack.clock, "aria-hidden": true, tabIndex: -1, part: "icon" }),
            h("span", { key: '66b6b43d99f1bc8a27ecf8e3320bbc6a1c26c64c', part: "text" }, this.getFormattedTime()),
        ]));
    }
    static get is() { return "dyte-clock"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["dyte-clock.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["dyte-clock.css"]
        };
    }
    static get properties() {
        return {
            "meeting": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Meeting",
                    "resolved": "DyteClient",
                    "references": {
                        "Meeting": {
                            "location": "import",
                            "path": "../../types/dyte-client",
                            "id": "src/types/dyte-client.ts::Meeting"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Meeting object"
                },
                "getter": false,
                "setter": false
            },
            "iconPack": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "IconPack",
                    "resolved": "{ people: string; people_checked: string; chat: string; poll: string; participants: string; rocket: string; call_end: string; share: string; mic_on: string; mic_off: string; video_on: string; video_off: string; share_screen_start: string; share_screen_stop: string; share_screen_person: string; clock: string; dismiss: string; send: string; search: string; more_vertical: string; chevron_down: string; chevron_up: string; chevron_left: string; chevron_right: string; settings: string; wifi: string; speaker: string; speaker_off: string; download: string; full_screen_maximize: string; full_screen_minimize: string; copy: string; attach: string; image: string; emoji_multiple: string; image_off: string; disconnected: string; wand: string; recording: string; subtract: string; stop_recording: string; warning: string; pin: string; pin_off: string; spinner: string; breakout_rooms: string; add: string; shuffle: string; edit: string; delete: string; back: string; save: string; web: string; checkmark: string; spotlight: string; join_stage: string; leave_stage: string; pip_off: string; pip_on: string; signal_1: string; signal_2: string; signal_3: string; signal_4: string; signal_5: string; start_livestream: string; stop_livestream: string; viewers: string; debug: string; info: string; devices: string; horizontal_dots: string; ai_sparkle: string; meeting_ai: string; create_channel: string; create_channel_illustration: string; captionsOn: string; captionsOff: string; play: string; pause: string; fastForward: string; minimize: string; maximize: string; }",
                    "references": {
                        "IconPack": {
                            "location": "import",
                            "path": "../../lib/icons",
                            "id": "src/lib/icons/index.ts::IconPack"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Icon pack"
                },
                "getter": false,
                "setter": false,
                "defaultValue": "defaultIconPack"
            }
        };
    }
    static get states() {
        return {
            "startedTime": {},
            "timeDiff": {}
        };
    }
    static get watchers() {
        return [{
                "propName": "meeting",
                "methodName": "meetingChanged"
            }, {
                "propName": "startedTime",
                "methodName": "startedTimeChanged"
            }];
    }
}
__decorate([
    SyncWithStore()
], DyteClock.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteClock.prototype, "iconPack", void 0);
