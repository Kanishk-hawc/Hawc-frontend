import { p as proxyCustomElement, H, w as writeTask, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$2 } from './p-e7892c80.js';
import { d as defineCustomElement$1 } from './p-a443344b.js';

const dytePluginMainCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;width:100%;flex-direction:column;overflow:hidden;border-radius:var(--dyte-border-radius-lg, 12px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}header{display:flex;height:var(--dyte-space-8, 32px);align-items:center;justify-content:space-between;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}header>div{display:flex;align-items:center}dyte-button{display:flex;height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);flex-direction:column;align-items:center;border-radius:9999px}dyte-button dyte-icon{height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px)}iframe{display:block;flex:1 1 0%;margin:var(--dyte-space-0, 0px);border-width:var(--dyte-border-width-none, 0);border-style:none;padding:var(--dyte-space-0, 0px);outline:2px solid transparent;outline-offset:2px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-video-bg, 24 24 24) / var(--tw-bg-opacity))}.iframe-container{position:relative;height:100%;width:100%}.block-inputs{position:absolute;z-index:10;height:100%;width:100%;border-left-width:var(--dyte-border-width-none, 0);border-top-width:var(--dyte-border-width-lg, 4px);border-style:solid;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-border-opacity))}iframe{height:100%;width:100%}";
const DytePluginMainStyle0 = dytePluginMainCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DytePluginMain = /*@__PURE__*/ proxyCustomElement(class DytePluginMain extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.canClosePlugin = false;
        this.viewModeEnabled = false;
        this.onIframeRef = (el) => {
            var _a;
            if (el === this.iframeEl)
                return;
            this.iframeEl = el;
            (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.addPluginView(el, 'plugin-main');
        };
        this.canInteractWithPlugin = () => {
            const pluginId = this.plugin.id;
            if (!pluginId)
                return true;
            /**
             * For v1 canStartPlugins is the controller
             * For v2 the controller is within plugin config
             */
            const pluginConfig = this.meeting.self.permissions.plugins
                .config[pluginId];
            /**
             * In some cases plugin config is undefined, specifically seen in cases of self
             * hosted plugins, in that case just return true
             */
            if (!pluginConfig)
                return true;
            /**
             * In V2 config currently in dev portal when a preset is saved without opening the
             * config menu then it gets added with access control undefined, to handle this case
             * the following has been done
             */
            if (!pluginConfig.accessControl)
                return true;
            /**
             * If access conrol is defined then return the permission
             */
            return pluginConfig.accessControl === 'FULL_ACCESS';
        };
    }
    componentDidLoad() {
        this.meetingChanged(this.meeting);
        this.pluginChanged(this.plugin);
    }
    meetingChanged(meeting) {
        if (meeting == undefined)
            return;
        const enabled = this.canInteractWithPlugin();
        this.viewModeEnabled = !enabled;
        writeTask(() => {
            this.canClosePlugin =
                meeting.self.permissions.plugins.canClose || this.plugin.enabledBy === meeting.self.id;
        });
    }
    pluginChanged(plugin) {
        this.toggleViewModeListener = (enable) => {
            const enabled = this.canInteractWithPlugin();
            if (enabled)
                return;
            this.viewModeEnabled = enable;
        };
        if (plugin != null) {
            this.iframeEl && plugin.addPluginView(this.iframeEl, 'plugin-main');
            plugin.addListener('toggleViewMode', this.toggleViewModeListener);
        }
    }
    disconnectedCallback() {
        var _a, _b;
        (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.removePluginView('plugin-main');
        (_b = this.plugin) === null || _b === void 0 ? void 0 : _b.removeListener('toggleViewMode', this.toggleViewModeListener);
    }
    render() {
        if (this.plugin == null)
            return null;
        return (h(Host, null, h("header", { part: "header" }, h("div", null, this.plugin.name), this.canClosePlugin && (h("div", null, h("dyte-button", { kind: "icon", onClick: () => this.plugin.deactivate(), part: "button" }, h("dyte-icon", { icon: this.iconPack.dismiss }))))), h("div", { class: 'iframe-container' }, !(this.canInteractWithPlugin() || !this.viewModeEnabled) ? (h("div", { class: "block-inputs" })) : null, h("iframe", { ref: (el) => this.onIframeRef(el), part: "iframe" }))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "plugin": ["pluginChanged"]
    }; }
    static get style() { return DytePluginMainStyle0; }
}, [1, "dyte-plugin-main", {
        "meeting": [16],
        "plugin": [16],
        "iconPack": [16],
        "t": [16],
        "canClosePlugin": [32],
        "viewModeEnabled": [32]
    }, undefined, {
        "meeting": ["meetingChanged"],
        "plugin": ["pluginChanged"]
    }]);
__decorate([
    SyncWithStore()
], DytePluginMain.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DytePluginMain.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DytePluginMain.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-plugin-main", "dyte-button", "dyte-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-plugin-main":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DytePluginMain);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DytePluginMain as D, defineCustomElement as d };
