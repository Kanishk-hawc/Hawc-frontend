import { p as proxyCustomElement, H, d as createEvent, w as writeTask, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { M as MAX_TEXT_LENGTH } from './p-83da1e09.js';
import { a as gracefulStorage } from './p-e497ad6d.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$b } from './p-e7892c80.js';
import { d as defineCustomElement$a } from './p-0d294acc.js';
import { d as defineCustomElement$9 } from './p-c23d4f73.js';
import { d as defineCustomElement$8 } from './p-b6cf9ccc.js';
import { d as defineCustomElement$7 } from './p-da1a768d.js';
import { d as defineCustomElement$6 } from './p-a443344b.js';
import { d as defineCustomElement$5 } from './p-764a90a3.js';
import { d as defineCustomElement$4 } from './p-cba97631.js';
import { d as defineCustomElement$3 } from './p-88bc267d.js';
import { d as defineCustomElement$2 } from './p-e74a5224.js';
import { d as defineCustomElement$1 } from './p-b4f8107f.js';

const dyteChatComposerViewCss = ":host {\n  display: flex;\n  flex-direction: column;\n  font-family: var(--dyte-font-family, sans-serif);\n  font-size: 14px;\n  position: relative;\n}\n\n.quoted-message-container {\n  margin-bottom: var(--dyte-space-2, 8px);\n  display: flex;\n  justify-content: space-between;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n  border-radius: var(--dyte-border-radius-md, 8px);\n  border: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n}\n\n.quoted-message-container .quoted-message {\n  flex: 1 1 0%;\n  padding: var(--dyte-space-2, 8px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  max-height: var(--dyte-space-24, 96px);\n  overflow-y: auto;\n  word-break: break-all;\n}\n\n.quoted-message-container .quoted-message blockquote {\n  display: none;\n}\n\n.quoted-message-container dyte-icon.dismiss {\n  margin-left: auto;\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  padding: var(--dyte-space-2, 8px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  color: rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52));\n}\n\n.quoted-message-container dyte-icon.dismiss:hover {\n  cursor: pointer;\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n}\n\n.quoted-message-container dyte-icon.dismiss {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n.composer-container {\n  position: relative;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  border-radius: var(--dyte-border-radius-md, 8px);\n  overflow: hidden;\n  border: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n}\n\n.composer-container > .composers {\n    min-height: 60px;\n  }\n\n@container chatcontainer (height < 360px) {\n    .composer-container > .composers {\n      min-height: 30px;\n    }\n}\n\n.chat-buttons {\n  padding: var(--dyte-space-3, 12px);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n}\n\n.chat-buttons .right {\n  z-index: 10;\n}\n\n.chat-buttons .right .edit-buttons {\n  display: flex;\n  gap: var(--dyte-space-2, 8px);\n}\n\n.chat-buttons > div {\n  display: flex;\n  align-items: center;\n}\n\ndyte-emoji-picker {\n  z-index: 20;\n  position: absolute;\n  top: calc(var(--dyte-space-72, 288px) * -1);\n  border-top: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n  animation: 0.3s slide-up ease;\n}\n\n@keyframes slide-up {\n  from {\n    transform: translateY(100%);\n  }\n  to {\n    transform: translateY(0%);\n  }\n}\n";
const DyteChatComposerViewStyle0 = dyteChatComposerViewCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const messageLimits = {
    messagesSent: 0,
    startTime: 0,
};
const DyteChatComposerView = /*@__PURE__*/ proxyCustomElement(class DyteChatComposerView extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.onNewMessage = createEvent(this, "newMessage", 7);
        this.onEditMessage = createEvent(this, "editMessage", 7);
        this.onEditCancel = createEvent(this, "editCancel", 7);
        this.onQuotedMessageDismiss = createEvent(this, "quotedMessageDismiss", 7);
        /** Whether user can send text messages */
        this.canSendTextMessage = true;
        /** Whether user can send file messages */
        this.canSendFiles = true;
        /** Message to be pre-populated */
        this.message = '';
        /** Quote message to be displayed */
        this.quotedMessage = '';
        /** Key for storing message in localStorage */
        this.storageKey = 'dyte-text-message';
        /** Placeholder for text input */
        this.inputTextPlaceholder = 'Enter your message';
        /** Sets composer to edit mode */
        this.isEditing = false;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** Whether to show emoji picker */
        this.disableEmojiPicker = false;
        /** Rate limits */
        this.rateLimits = {
            period: 60,
            maxInvocations: 60,
        };
        this.fileToUpload = null;
        this.isEmojiPickerOpen = false;
        this.disableSendButton = false;
        this.rateLimitsBreached = false;
        this.textMessage = '';
        this.sendFile = () => {
            if (!this.canSendFiles) {
                return;
            }
            if (this.fileToUpload.type === 'image') {
                this.onNewMessage.emit({
                    type: 'image',
                    image: this.fileToUpload.file,
                });
            }
            else {
                this.onNewMessage.emit({ type: 'file', file: this.fileToUpload.file });
            }
            this.fileToUpload = null;
        };
        this.handleSendMessage = () => {
            if (!this.canSendTextMessage || this.rateLimitsBreached) {
                return;
            }
            if (this.fileToUpload !== null) {
                this.sendFile();
                return;
            }
            const message = this.textMessage;
            const currentTime = Date.now();
            if (currentTime - messageLimits.startTime > this.rateLimits.period * 1000) {
                messageLimits.startTime = currentTime;
                messageLimits.messagesSent = 0;
            }
            messageLimits.messagesSent += 1;
            this.checkRateLimitBreached(currentTime);
            if (message.length > 0) {
                if (this.quotedMessage.length !== 0) {
                    this.onNewMessage.emit({
                        type: 'text',
                        message,
                    });
                }
                else {
                    this.onNewMessage.emit({ type: 'text', message });
                }
                this.cleanup();
            }
        };
        this.handleEditMessage = () => {
            this.onEditMessage.emit(this.textMessage);
            this.cleanup();
        };
        this.handleEditCancel = () => {
            this.onEditCancel.emit();
            this.cleanup();
        };
        this.onTextChangeHandler = (event) => {
            var _a;
            this.textMessage = event.detail;
            if (this.textMessage.length >= ((_a = this.maxLength) !== null && _a !== void 0 ? _a : MAX_TEXT_LENGTH)) {
                this.disableSendButton = true;
            }
            else if (this.disableSendButton) {
                this.disableSendButton = false;
            }
            gracefulStorage.setItem(this.storageKey, event.detail);
        };
        this.onKeyDownHandler = (event) => {
            if (event.key === 'Enter' && event.shiftKey) {
                return;
            }
            if (this.disableSendButton) {
                return;
            }
            if (event.key === 'Enter') {
                event.preventDefault();
                if (this.isEditing) {
                    this.handleEditMessage();
                }
                else {
                    this.handleSendMessage();
                }
            }
        };
        this.onFileUploadHandler = (type, file) => {
            this.fileToUpload = { type, file };
        };
        this.onQuotedMessageDismissHandler = () => {
            this.onQuotedMessageDismiss.emit();
        };
        this.cleanup = () => {
            this.textMessage = '';
            this.fileToUpload = null;
            gracefulStorage.setItem(this.storageKey, '');
            this.$textComposer.setText('', true);
            this.isEmojiPickerOpen = false;
        };
        this.onKeyDownHandler = this.onKeyDownHandler.bind(this);
    }
    connectedCallback() {
        this.textMessage = this.message || gracefulStorage.getItem(this.storageKey) || '';
        this.checkRateLimitBreached(Date.now());
    }
    componentWillUpdate() {
        this.textMessage = this.message || gracefulStorage.getItem(this.storageKey) || '';
    }
    componentDidLoad() {
        if (this.message) {
            writeTask(() => this.$textComposer.setText(this.message, true));
        }
    }
    checkRateLimitBreached(currentTime) {
        // Check if the function call is within limits
        if (messageLimits.messagesSent >= this.rateLimits.maxInvocations) {
            this.disableSendButton = true;
            this.rateLimitsBreached = true;
            const timeRemainingForReset = currentTime - messageLimits.startTime + this.rateLimits.period * 1000;
            setTimeout(() => {
                messageLimits.messagesSent = 0;
                messageLimits.startTime = Date.now();
                this.disableSendButton = false;
                this.rateLimitsBreached = false;
            }, timeRemainingForReset);
        }
    }
    render() {
        var _a;
        const uiProps = { iconPack: this.iconPack, t: this.t };
        return (h(Host, { key: 'd0cb57c1d3b74db36e3ddfa5453a960de7968a1b' }, this.canSendTextMessage && this.isEmojiPickerOpen && (h("dyte-emoji-picker", Object.assign({ key: 'd26c303b8d1e460eabe0fdbadb4f1ab3381b16cc', part: "emoji-picker", onPickerClose: () => {
                this.isEmojiPickerOpen = false;
            }, onDyteEmojiClicked: (e) => {
                this.textMessage += e.detail;
                this.$textComposer.setText(this.textMessage, true);
            } }, uiProps))), h("slot", { key: '93a6e0c49183a080be84172ce0a69b0d0a9b274a', name: "chat-addon" }), this.quotedMessage && this.quotedMessage.length !== 0 && (h("div", { key: '9b235c2f65766cc80f40091b6d4e01f614f910f3', class: "quoted-message-container", part: "quoted-message-container" }, h("div", { key: '3e2582d7ccc9747be95f140ea0f3c9151b5fc365', class: "quoted-message scrollbar" }, h("dyte-text-message-view", { key: 'd5ef25a57bf0f2a026c5fd92b202e0d337a3e52a', text: this.quotedMessage, isMarkdown: true })), h("div", { key: 'c0d69d22711c6dd7e9a84f18f3bdb2f4e0b60a20' }, h("dyte-icon", { key: '9a9b6cd5df08157b411cbcbfb628a714f04cd291', "aria-label": this.t('dismiss'), class: "dismiss", icon: this.iconPack.dismiss, onClick: this.onQuotedMessageDismissHandler })))), h("div", { key: '9dc15207103dceeded2a03c69a75bfa7919b98eb', class: "composer-container" }, h("div", { key: 'f456c8bd28ee60155b3735458aa172aa55b574f8', class: "composers" }, this.fileToUpload && (h("dyte-draft-attachment-view", Object.assign({ key: '0417d1e33ac0e4fc0df52bdc0a04661701c4efcf' }, uiProps, { attachment: this.fileToUpload, onDeleteAttachment: () => (this.fileToUpload = null) }))), !this.fileToUpload && (h("dyte-text-composer-view", { key: '83b68d635390774b5f931f5e00e0caa8f8b739d9', value: this.textMessage, placeholder: this.inputTextPlaceholder, onTextChange: this.onTextChangeHandler, keyDownHandler: this.onKeyDownHandler, maxLength: (_a = this.maxLength) !== null && _a !== void 0 ? _a : MAX_TEXT_LENGTH, rateLimitBreached: this.rateLimitsBreached, t: this.t, iconPack: this.iconPack, ref: (el) => (this.$textComposer = el) }))), h("div", { key: '033cfe3365464c83af8d0ef0b590c0ffa900c146', class: "chat-buttons", part: "chat-buttons" }, h("div", { key: 'fcc9ae557a0f31c15611694a6073486fa6b22986', class: "left", part: "chat-buttons-left" }, !this.fileToUpload && !this.isEditing && (h("div", { key: 'd9b9f602c036d8dec831daec2065097a987fa213' }, this.canSendFiles && [
            h("dyte-file-picker-button", Object.assign({ key: '31270adc1fb72d8817e3218d596823cbffd0b032' }, uiProps, { onFileChange: (event) => this.onFileUploadHandler('file', event.detail) })),
            h("dyte-file-picker-button", Object.assign({ key: '1168afc0827bc2b63463c1eaf1e805abea7388d7', filter: "image/*", label: this.t('chat.send_img'), icon: "image", onFileChange: (event) => this.onFileUploadHandler('image', event.detail) }, uiProps)),
        ], this.canSendTextMessage && !this.disableEmojiPicker && (h("dyte-emoji-picker-button", Object.assign({ key: 'ef781c8e02daadede1ddc1eab5ef52598484b6d0', isActive: this.isEmojiPickerOpen, onClick: () => {
                this.isEmojiPickerOpen = !this.isEmojiPickerOpen;
            } }, uiProps))), h("slot", { key: 'e80c453df4dcd546e804ea68ad9e5a783048662d', name: "chat-buttons" })))), h("div", { key: 'e76f5c295316bc20e52d150f3a005cd91c90e210', class: "right", part: "chat-buttons-right" }, !this.isEditing && (h("dyte-tooltip", { key: 'd26dee018b74152225a19258165534ed7f793066', variant: "primary", label: this.t('chat.send_msg'), delay: 2000 }, h("dyte-button", { key: '5ad58b3709f82d11006bbc05a80c9c74134fe598', kind: "icon", disabled: this.disableSendButton, onClick: () => this.handleSendMessage(), title: this.t('chat.send_msg') }, h("dyte-icon", { key: '785be312a087790413e75151d352085585f8be31', icon: this.iconPack.send })))), this.isEditing && (h("div", { key: '5ee9a079da42dd6ef58d39dd611a170d324d1783', class: "edit-buttons" }, h("dyte-tooltip", { key: '35ed375683386ff3a411e84b0bff663fd2d9cdfd', variant: "secondary", label: this.t('cancel'), delay: 2000 }, h("dyte-button", { key: '80b21a18537664018306abf9b8b099d2b1ec354f', kind: "icon", variant: "secondary", onClick: () => this.handleEditCancel(), title: this.t('cancel') }, h("dyte-icon", { key: 'd65f2a1c97cd5c36effcfa78fcd7ebe42b095be8', icon: this.iconPack.dismiss }))), h("dyte-tooltip", { key: '56ff8d5fd854720ec93f65d5bdcb88b4e2621e12', variant: "primary", label: this.t('chat.update_msg'), delay: 2000 }, h("dyte-button", { key: '81eb4a8f97baa957bfe718720fedbb8504010dae', kind: "icon", onClick: () => this.handleEditMessage(), title: this.t('chat.send_msg') }, h("dyte-icon", { key: '3fc29bac3ee52f825de73e81b19c49d92981dd4a', icon: this.iconPack.checkmark }))))))))));
    }
    static get style() { return DyteChatComposerViewStyle0; }
}, [1, "dyte-chat-composer-view", {
        "canSendTextMessage": [4, "can-send-text-message"],
        "canSendFiles": [4, "can-send-files"],
        "message": [1],
        "quotedMessage": [1, "quoted-message"],
        "storageKey": [1, "storage-key"],
        "inputTextPlaceholder": [1, "input-text-placeholder"],
        "isEditing": [4, "is-editing"],
        "iconPack": [16],
        "t": [16],
        "maxLength": [2, "max-length"],
        "disableEmojiPicker": [4, "disable-emoji-picker"],
        "rateLimits": [16],
        "fileToUpload": [32],
        "isEmojiPickerOpen": [32],
        "disableSendButton": [32],
        "rateLimitsBreached": [32]
    }]);
__decorate([
    SyncWithStore()
], DyteChatComposerView.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteChatComposerView.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-chat-composer-view", "dyte-button", "dyte-draft-attachment-view", "dyte-emoji-picker", "dyte-emoji-picker-button", "dyte-file-picker-button", "dyte-icon", "dyte-markdown-view", "dyte-spinner", "dyte-text-composer-view", "dyte-text-message-view", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-chat-composer-view":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteChatComposerView);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "dyte-draft-attachment-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "dyte-emoji-picker":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "dyte-emoji-picker-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "dyte-file-picker-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "dyte-markdown-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-text-composer-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-text-message-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteChatComposerView as D, defineCustomElement as d };
