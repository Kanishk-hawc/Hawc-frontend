import { p as proxyCustomElement, H, d as createEvent, h } from './p-1d5392d7.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import './p-e497ad6d.js';
import { d as defineCustomElement$3 } from './p-e7892c80.js';
import { d as defineCustomElement$2 } from './p-a443344b.js';
import { d as defineCustomElement$1 } from './p-b4f8107f.js';

const dyteFilePickerButtonCss = ":host{}";
const DyteFilePickerButtonStyle0 = dyteFilePickerButtonCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteFilePickerButton = /*@__PURE__*/ proxyCustomElement(class DyteFilePickerButton extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.onFileChange = createEvent(this, "fileChange", 7);
        /** Icon */
        this.icon = 'attach';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.uploadFile = () => {
            const input = this.fileInputField;
            input.type = 'file';
            if (this.filter) {
                input.accept = this.filter;
            }
            input.onchange = (e) => {
                const { validity, files: [file], } = e.target;
                if (validity.valid) {
                    this.onFileChange.emit(file);
                }
            };
            input.click();
        };
    }
    connectedCallback() {
        this.fileInputField = document.createElement('input');
    }
    disconnectedCallback() {
        // For GC
        this.fileInputField = undefined;
    }
    render() {
        const label = this.label || this.t('chat.send_file');
        const icon = this.iconPack[this.icon];
        return (h("dyte-tooltip", { key: '334c14777babe9de198038dd3b37926176d1a08a', label: label }, h("dyte-button", { key: '0bc4d797c62074d3ffe9531d04c9087b21b16e0f', variant: "ghost", kind: "icon", onClick: () => this.uploadFile(), title: label }, h("dyte-icon", { key: '99066f2ba8c7eb773b1e9d5d9895d340af1d11fe', icon: icon }))));
    }
    static get style() { return DyteFilePickerButtonStyle0; }
}, [1, "dyte-file-picker-button", {
        "filter": [1],
        "label": [1],
        "icon": [1],
        "iconPack": [16],
        "t": [16]
    }]);
__decorate([
    SyncWithStore()
], DyteFilePickerButton.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteFilePickerButton.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-file-picker-button", "dyte-button", "dyte-icon", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-file-picker-button":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteFilePickerButton);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteFilePickerButton as D, defineCustomElement as d };
