import { p as proxyCustomElement, H, h, e as Host } from './p-1d5392d7.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { a as defaultIconPack } from './p-dce5d30e.js';
import './p-e497ad6d.js';
import { d as defineCustomElement$2 } from './p-a443344b.js';

const dyteInformationTooltipCss = ":host{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);cursor:pointer}.tooltip-container{position:relative;display:flex;flex-direction:row;align-items:center}.tooltip-container dyte-icon{cursor:pointer;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.tooltip-container dyte-icon:hover+.tooltip{display:flex !important}.tooltip{position:absolute;margin-left:var(--dyte-space-2, 8px);display:none !important;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));padding:var(--dyte-space-2, 8px);font-weight:400;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52));z-index:50;display:flex;min-width:var(--dyte-space-60, 240px);flex-direction:column;--tw-shadow:0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);left:14px}";
const DyteInformationTooltipStyle0 = dyteInformationTooltipCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteInformationTooltip$1 = /*@__PURE__*/ proxyCustomElement(class DyteInformationTooltip extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /** Icon pack */
        this.iconPack = defaultIconPack;
    }
    render() {
        return (h(Host, { key: '1822149a5a3207123a195788c5bd496a308cb5f0' }, h("div", { key: '75b5ae46629ab8950e071eb3b040530ae590a687', class: "tooltip-container" }, h("dyte-icon", { key: '88335152fe1f6c73e324873fb652a759017c36a1', icon: this.iconPack.info, size: "sm" }), h("div", { key: '310bb9aa766c63e64d6719bd1df11cdc1a4aa079', class: "tooltip" }, h("slot", { key: 'da533663227141d5a6d172b5f1e75698d3f037be', name: "tootlip-text" })))));
    }
    static get style() { return DyteInformationTooltipStyle0; }
}, [1, "dyte-information-tooltip", {
        "iconPack": [16]
    }]);
__decorate([
    SyncWithStore()
], DyteInformationTooltip$1.prototype, "iconPack", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-information-tooltip", "dyte-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-information-tooltip":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteInformationTooltip$1);
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteInformationTooltip = DyteInformationTooltip$1;
const defineCustomElement = defineCustomElement$1;

export { DyteInformationTooltip, defineCustomElement };
