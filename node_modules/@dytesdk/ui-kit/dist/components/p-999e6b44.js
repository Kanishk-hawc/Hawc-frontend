import { p as proxyCustomElement, H, h, e as Host } from './p-1d5392d7.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import './p-e497ad6d.js';
import { R as Render } from './p-52218cb0.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$1 } from './p-67b40782.js';

const dyteParticipantsStageListCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;width:100%;flex-direction:column;font-size:14px}.participants-container{margin-bottom:var(--dyte-space-4, 16px);height:100%;width:100%}h3,.heading-count{margin:var(--dyte-space-0, 0px);display:flex;align-items:center;justify-content:center;padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));text-align:center}.heading-count{font-size:14px}.participants{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.empty-stage-list{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);text-align:center;font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}dyte-participant{width:100%}";
const DyteParticipantsStageListStyle0 = dyteParticipantsStageListCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipants = /*@__PURE__*/ proxyCustomElement(class DyteParticipants extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /** Config */
        this.config = defaultConfig;
        /** Hide Stage Participants Count Header */
        this.hideHeader = false;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** View mode for participants list */
        this.view = 'sidebar';
        /** Language */
        this.t = useLanguage();
        /** Search */
        this.search = '';
        this.participants = [];
        this.createParticipantNode = (participant) => {
            const defaults = {
                meeting: this.meeting,
                view: this.view,
                t: this.t,
                config: this.config,
                states: this.states,
                size: this.size,
                iconPack: this.iconPack,
            };
            return (h("div", null, h(Render, { element: "dyte-participant", defaults: defaults, props: { role: 'listitem', participant, key: participant.id }, childProps: Object.assign(Object.assign({}, defaults), { participant, size: this.size }), deepProps: true })));
        };
        this.updateStageList = () => {
            this.getParticipants(this.search);
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
        this.searchChanged(this.search);
    }
    disconnectedCallback() {
        const { participants, stage } = this.meeting;
        if (this.meeting == null)
            return;
        this.participantJoinedListener &&
            this.meeting.participants.joined.removeListener('participantJoined', this.participantJoinedListener);
        this.participantLeftListener &&
            this.meeting.participants.joined.removeListener('participantLeft', this.participantLeftListener);
        participants.joined.removeListener('stageStatusUpdate', this.updateStageList);
        stage === null || stage === void 0 ? void 0 : stage.removeListener('stageStatusUpdate', this.updateStageList);
    }
    meetingChanged(meeting) {
        if (meeting == null)
            return;
        this.participantJoinedListener = (participant) => {
            if (participant.stageStatus !== 'ON_STAGE')
                return;
            // Do not append if participant name or id does not match search query
            const lowerCaseSearch = this.search.toLowerCase();
            if (!participant.name.toLowerCase().includes(lowerCaseSearch) ||
                !participant.id.toLowerCase().includes(lowerCaseSearch))
                return;
            this.participants = [
                ...this.participants.filter((p) => p.id !== participant.id),
                participant,
            ];
        };
        this.participantLeftListener = (participant) => {
            this.participants = this.participants.filter((p) => p.id !== participant.id);
        };
        meeting.participants.joined.addListener('participantJoined', this.participantJoinedListener);
        meeting.participants.joined.addListener('participantLeft', this.participantLeftListener);
        this.updateStageList();
        meeting === null || meeting === void 0 ? void 0 : meeting.participants.joined.on('stageStatusUpdate', this.updateStageList);
        meeting === null || meeting === void 0 ? void 0 : meeting.stage.on('stageStatusUpdate', this.updateStageList);
    }
    searchChanged(search) {
        this.getParticipants(search);
    }
    getParticipants(search = this.search) {
        let list = this.meeting.stage.status === 'ON_STAGE' ? [this.meeting.self] : [];
        list = [
            ...list,
            ...this.meeting.participants.joined.toArray().filter((p) => p.stageStatus === 'ON_STAGE'),
        ];
        if (search === '')
            this.participants = list;
        else {
            this.participants = list.filter((p) => { var _a; return ((_a = p.name) !== null && _a !== void 0 ? _a : p.id).toLowerCase().includes(search.toLowerCase()); });
        }
    }
    render() {
        return (h(Host, { key: '1cfe52f6c91528ce8d5e733beba07f1bb7d3e080' }, h("div", { key: '5883133588f2b11d045244d30b5a0fa118dd4d4c', class: "participants-container" }, !this.hideHeader && (h("div", { key: '5bc3c5b64c68496d32abd2e8921c45c0a1c078a5', class: "heading-count", part: "heading-count" }, this.t('participants'), " (", this.participants.length, ")")), h("dyte-virtualized-participant-list", { key: '4e709fdb9c5b04920f9ce06a7ca359e6c57d84e5', items: this.participants, renderItem: this.createParticipantNode, part: "participants", class: "participants", emptyListElement: h("div", { class: "empty-stage-list" }, this.search.length > 0 ? this.t('search.could_not_find') : this.t('search.empty')) }))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "search": ["searchChanged"]
    }; }
    static get style() { return DyteParticipantsStageListStyle0; }
}, [1, "dyte-participants-stage-list", {
        "meeting": [16],
        "states": [16],
        "config": [16],
        "size": [513],
        "hideHeader": [4, "hide-header"],
        "iconPack": [16],
        "view": [1],
        "t": [16],
        "search": [1],
        "participants": [32]
    }, undefined, {
        "meeting": ["meetingChanged"],
        "search": ["searchChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteParticipants.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteParticipants.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteParticipants.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteParticipants.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteParticipants.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-participants-stage-list", "dyte-virtualized-participant-list"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-participants-stage-list":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteParticipants);
            }
            break;
        case "dyte-virtualized-participant-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteParticipants as D, defineCustomElement as d };
