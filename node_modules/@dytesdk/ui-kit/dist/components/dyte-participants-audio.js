import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { e as disableSettingSinkId, a as defaultIconPack, c as useLanguage, m as isLiveStreamViewer } from './p-dce5d30e.js';
import { l as logger } from './p-5605a420.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$4 } from './p-e7892c80.js';
import { d as defineCustomElement$3 } from './p-659ba053.js';
import { d as defineCustomElement$2 } from './p-a443344b.js';

/**
 * Handles audio from participants in a meeting
 */
class DyteAudio {
    constructor(meeting, audio) {
        this.meeting = meeting;
        this.audio = audio !== null && audio !== void 0 ? audio : document.createElement('audio');
        this.audio.autoplay = true;
        this.audioStream = new MediaStream();
        this.audio.srcObject = this.audioStream;
        this.audioTracks = [];
    }
    addTrack(id, track) {
        if (!this.audioTracks.some((a) => a.id === id)) {
            this.audioTracks.push({ id, track });
            this.audioStream.addTrack(track);
            this.play();
        }
    }
    removeTrack(id) {
        const track = this.audioTracks.find((a) => a.id === id);
        if (track != null) {
            this.audioStream.removeTrack(track.track);
            this.audioTracks = this.audioTracks.filter((a) => a.id !== id);
        }
    }
    async play() {
        var _a;
        this.audio.srcObject = this.audioStream;
        await ((_a = this.audio.play()) === null || _a === void 0 ? void 0 : _a.catch((err) => {
            if (err.name === 'NotAllowedError') {
                if (this._onError != null) {
                    this._onError();
                }
            }
            else if (err.name !== 'AbortError') {
                logger.error('[dyte-audio] play() error\n', err);
            }
        }));
    }
    async setDevice(id) {
        var _a, _b, _c;
        if (disableSettingSinkId(this.meeting))
            return;
        await ((_c = (_b = (_a = this.audio).setSinkId) === null || _b === void 0 ? void 0 : _b.call(_a, id)) === null || _c === void 0 ? void 0 : _c.catch((err) => {
            logger.error('[dyte-audio] setSinkId() error\n', err);
        }));
    }
    onError(onError) {
        this._onError = onError;
    }
}

const dyteParticipantsAudioCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block;overflow-wrap:break-word;color:rgb(var(--dyte-colors-text-1000, 255 255 255));word-wrap:break-word}.modal{box-sizing:border-box;width:100%;max-width:var(--dyte-space-96, 384px);padding:var(--dyte-space-4, 16px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}.modal h3{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px);font-size:24px;font-weight:500}.modal p{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-6, 24px)}.modal dyte-button{width:100%}";
const DyteParticipantsAudioStyle0 = dyteParticipantsAudioCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipantsAudio$1 = /*@__PURE__*/ proxyCustomElement(class DyteParticipantsAudio extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.dialogClose = createEvent(this, "dialogClose", 7);
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** Pass existing audio element */
        this.preloadedAudioElem = undefined;
        this.showPlayDialog = false;
        this.onDyteDialogClose = () => {
            this.showPlayDialog = false;
            this.dialogClose.emit();
        };
    }
    componentDidLoad() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a;
        if (this.meeting == null)
            return;
        this.audioUpdateListener &&
            this.meeting.participants.joined.removeListener('audioUpdate', this.audioUpdateListener);
        this.screenShareUpdateListener &&
            this.meeting.participants.joined.removeListener('screenShareUpdate', this.screenShareUpdateListener);
        this.participantLeftListener &&
            this.meeting.participants.joined.removeListener('participantLeft', this.participantLeftListener);
        this.deviceUpdateListener &&
            this.meeting.self.removeListener('deviceUpdate', this.deviceUpdateListener);
        this.stageStatusUpdateListener &&
            ((_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.removeListener('stageStatusUpdate', this.stageStatusUpdateListener));
    }
    async setupAudio() {
        this.audio = new DyteAudio(this.meeting, this.preloadedAudioElem);
        // Set the device to the current speaker device
        const currentDevices = this.meeting.self.getCurrentDevices();
        if (currentDevices.speaker != null) {
            await this.audio.setDevice(currentDevices.speaker.deviceId);
        }
    }
    async handleAutoPlayError() {
        if (!this.audio) {
            await this.setupAudio();
        }
        this.audio.onError(() => {
            this.showPlayDialog = true;
        });
        this.audio.play();
        return;
    }
    async handleEvents(meeting) {
        this.audioUpdateListener = ({ id, audioEnabled, audioTrack }) => {
            const audioId = `audio-${id}`;
            if (audioEnabled && audioTrack != null) {
                this.audio.addTrack(audioId, audioTrack);
            }
            else {
                this.audio.removeTrack(audioId);
            }
        };
        const participants = meeting.participants.joined.toArray();
        for (const participant of participants) {
            this.audioUpdateListener(participant);
        }
        this.participantLeftListener = ({ id }) => {
            this.audio.removeTrack(`audio-${id}`);
            this.audio.removeTrack(`screenshare-${id}`);
        };
        this.screenShareUpdateListener = ({ id, screenShareEnabled, screenShareTracks }) => {
            const audioId = `screenshare-${id}`;
            if (screenShareEnabled && screenShareTracks.audio != null) {
                this.audio.addTrack(audioId, screenShareTracks.audio);
            }
            else {
                this.audio.removeTrack(audioId);
            }
        };
        this.deviceUpdateListener = ({ device, preview }) => {
            if (preview)
                return;
            if (device.kind === 'audiooutput') {
                this.audio.setDevice(device.deviceId);
            }
        };
        meeting.participants.joined.addListener('audioUpdate', this.audioUpdateListener);
        meeting.participants.joined.addListener('screenShareUpdate', this.screenShareUpdateListener);
        meeting.participants.joined.addListener('participantLeft', this.participantLeftListener);
        meeting.self.addListener('deviceUpdate', this.deviceUpdateListener);
    }
    async meetingChanged(meeting) {
        var _a;
        if (meeting == null)
            return;
        this.setupAudio();
        if (isLiveStreamViewer(meeting)) {
            this.stageStatusUpdateListener = async (status) => {
                if (status === 'ON_STAGE') {
                    // NOTE(@madhugb): When someone joins stage handle autoplay and also handle events
                    await this.handleAutoPlayError();
                }
            };
            (_a = meeting.stage) === null || _a === void 0 ? void 0 : _a.on('stageStatusUpdate', this.stageStatusUpdateListener);
        }
        else {
            await this.handleAutoPlayError();
        }
        await this.handleEvents(meeting);
    }
    render() {
        return (h(Host, { key: '8f75e172807ecedd630de70b5cc3e8c73aad09de' }, this.showPlayDialog && (h("dyte-dialog", { key: '4770efe5ed393e2033706e983996a2b7f822feac', open: true, onDyteDialogClose: this.onDyteDialogClose, hideCloseButton: true, disableEscapeKey: true, iconPack: this.iconPack, t: this.t }, h("div", { key: '5c1cb440b28b8a7a3e655056a3495f1d10c7168e', class: "modal" }, h("h3", { key: 'c3426d43cb93374db943952d7e21ecc7ed49c6ad' }, this.t('audio_playback.title')), h("p", { key: '46e1b0443fec08430c1d08556a528e2de7419708' }, this.t('audio_playback.description')), h("dyte-button", { key: '99173304cfa04af361162d78993c0ccb06de3400', kind: "wide", onClick: () => {
                this.audio.play();
                this.onDyteDialogClose();
            }, title: this.t('audio_playback') }, this.t('audio_playback')))))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteParticipantsAudioStyle0; }
}, [1, "dyte-participants-audio", {
        "meeting": [16],
        "iconPack": [16],
        "t": [16],
        "preloadedAudioElem": [16],
        "showPlayDialog": [32]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteParticipantsAudio$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsAudio$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsAudio$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-participants-audio", "dyte-button", "dyte-dialog", "dyte-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-participants-audio":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteParticipantsAudio$1);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-dialog":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteParticipantsAudio = DyteParticipantsAudio$1;
const defineCustomElement = defineCustomElement$1;

export { DyteParticipantsAudio, defineCustomElement };
