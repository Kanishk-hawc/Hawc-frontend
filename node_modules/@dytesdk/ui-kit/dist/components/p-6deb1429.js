import { p as proxyCustomElement, H, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { h as hasOnlyEmojis } from './p-338c7261.js';
import { C as ChatHead } from './p-3727005d.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { T as TextMessageView } from './p-f0a60cbc.js';

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteTextMessage = /*@__PURE__*/ proxyCustomElement(class DyteTextMessage extends H {
    constructor() {
        super();
        this.__registerHost();
        /** Date object of now, to calculate distance between dates */
        this.now = new Date();
        /** Whether the message is continued by same user */
        this.isContinued = false;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** show message in bubble */
        this.showBubble = false;
    }
    render() {
        return (h(Host, { key: 'e082f0075f22f97890614d9b15899a0ed09ade61' }, !this.isContinued && (h(ChatHead, { key: '4b825acf9ef68956ff3ce22227de8b411adb34a1', name: this.message.displayName, time: this.message.time, now: this.now })), h("div", { key: 'fdeaa70cd0f2b5bc0576e81269af073724081c5f', class: {
                body: true,
                bubble: this.showBubble,
            }, part: "body" }, h("div", { key: '6ecfefe0b50f26759757e88024e050551d32f370', class: { text: true, emoji: hasOnlyEmojis(this.message.message) } }, h(TextMessageView, { key: '8272d97cf01cd17426607194a9c39c6152db6e2c', message: this.message.message })))));
    }
}, [0, "dyte-text-message", {
        "message": [16],
        "now": [16],
        "isContinued": [516, "is-continued"],
        "iconPack": [16],
        "t": [16],
        "showBubble": [4, "show-bubble"]
    }]);
__decorate([
    SyncWithStore()
], DyteTextMessage.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteTextMessage.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-text-message"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-text-message":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteTextMessage);
            }
            break;
    } });
}
defineCustomElement();

export { DyteTextMessage as D, defineCustomElement as d };
