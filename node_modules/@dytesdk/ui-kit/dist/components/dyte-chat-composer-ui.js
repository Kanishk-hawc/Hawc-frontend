import { p as proxyCustomElement, H, d as createEvent, w as writeTask, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { r as reverse, h as handleFilesDataTransfer, k as replyBlockPattern, e as extractReplyBlock, s as stripOutReplyBlock, M as MAX_TEXT_LENGTH } from './p-83da1e09.js';
import { a as gracefulStorage } from './p-e497ad6d.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$7 } from './p-b503759c.js';
import { d as defineCustomElement$6 } from './p-e7892c80.js';
import { d as defineCustomElement$5 } from './p-c23d4f73.js';
import { d as defineCustomElement$4 } from './p-a443344b.js';
import { d as defineCustomElement$3 } from './p-cba97631.js';
import { d as defineCustomElement$2 } from './p-b4f8107f.js';

const dyteChatComposerUiCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}.chat-input{position:relative;margin:var(--dyte-space-2, 8px);z-index:10;box-sizing:border-box;display:flex;flex-direction:column;border-radius:var(--dyte-border-radius-md, 8px);border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}textarea{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));box-sizing:border-box;padding:var(--dyte-space-3, 12px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}textarea::-moz-placeholder{color:rgb(var(--dyte-colors-text-1000, 255 255 255))}textarea::placeholder{color:rgb(var(--dyte-colors-text-1000, 255 255 255))}textarea{border-top-left-radius:var(--dyte-border-radius-md, 8px);border-top-right-radius:var(--dyte-border-radius-md, 8px);font-family:var(--dyte-font-family, sans-serif);outline:2px solid transparent;outline-offset:2px;resize:none;overflow-y:auto;border-width:var(--dyte-border-width-none, 0);border-style:none;min-height:60px;font-size:14px}.chat-buttons{border-bottom-right-radius:var(--dyte-border-radius-md, 8px);border-bottom-left-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));display:flex;height:var(--dyte-space-8, 32px);align-items:center;justify-content:space-between;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px)}.chat-buttons .left dyte-button{margin-right:var(--dyte-space-1, 4px)}.chat-buttons .left dyte-button dyte-icon{height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px)}.chat-buttons .right{z-index:10}.chat-buttons .right .edit-buttons{display:flex;gap:var(--dyte-space-2, 8px)}.chat-buttons>div{display:flex;align-items:center}dyte-emoji-picker{z-index:0;position:absolute;bottom:var(--dyte-space-32, 128px);border-top:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));animation:0.3s slide-up ease}@keyframes slide-up{from{transform:translateY(100%)}to{transform:translateY(0%)}}.member-list{margin:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-1, 4px);max-height:var(--dyte-space-28, 112px);min-width:var(--dyte-space-40, 160px);max-width:var(--dyte-space-64, 256px);padding:var(--dyte-space-0, 0px);position:absolute;bottom:var(--dyte-space-28, 112px);list-style-type:none;overflow-y:auto;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));border-radius:var(--dyte-border-radius-sm, 4px);--tw-border-spacing-x:var(--dyte-space-2, 8px);--tw-border-spacing-y:var(--dyte-space-2, 8px);border-spacing:var(--tw-border-spacing-x) var(--tw-border-spacing-y);border-style:solid;border-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / 0.5)}.member-list .member{display:flex;align-items:center;gap:var(--dyte-space-1, 4px);padding:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-4, 16px);cursor:pointer}.member-list .member dyte-avatar{flex-shrink:0;height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);font-size:14px;color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.member-list .member span{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.member-list .member:hover,.member-list .member.selected{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-700, 2 70 253) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.suggested-replies{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-3, 12px);display:flex;flex-wrap:nowrap;gap:var(--dyte-space-2, 8px);list-style-type:none;overflow-x:auto}.suggested-replies dyte-tooltip{flex-shrink:0}.suggested-replies li{padding:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-md, 8px);background-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / 0.75);color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));cursor:pointer}.suggested-replies li:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-bg-opacity))}.preview-overlay{position:absolute;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));border-radius:var(--dyte-border-radius-md, 8px)}.file-preview{position:absolute;top:var(--dyte-space-4, 16px);left:var(--dyte-space-4, 16px);max-width:-moz-fit-content;max-width:fit-content;max-height:var(--dyte-space-20, 80px)}.file-preview:hover dyte-tooltip{display:block}.file-preview dyte-tooltip{position:absolute;top:calc(var(--dyte-space-1, 4px) * -1);left:calc(var(--dyte-space-1, 4px) * -1);display:none;margin-left:calc(var(--dyte-space-1, 4px) * -1);margin-top:calc(var(--dyte-space-1, 4px) * -1)}.file-preview dyte-button{display:flex;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);align-items:center;justify-content:center;border-radius:9999px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));border:1px solid rgb(var(--dyte-colors-text-1000, 255 255 255))}.file-preview dyte-icon{height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.preview-image{height:var(--dyte-space-16, 64px);width:var(--dyte-space-16, 64px);-o-object-fit:cover;object-fit:cover;max-height:100%;max-width:100%;overflow:clip;border-radius:var(--dyte-border-radius-md, 8px)}.preview-file{padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));overflow:hidden;text-overflow:ellipsis;white-space:nowrap;border-radius:var(--dyte-border-radius-md, 8px);max-width:200px}@keyframes scroll-text{0%{transform:translateX(0%)}70%{transform:translateX(-100%)}80%{transform:translateX(0%)}100%{transform:translateX(0%)}}";
const DyteChatComposerUiStyle0 = dyteChatComposerUiCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const MENTION_CHAR = '@';
const DyteChatComposerUi$1 = /*@__PURE__*/ proxyCustomElement(class DyteChatComposerUi extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.onNewMessage = createEvent(this, "dyteNewMessage", 7);
        this.onEditMessage = createEvent(this, "dyteEditMessage", 7);
        this.onEditCancelled = createEvent(this, "dyteEditCancelled", 7);
        /** Whether user can send text messages */
        this.canSendTextMessage = false;
        /** Whether user can send file messages */
        this.canSendFiles = false;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** Whether to show emoji picker */
        this.disableEmojiPicker = false;
        /** prefill the composer */
        this.prefill = {};
        /** list of members that can be mentioned */
        this.members = [];
        this.emojiPickerActive = false;
        this.mentionQuery = '';
        this.focusedMemberIndex = 0;
        this.filePreview = null;
        this.fileReader = new FileReader();
        this.fileToUpload = null;
        this.handleKeyDown = (e) => {
            if (e.key === MENTION_CHAR && [undefined, ' '].includes(this.$textArea.value.at(-1))) {
                // [undefined, ' '] checks if mention is start of text or start of new word
                this.mentionQuery = MENTION_CHAR;
            }
            if (e.key === 'ArrowDown') {
                this.focusedMemberIndex = Math.min(this.focusedMemberIndex + 1, this.getFilteredMembers().length - 1);
            }
            if (e.key === 'ArrowUp') {
                this.focusedMemberIndex = Math.max(0, this.focusedMemberIndex - 1);
            }
            if (e.key === 'Escape' || (e.key === 'Backspace' && this.mentionQuery === MENTION_CHAR)) {
                this.mentionQuery = '';
            }
            if (['Enter', 'Tab', ' '].includes(e.key) && this.mentionQuery !== '') {
                const member = this.getFilteredMembers()[this.focusedMemberIndex];
                this.onMemberSelect(member);
                e.preventDefault();
                return;
            }
            // slack like typing experience
            if (e.key === 'Enter' && e.shiftKey) {
                const height = this.$textArea.clientHeight;
                if (height < 200) {
                    this.$textArea.style.height = this.$textArea.clientHeight + 20 + 'px';
                }
            }
            else if (e.key === 'Enter') {
                e.preventDefault();
                if (this.prefill.editMessage) {
                    this.handleEditMessage();
                }
                else {
                    this.handleSendMessage();
                }
            }
            else if (e.key === 'Backspace') {
                if (this.$textArea.value.endsWith('\n')) {
                    this.$textArea.style.height = this.$textArea.clientHeight - 20 + 'px';
                }
                else if (this.$textArea.value === '') {
                    this.$textArea.style.height = 'auto';
                }
            }
        };
        this.handleKeyUp = (_e) => {
            if (this.mentionQuery !== '') {
                const reversed = reverse(this.$textArea.value.trim());
                const query = reversed.substring(0, reversed.indexOf(MENTION_CHAR));
                this.mentionQuery = `${MENTION_CHAR}${reverse(query)}`;
            }
        };
        this.onPaste = (e) => {
            const data = e.clipboardData || e.originalEvent.clipboardData;
            writeTask(() => {
                if (data && data.items && data.items.length > 0) {
                    handleFilesDataTransfer(data.items, this.generateFilePreview);
                    this.$textArea.value = '';
                }
            });
        };
        this.generateFilePreview = (type, file) => {
            this.fileToUpload = { type, image: file, file };
            if (type === 'image') {
                this.fileReader.readAsDataURL(file);
            }
            else if (type === 'file') {
                this.filePreview = file.name;
            }
        };
        this.sendFile = () => {
            if (!this.canSendFiles) {
                return;
            }
            if (this.fileToUpload.type === 'image') {
                this.onNewMessage.emit({
                    type: 'image',
                    file: this.fileToUpload.image,
                    image: this.fileToUpload.image,
                });
            }
            else {
                this.onNewMessage.emit({ type: 'file', file: this.fileToUpload.file });
            }
            this.cleanUpFileUpload();
        };
        this.handleSendMessage = () => {
            if (!this.canSendTextMessage) {
                return;
            }
            if (this.fileToUpload !== null) {
                this.sendFile();
                return;
            }
            const message = this.$textArea.value.trim();
            if (message.length > 0) {
                if (this.prefill.replyMessage) {
                    this.onNewMessage.emit({
                        type: 'text',
                        message,
                        replyTo: this.prefill.replyMessage,
                    });
                }
                else {
                    this.onNewMessage.emit({ type: 'text', message });
                }
                this.cleanup();
            }
        };
        this.cleanup = () => {
            this.mentionQuery = '';
            this.focusedMemberIndex = 0;
            this.$textArea.value = '';
            this.$textArea.style.height = 'auto';
            gracefulStorage.setItem(this.storageKey, '');
        };
        this.handleEditMessage = () => {
            var _a;
            let editedMessage = this.$textArea.value.trim();
            if (((_a = this.prefill.editMessage) === null || _a === void 0 ? void 0 : _a.message) &&
                replyBlockPattern.test(this.prefill.editMessage.message)) {
                // add back the reply block which we stripped out for editing
                const replyBlock = extractReplyBlock(this.prefill.editMessage.message);
                editedMessage = `${replyBlock}\n\n${editedMessage}`;
            }
            this.onEditMessage.emit({
                id: this.prefill.editMessage.id,
                message: editedMessage,
                channelId: this.prefill.editMessage.channelId,
            });
            this.cleanup();
        };
        this.handleEditCancel = () => {
            this.onEditCancelled.emit();
            this.cleanup();
        };
        this.initializeTextField = (el) => {
            this.$textArea = el;
            const message = gracefulStorage.getItem(this.storageKey) || '';
            this.$textArea.value = message;
        };
        this.onMemberSelect = (member) => {
            const reversedQuery = reverse(this.mentionQuery);
            const reversed = reverse(this.$textArea.value.trim()).replace(reversedQuery, '');
            this.$textArea.value = reverse(reversed) + `${MENTION_CHAR}${member.name} `;
            this.mentionQuery = '';
            this.focusedMemberIndex = 0;
            writeTask(() => this.$textArea.focus());
        };
        this.getFilteredMembers = () => {
            const query = this.mentionQuery.replace(MENTION_CHAR, '');
            return this.members.filter((member) => member.name.toLowerCase().includes(query.toLowerCase()));
        };
        this.cleanUpFileUpload = () => {
            this.filePreview = null;
            this.fileToUpload = null;
        };
        this.renderSuggestedReplies = () => {
            if (!this.prefill.suggestedReplies)
                return;
            if (this.prefill.suggestedReplies.length === 0)
                return;
            return (h("ul", { class: "suggested-replies scrollbar" }, this.prefill.suggestedReplies.map((reply) => (h("dyte-tooltip", { label: this.t('chat.click_to_send') }, h("li", { onClick: () => this.onNewMessage.emit({ type: 'text', message: reply }) }, reply))))));
        };
        this.renderMenu = () => {
            if (this.mentionQuery.length === 0)
                return;
            const filteredMembers = this.getFilteredMembers();
            if (filteredMembers.length === 0)
                return;
            return (h("ul", { class: "member-list scrollbar" }, filteredMembers.map((member, index) => (h("li", { class: { member: true, selected: index === this.focusedMemberIndex }, onClick: () => this.onMemberSelect(member), ref: ($li) => {
                    if (index === this.focusedMemberIndex) {
                        writeTask(() => {
                            if ($li)
                                $li.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'nearest' });
                        });
                    }
                } }, h("dyte-avatar", { participant: {
                    name: member.name,
                    picture: member.picture,
                }, size: "sm" }), h("span", null, member.name))))));
        };
    }
    connectedCallback() {
        this.fileReader.onload = (e) => {
            if (typeof e.target.result === 'string') {
                this.filePreview = e.target.result;
            }
        };
        // this.fileReader.onloadstart = () => {};
        // this.fileReader.onloadend = () => {};
    }
    onChannelChanged() {
        this.mentionQuery = '';
        this.focusedMemberIndex = 0;
        const message = gracefulStorage.getItem(this.storageKey) || '';
        this.$textArea.value = message;
        this.emojiPickerActive = false;
    }
    componentDidRender() {
        if (this.prefill.editMessage || this.prefill.replyMessage) {
            writeTask(() => this.$textArea.focus());
        }
    }
    get storageKey() {
        if (this.channelId) {
            return `dyte-text-message-${this.channelId}`;
        }
        return 'dyte-text-message';
    }
    uploadFile(type) {
        const input = document.createElement('input');
        input.type = 'file';
        if (type === 'image') {
            input.accept = 'image/*';
        }
        input.onchange = (e) => {
            const { validity, files: [file], } = e.target;
            if (validity.valid) {
                this.generateFilePreview(type, file);
            }
        };
        input.click();
    }
    renderFilePreview() {
        if (typeof this.filePreview !== 'string')
            return;
        return (h("div", { class: "preview-overlay" }, h("div", { class: "file-preview" }, h("dyte-tooltip", { label: this.t('chat.cancel_upload') }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: this.cleanUpFileUpload }, h("dyte-icon", { icon: this.iconPack.dismiss }))), this.fileToUpload.type === 'image' ? (h("img", { class: "preview-image", src: this.filePreview })) : (h("div", { class: "preview-file" }, h("span", null, this.filePreview))))));
    }
    render() {
        var _a;
        let defaultValue = '';
        if ((_a = this.prefill.editMessage) === null || _a === void 0 ? void 0 : _a.message) {
            defaultValue = stripOutReplyBlock(this.prefill.editMessage.message);
        }
        return (h(Host, { key: 'bd9e183a8595fdf13f53dfe74243fc58b889b490' }, this.canSendTextMessage && this.emojiPickerActive && (h("dyte-emoji-picker", { key: '63cbab4694b7640574190ced33fc146742dabd16', part: "emoji-picker", onPickerClose: () => {
                this.emojiPickerActive = false;
            }, onDyteEmojiClicked: (e) => {
                this.$textArea.value += e.detail;
                this.$textArea.focus();
            }, t: this.t })), this.renderSuggestedReplies(), h("slot", { key: '3c12d633831662382c5ee01830b6a1dccffa1c36', name: "chat-addon" }), h("slot", { key: 'e94a874a6afd03896c905af9974c8cc8de662d7a', name: "quote-block" }), h("div", { key: '5a9c021aa2501c6da3d25e75b72338aea15a635c', class: "chat-input", part: "chat-input" }, this.renderMenu(), this.canSendTextMessage && (h("textarea", { key: 'bc8057712688cdb12f40fa62d1dca57797785b75', class: "scrollbar", part: "textarea", ref: this.initializeTextField, autoFocus: true, placeholder: this.fileToUpload ? '' : this.t('chat.message_placeholder'), value: defaultValue, onPaste: this.onPaste, maxLength: MAX_TEXT_LENGTH, onKeyDown: this.handleKeyDown, onKeyUp: this.handleKeyUp, onInput: (e) => {
                gracefulStorage.setItem(this.storageKey, e.target.value);
            }, disabled: !!this.filePreview })), h("div", { key: '6df2b595eed0375f53bed5d56bdcc6c0493a8247', class: "chat-buttons", part: "chat-buttons" }, h("div", { key: '021c7d3b3901080792144bf5f76eab855c11b4e4', class: "left", part: "chat-buttons-left" }, !this.prefill.editMessage &&
            this.canSendFiles && [
            h("dyte-tooltip", { key: 'c11d06e54dcfde7fd035a4c3037046f0364a92ba', label: this.t('chat.send_file') }, h("dyte-button", { key: '2124e7ca46e80b74fc10a6698471671360285bc0', variant: "ghost", kind: "icon", onClick: () => this.uploadFile('file'), title: this.t('chat.send_file') }, h("dyte-icon", { key: '511036aad6e7b7098a281ef7e365ad1ba1a6e25f', icon: this.iconPack.attach }))),
            h("dyte-tooltip", { key: '77777a43eae025a8b1e40d1945f8cec0445992be', label: this.t('chat.send_img') }, h("dyte-button", { key: '51bbef7f90a068397eab5affeec9877f8d9be929', variant: "ghost", kind: "icon", onClick: () => this.uploadFile('image'), title: this.t('chat.send_img') }, h("dyte-icon", { key: '98a2c7f941afe3bcb06cc18984978311f9c0e501', icon: this.iconPack.image }))),
        ], !this.prefill.editMessage && this.canSendTextMessage && !this.disableEmojiPicker && (h("dyte-tooltip", { key: 'a614a1ca853e2e2e7390cf74321f70881cde38a9', label: this.t('chat.send_emoji') }, h("dyte-button", { key: 'ae859f19d1e8372723409dc0530ed5bcfc01c619', variant: "ghost", kind: "icon", class: { active: this.emojiPickerActive }, title: this.t('chat.send_emoji'), onClick: () => {
                this.emojiPickerActive = !this.emojiPickerActive;
            } }, h("dyte-icon", { key: '92e8add087597deca28e864fffad34f521203f01', icon: this.iconPack.emoji_multiple }))))), !!this.filePreview && this.renderFilePreview(), this.canSendTextMessage && (h("div", { key: '3a1dd50dd4f77dfdce4ecef6cbeeb7cd7330044c', class: "right", part: "chat-buttons-right" }, !this.prefill.editMessage && (h("dyte-tooltip", { key: '47afdb3c09f71c39e0f059f6f19f367aa3c0164b', variant: "primary", label: this.t('chat.send_msg'), delay: 2000 }, h("dyte-button", { key: '1a7646cee202fa4be64de7bb0afc8b58dd750919', kind: "icon", onClick: () => this.handleSendMessage(), title: this.t('chat.send_msg') }, h("dyte-icon", { key: 'ebc857dc0e41c20f8bc73d3123f9b3cf8c752aa6', icon: this.iconPack.send })))), this.prefill.editMessage && (h("div", { key: '20ed1557de83b2bbc3167ee58a2535f9d53dd5d2', class: "edit-buttons" }, h("dyte-tooltip", { key: '542bc4c98d2411579913c50dae2fe3ddf26858c0', variant: "secondary", label: this.t('cancel'), delay: 2000 }, h("dyte-button", { key: 'ff5bcf87c4cf6a13385f7314744f9dc39ead0b3d', kind: "icon", variant: "secondary", onClick: () => this.handleEditCancel(), title: this.t('cancel') }, h("dyte-icon", { key: '5f514ddf6986d2fe4bfe9641c0aa0c8a834cfae8', icon: this.iconPack.dismiss }))), h("dyte-tooltip", { key: 'f0ebc5ea3f5801377ded5745a7bf83cd369a7fe4', variant: "primary", label: this.t('chat.update_msg'), delay: 2000 }, h("dyte-button", { key: '34e8521c0a11747adddedf555dcceba8b7db2a27', kind: "icon", onClick: () => this.handleEditMessage(), title: this.t('chat.send_msg') }, h("dyte-icon", { key: '8082c8dcb7a670889bf07a2811baa432c85ebf53', icon: this.iconPack.checkmark })))))))))));
    }
    static get watchers() { return {
        "channelId": ["onChannelChanged"]
    }; }
    static get style() { return DyteChatComposerUiStyle0; }
}, [1, "dyte-chat-composer-ui", {
        "canSendTextMessage": [4, "can-send-text-message"],
        "canSendFiles": [4, "can-send-files"],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "disableEmojiPicker": [4, "disable-emoji-picker"],
        "prefill": [16],
        "members": [16],
        "channelId": [1, "channel-id"],
        "emojiPickerActive": [32],
        "mentionQuery": [32],
        "focusedMemberIndex": [32],
        "filePreview": [32]
    }, undefined, {
        "channelId": ["onChannelChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteChatComposerUi$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteChatComposerUi$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteChatComposerUi$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-chat-composer-ui", "dyte-avatar", "dyte-button", "dyte-emoji-picker", "dyte-icon", "dyte-spinner", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-chat-composer-ui":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteChatComposerUi$1);
            }
            break;
        case "dyte-avatar":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "dyte-emoji-picker":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteChatComposerUi = DyteChatComposerUi$1;
const defineCustomElement = defineCustomElement$1;

export { DyteChatComposerUi, defineCustomElement };
