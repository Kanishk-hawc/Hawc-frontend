import { p as proxyCustomElement, H, d as createEvent, h } from './p-1d5392d7.js';
import { p as provideDyteDesignSystem, g as generateConfig, d as deepMerge } from './p-8ff76aaf.js';
import { g as getSize } from './p-96be234f.js';
import { n as uiState, c as useLanguage, d as defaultConfig, a as defaultIconPack } from './p-dce5d30e.js';
import { R as Render } from './p-52218cb0.js';
import './p-e497ad6d.js';
import { i as index } from './p-f47d4fe8.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$10 } from './p-3322a930.js';
import { d as defineCustomElement$$ } from './p-b503759c.js';
import { d as defineCustomElement$_ } from './p-a9bd9d4b.js';
import { d as defineCustomElement$Z } from './p-0ac95ccf.js';
import { d as defineCustomElement$Y } from './p-867da383.js';
import { d as defineCustomElement$X } from './p-951917ce.js';
import { d as defineCustomElement$W } from './p-e7892c80.js';
import { d as defineCustomElement$V } from './p-20f63782.js';
import { d as defineCustomElement$U } from './p-3bf5adeb.js';
import { d as defineCustomElement$T } from './p-3bacbb66.js';
import { d as defineCustomElement$S } from './p-2de4aa36.js';
import { d as defineCustomElement$R } from './p-6375461a.js';
import { d as defineCustomElement$Q } from './p-eb3a36c7.js';
import { d as defineCustomElement$P } from './p-46d8fe11.js';
import { d as defineCustomElement$O } from './p-d962d0d6.js';
import { d as defineCustomElement$N } from './p-533b3008.js';
import { d as defineCustomElement$M } from './p-f94944fd.js';
import { d as defineCustomElement$L } from './p-f3ee4c1f.js';
import { d as defineCustomElement$K } from './p-5049e1df.js';
import { d as defineCustomElement$J } from './p-a01c5f12.js';
import { d as defineCustomElement$I } from './p-90b26474.js';
import { d as defineCustomElement$H } from './p-7f827ea4.js';
import { d as defineCustomElement$G } from './p-6d531b8e.js';
import { d as defineCustomElement$F } from './p-4cad30d8.js';
import { d as defineCustomElement$E } from './p-52a3a26c.js';
import { d as defineCustomElement$D } from './p-659ba053.js';
import { d as defineCustomElement$C } from './p-20f71b6b.js';
import { d as defineCustomElement$B } from './p-0d294acc.js';
import { d as defineCustomElement$A } from './p-c23d4f73.js';
import { d as defineCustomElement$z } from './p-b6cf9ccc.js';
import { d as defineCustomElement$y } from './p-07fba69f.js';
import { d as defineCustomElement$x } from './p-c9409082.js';
import { d as defineCustomElement$w } from './p-da1a768d.js';
import { d as defineCustomElement$v } from './p-a443344b.js';
import { d as defineCustomElement$u } from './p-b31e4510.js';
import { d as defineCustomElement$t } from './p-1db055d4.js';
import { d as defineCustomElement$s } from './p-ae10f779.js';
import { d as defineCustomElement$r } from './p-6d3979dc.js';
import { d as defineCustomElement$q } from './p-8b1a680a.js';
import { d as defineCustomElement$p } from './p-9740eba3.js';
import { d as defineCustomElement$o } from './p-764a90a3.js';
import { d as defineCustomElement$n } from './p-80ecfb3b.js';
import { d as defineCustomElement$m } from './p-9ae9dd32.js';
import { d as defineCustomElement$l } from './p-3a600290.js';
import { d as defineCustomElement$k } from './p-88d926c0.js';
import { d as defineCustomElement$j } from './p-6bcc2f81.js';
import { d as defineCustomElement$i } from './p-2eccc6c6.js';
import { d as defineCustomElement$h } from './p-062d7bc4.js';
import { d as defineCustomElement$g } from './p-5bbf142f.js';
import { d as defineCustomElement$f } from './p-0eaa23c6.js';
import { d as defineCustomElement$e } from './p-43dce699.js';
import { d as defineCustomElement$d } from './p-f40c832e.js';
import { d as defineCustomElement$c } from './p-3ca9314d.js';
import { d as defineCustomElement$b } from './p-996ce7a8.js';
import { d as defineCustomElement$a } from './p-7777c347.js';
import { d as defineCustomElement$9 } from './p-d0534546.js';
import { d as defineCustomElement$8 } from './p-336b8c58.js';
import { d as defineCustomElement$7 } from './p-cba97631.js';
import { d as defineCustomElement$6 } from './p-9548192b.js';
import { d as defineCustomElement$5 } from './p-88bc267d.js';
import { d as defineCustomElement$4 } from './p-6deb1429.js';
import { d as defineCustomElement$3 } from './p-e74a5224.js';
import { d as defineCustomElement$2 } from './p-b4f8107f.js';

const dyteMeetingCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{box-sizing:border-box;display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));overflow:hidden;position:fixed;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);height:100%;width:100%}:host([mode='fill']){position:relative}";
const DyteMeetingStyle0 = dyteMeetingCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMeeting$1 = /*@__PURE__*/ proxyCustomElement(class DyteMeeting extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.statesUpdate = createEvent(this, "dyteStatesUpdate", 7);
        this.roomJoinedListener = () => {
            this.updateStates({ meeting: 'joined' });
        };
        this.waitlistedListener = () => {
            this.updateStates({ meeting: 'waiting' });
        };
        this.roomLeftListener = ({ state }) => {
            // Let socketConnectionUpdate listener handle this case.
            if (state === 'disconnected' || state === 'failed')
                return;
            this.updateStates({ meeting: 'ended', roomLeftState: state });
        };
        this.mediaPermissionUpdateListener = ({ kind, message }) => {
            if (['audio', 'video'].includes(kind)) {
                if ((message === 'DENIED' || message === 'SYSTEM_DENIED') &&
                    uiState.states.activeDebugger !== true) {
                    const permissionModalSettings = {
                        enabled: true,
                        kind,
                    };
                    this.updateStates({ activePermissionsMessage: permissionModalSettings });
                }
            }
        };
        this.socketConnectionUpdateListener = ({ state }) => {
            if (state === 'failed') {
                setTimeout(() => {
                    this.meeting.leave('disconnected');
                }, this.leaveRoomTimer);
            }
        };
        /** Whether to load config from preset */
        this.loadConfigFromPreset = false;
        /** Whether to apply the design system on the document root from config */
        this.applyDesignSystem = false;
        /** Fill type */
        this.mode = 'fixed';
        /** Whether participant should leave when this component gets unmounted */
        this.leaveOnUnmount = false;
        /** Language */
        this.t = useLanguage();
        /** UI Config */
        this.config = defaultConfig;
        /** Grid layout */
        this.gridLayout = 'row';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        this.handleChangingMeeting = (destinationMeetingId) => {
            this.updateStates({
                activeBreakoutRoomsManager: Object.assign(Object.assign({}, uiState.states.activeBreakoutRoomsManager), { destinationMeetingId }),
            });
        };
    }
    connectedCallback() {
        var _a;
        if (typeof window !== 'undefined') {
            this.authErrorListener = (ev) => {
                if (ev.detail.message.includes('401')) {
                    this.updateStates({ meeting: 'ended', roomLeftState: 'unauthorized' });
                }
            };
            window.addEventListener('dyteError', this.authErrorListener);
        }
        this.leaveRoomTimer = 10000;
        this.loadConfigFromPreset = true;
        this.applyDesignSystem = true;
        this.resizeObserver = new index(() => this.handleResize());
        this.resizeObserver.observe(this.host);
        if (this.applyDesignSystem &&
            ((_a = this.config) === null || _a === void 0 ? void 0 : _a.designTokens) != null &&
            typeof document !== 'undefined') {
            provideDyteDesignSystem(document.documentElement, this.config.designTokens);
        }
        this.meetingChanged(this.meeting);
    }
    clearListeners(meeting) {
        if (!meeting)
            return;
        meeting.self.removeListener('roomLeft', this.roomLeftListener);
        meeting.self.removeListener('roomJoined', this.roomJoinedListener);
        meeting.self.removeListener('waitlisted', this.waitlistedListener);
        meeting.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
        meeting.meta.removeListener('socketConnectionUpdate', this.socketConnectionUpdateListener);
    }
    disconnectedCallback() {
        var _a;
        if (this.leaveOnUnmount) {
            (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.leaveRoom();
        }
        this.resizeObserver.disconnect();
        this.clearListeners(this.meeting);
        window.removeEventListener('dyteError', this.authErrorListener);
    }
    meetingChanged(meeting) {
        var _a, _b;
        if (!meeting)
            return;
        this.updateStates({ viewType: meeting.meta.viewType });
        if (this.loadConfigFromPreset && meeting.self.config != null) {
            const theme = meeting.self.config;
            const { config, data } = generateConfig(theme, meeting);
            if (this.config === defaultConfig) {
                // only override the config if the object is same as defaultConfig
                // which means it's a different object passed via prop
                this.config = config;
            }
            if (this.showSetupScreen == null) {
                // only override this value if the prop isn't passed
                this.showSetupScreen = data.showSetupScreen;
            }
            if (meeting.connectedMeetings.supportsConnectedMeetings &&
                ((_a = uiState.states.activeBreakoutRoomsManager) === null || _a === void 0 ? void 0 : _a.destinationMeetingId)) {
                this.showSetupScreen = false;
            }
        }
        if (this.applyDesignSystem &&
            ((_b = this.config) === null || _b === void 0 ? void 0 : _b.designTokens) != null &&
            typeof document !== 'undefined') {
            provideDyteDesignSystem(document.documentElement, this.config.designTokens);
        }
        meeting.self.addListener('roomJoined', this.roomJoinedListener);
        meeting.self.addListener('waitlisted', this.waitlistedListener);
        meeting.self.addListener('roomLeft', this.roomLeftListener);
        meeting.self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
        meeting.meta.addListener('socketConnectionUpdate', this.socketConnectionUpdateListener);
        if (meeting.connectedMeetings.supportsConnectedMeetings) {
            meeting.connectedMeetings.once('changingMeeting', this.handleChangingMeeting);
        }
        if (meeting.self.roomJoined) {
            this.updateStates({ meeting: 'joined' });
        }
        else {
            if (this.showSetupScreen) {
                this.updateStates({ meeting: 'setup' });
            }
            else {
                // join directly to the meeting
                meeting.joinRoom();
            }
        }
        window.removeEventListener('dyteError', this.authErrorListener);
    }
    listenState(e) {
        this.updateStates(e.detail);
    }
    handleResize() {
        this.size = getSize(this.host.clientWidth);
    }
    updateStates(states) {
        const newStates = Object.assign({}, uiState.states);
        uiState.states = deepMerge(newStates, states);
        this.statesUpdate.emit(uiState.states);
    }
    render() {
        const defaults = {
            meeting: this.meeting,
            size: this.size,
            states: uiState.states,
            config: this.config,
            iconPack: this.iconPack,
            t: this.t,
        };
        if (uiState.states.viewType === 'CHAT') {
            return h("dyte-chat", Object.assign({}, defaults));
        }
        const elementProps = {
            'dyte-grid': {
                layout: this.gridLayout,
            },
        };
        return h(Render, { element: "dyte-meeting", defaults: defaults, asHost: true, elementProps: elementProps });
    }
    get host() { return this; }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteMeetingStyle0; }
}, [1, "dyte-meeting", {
        "loadConfigFromPreset": [1028, "load-config-from-preset"],
        "applyDesignSystem": [1028, "apply-design-system"],
        "mode": [513],
        "leaveOnUnmount": [4, "leave-on-unmount"],
        "meeting": [16],
        "showSetupScreen": [1028, "show-setup-screen"],
        "t": [16],
        "config": [1040],
        "size": [1537],
        "gridLayout": [1, "grid-layout"],
        "iconPack": [16]
    }, [[0, "dyteStateUpdate", "listenState"]], {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteMeeting$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteMeeting$1.prototype, "t", void 0);
__decorate([
    SyncWithStore()
], DyteMeeting$1.prototype, "iconPack", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-meeting", "dyte-audio-visualizer", "dyte-avatar", "dyte-breakout-room-manager", "dyte-breakout-room-participants", "dyte-breakout-rooms-manager", "dyte-broadcast-message-modal", "dyte-button", "dyte-camera-selector", "dyte-channel-creator", "dyte-channel-details", "dyte-channel-header", "dyte-channel-selector-view", "dyte-chat", "dyte-chat-composer-view", "dyte-chat-message", "dyte-chat-messages-ui", "dyte-chat-messages-ui-paginated", "dyte-chat-search-results", "dyte-confirmation-modal", "dyte-counter", "dyte-debugger", "dyte-debugger-audio", "dyte-debugger-screenshare", "dyte-debugger-system", "dyte-debugger-video", "dyte-dialog", "dyte-dialog-manager", "dyte-draft-attachment-view", "dyte-emoji-picker", "dyte-emoji-picker-button", "dyte-file-message", "dyte-file-message-view", "dyte-file-picker-button", "dyte-icon", "dyte-image-message", "dyte-image-message-view", "dyte-image-viewer", "dyte-join-stage", "dyte-leave-meeting", "dyte-logo", "dyte-markdown-view", "dyte-menu", "dyte-menu-item", "dyte-menu-list", "dyte-message-view", "dyte-microphone-selector", "dyte-mute-all-confirmation", "dyte-notification", "dyte-notifications", "dyte-overlay-modal", "dyte-paginated-list", "dyte-participant-tile", "dyte-permissions-message", "dyte-settings", "dyte-settings-audio", "dyte-settings-video", "dyte-speaker-selector", "dyte-spinner", "dyte-switch", "dyte-text-composer-view", "dyte-text-message", "dyte-text-message-view", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-meeting":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteMeeting$1);
            }
            break;
        case "dyte-audio-visualizer":
            if (!customElements.get(tagName)) {
                defineCustomElement$10();
            }
            break;
        case "dyte-avatar":
            if (!customElements.get(tagName)) {
                defineCustomElement$$();
            }
            break;
        case "dyte-breakout-room-manager":
            if (!customElements.get(tagName)) {
                defineCustomElement$_();
            }
            break;
        case "dyte-breakout-room-participants":
            if (!customElements.get(tagName)) {
                defineCustomElement$Z();
            }
            break;
        case "dyte-breakout-rooms-manager":
            if (!customElements.get(tagName)) {
                defineCustomElement$Y();
            }
            break;
        case "dyte-broadcast-message-modal":
            if (!customElements.get(tagName)) {
                defineCustomElement$X();
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$W();
            }
            break;
        case "dyte-camera-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$V();
            }
            break;
        case "dyte-channel-creator":
            if (!customElements.get(tagName)) {
                defineCustomElement$U();
            }
            break;
        case "dyte-channel-details":
            if (!customElements.get(tagName)) {
                defineCustomElement$T();
            }
            break;
        case "dyte-channel-header":
            if (!customElements.get(tagName)) {
                defineCustomElement$S();
            }
            break;
        case "dyte-channel-selector-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$R();
            }
            break;
        case "dyte-chat":
            if (!customElements.get(tagName)) {
                defineCustomElement$Q();
            }
            break;
        case "dyte-chat-composer-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$P();
            }
            break;
        case "dyte-chat-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$O();
            }
            break;
        case "dyte-chat-messages-ui":
            if (!customElements.get(tagName)) {
                defineCustomElement$N();
            }
            break;
        case "dyte-chat-messages-ui-paginated":
            if (!customElements.get(tagName)) {
                defineCustomElement$M();
            }
            break;
        case "dyte-chat-search-results":
            if (!customElements.get(tagName)) {
                defineCustomElement$L();
            }
            break;
        case "dyte-confirmation-modal":
            if (!customElements.get(tagName)) {
                defineCustomElement$K();
            }
            break;
        case "dyte-counter":
            if (!customElements.get(tagName)) {
                defineCustomElement$J();
            }
            break;
        case "dyte-debugger":
            if (!customElements.get(tagName)) {
                defineCustomElement$I();
            }
            break;
        case "dyte-debugger-audio":
            if (!customElements.get(tagName)) {
                defineCustomElement$H();
            }
            break;
        case "dyte-debugger-screenshare":
            if (!customElements.get(tagName)) {
                defineCustomElement$G();
            }
            break;
        case "dyte-debugger-system":
            if (!customElements.get(tagName)) {
                defineCustomElement$F();
            }
            break;
        case "dyte-debugger-video":
            if (!customElements.get(tagName)) {
                defineCustomElement$E();
            }
            break;
        case "dyte-dialog":
            if (!customElements.get(tagName)) {
                defineCustomElement$D();
            }
            break;
        case "dyte-dialog-manager":
            if (!customElements.get(tagName)) {
                defineCustomElement$C();
            }
            break;
        case "dyte-draft-attachment-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$B();
            }
            break;
        case "dyte-emoji-picker":
            if (!customElements.get(tagName)) {
                defineCustomElement$A();
            }
            break;
        case "dyte-emoji-picker-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$z();
            }
            break;
        case "dyte-file-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$y();
            }
            break;
        case "dyte-file-message-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$x();
            }
            break;
        case "dyte-file-picker-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$w();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$v();
            }
            break;
        case "dyte-image-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$u();
            }
            break;
        case "dyte-image-message-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$t();
            }
            break;
        case "dyte-image-viewer":
            if (!customElements.get(tagName)) {
                defineCustomElement$s();
            }
            break;
        case "dyte-join-stage":
            if (!customElements.get(tagName)) {
                defineCustomElement$r();
            }
            break;
        case "dyte-leave-meeting":
            if (!customElements.get(tagName)) {
                defineCustomElement$q();
            }
            break;
        case "dyte-logo":
            if (!customElements.get(tagName)) {
                defineCustomElement$p();
            }
            break;
        case "dyte-markdown-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$o();
            }
            break;
        case "dyte-menu":
            if (!customElements.get(tagName)) {
                defineCustomElement$n();
            }
            break;
        case "dyte-menu-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$m();
            }
            break;
        case "dyte-menu-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$l();
            }
            break;
        case "dyte-message-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$k();
            }
            break;
        case "dyte-microphone-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$j();
            }
            break;
        case "dyte-mute-all-confirmation":
            if (!customElements.get(tagName)) {
                defineCustomElement$i();
            }
            break;
        case "dyte-notification":
            if (!customElements.get(tagName)) {
                defineCustomElement$h();
            }
            break;
        case "dyte-notifications":
            if (!customElements.get(tagName)) {
                defineCustomElement$g();
            }
            break;
        case "dyte-overlay-modal":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "dyte-paginated-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "dyte-participant-tile":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "dyte-permissions-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "dyte-settings":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "dyte-settings-audio":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "dyte-settings-video":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "dyte-speaker-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "dyte-switch":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "dyte-text-composer-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-text-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-text-message-view":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteMeeting = DyteMeeting$1;
const defineCustomElement = defineCustomElement$1;

export { DyteMeeting, defineCustomElement };
