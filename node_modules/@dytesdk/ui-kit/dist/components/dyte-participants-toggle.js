import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { a as canViewParticipants } from './p-5a3e99fe.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$4 } from './p-9e83e8fe.js';
import { d as defineCustomElement$3 } from './p-a443344b.js';
import { d as defineCustomElement$2 } from './p-cba97631.js';

const dyteParticipantsToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block}:host([data-hidden]){display:none}.waiting-participants-count{position:absolute;right:var(--dyte-space-3, 12px);box-sizing:border-box;padding:var(--dyte-space-0\\.5, 2px);-webkit-user-select:none;-moz-user-select:none;user-select:none;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));font-size:12px;display:flex;height:var(--dyte-space-5, 20px);min-width:var(--dyte-space-5, 20px);align-items:center;justify-content:center;border-radius:9999px;z-index:1}:host([variant='horizontal']) .waiting-participants-count{right:var(--dyte-space-4, 16px);top:auto}";
const DyteParticipantsToggleStyle0 = dyteParticipantsToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipantsToggle$1 = /*@__PURE__*/ proxyCustomElement(class DyteParticipantsToggle extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Variant */
        this.variant = 'button';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.participantsActive = false;
        this.waitlistedParticipants = [];
        this.stageRequestedParticipants = [];
        this.badgeCount = 0;
        this.canViewParticipants = false;
        this.updateStageRequests = async (stageRequests) => {
            var _a, _b, _c;
            if (!stageRequests) {
                stageRequests = (_c = (_b = (_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.getAccessRequests()) === null || _b === void 0 ? void 0 : _b.stageRequests) !== null && _c !== void 0 ? _c : [];
            }
            this.stageRequestedParticipants = stageRequests;
            this.stageRequestedParticipants =
                this.meeting.stage.status === 'REQUESTED_TO_JOIN_STAGE'
                    ? [this.meeting.self, ...stageRequests]
                    : stageRequests;
            this.updateBadgeCount();
        };
        this.updateBadgeCount = () => {
            this.badgeCount = this.waitlistedParticipants.length + this.stageRequestedParticipants.length;
        };
        this.updateCanView = () => {
            this.canViewParticipants = canViewParticipants(this.meeting);
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
        this.statesChanged(this.states);
    }
    disconnectedCallback() {
        var _a, _b, _c;
        if (this.meeting == null)
            return;
        (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.removeListener('stageStatusUpdate', this.updateCanView);
        this.waitlistedParticipantJoinedListener &&
            this.meeting.participants.waitlisted.removeListener('participantJoined', this.waitlistedParticipantJoinedListener);
        this.waitlistedParticipantLeftListener &&
            this.meeting.participants.waitlisted.removeListener('participantLeft', this.waitlistedParticipantLeftListener);
        (_c = this.meeting.stage) === null || _c === void 0 ? void 0 : _c.removeListener('stageAccessRequestUpdate', this.updateStageRequests);
    }
    meetingChanged(meeting) {
        var _a;
        if (meeting == null)
            return;
        this.canViewParticipants = canViewParticipants(meeting);
        (_a = meeting === null || meeting === void 0 ? void 0 : meeting.stage) === null || _a === void 0 ? void 0 : _a.on('stageStatusUpdate', this.updateCanView);
        if (meeting.self.permissions.acceptWaitingRequests) {
            this.waitlistedParticipants = meeting.participants.waitlisted.toArray();
            this.waitlistedParticipantJoinedListener = (participant) => {
                if (!this.waitlistedParticipants.some((p) => p.id === participant.id)) {
                    this.waitlistedParticipants = [...this.waitlistedParticipants, participant];
                    this.updateBadgeCount();
                }
            };
            this.waitlistedParticipantLeftListener = (participant) => {
                this.waitlistedParticipants = this.waitlistedParticipants.filter((p) => p.id !== participant.id);
                this.updateBadgeCount();
            };
            meeting.participants.waitlisted.addListener('participantJoined', this.waitlistedParticipantJoinedListener);
            meeting.participants.waitlisted.addListener('participantLeft', this.waitlistedParticipantLeftListener);
        }
        if (this.meeting.self.permissions.stageEnabled &&
            this.meeting.self.permissions.acceptStageRequests) {
            this.updateStageRequests();
            meeting === null || meeting === void 0 ? void 0 : meeting.stage.on('stageAccessRequestUpdate', this.updateStageRequests);
        }
        this.updateBadgeCount();
    }
    statesChanged(states) {
        if (states != null) {
            this.participantsActive = states.activeSidebar === true && states.sidebar === 'participants';
        }
    }
    toggleParticipantsTab() {
        const states = this.states;
        this.participantsActive = !((states === null || states === void 0 ? void 0 : states.activeSidebar) && (states === null || states === void 0 ? void 0 : states.sidebar) === 'participants');
        this.stateUpdate.emit({
            activeSidebar: this.participantsActive,
            sidebar: this.participantsActive ? 'participants' : undefined,
            activeMoreMenu: false,
            activeAI: false,
        });
    }
    render() {
        if (!this.canViewParticipants)
            return h(Host, { "data-hidden": true });
        const text = this.t('participants');
        // const badgeCount = this.waitlistedParticipants.length + this.stageRequestedParticipants.length;
        return (h(Host, { title: text }, this.badgeCount !== 0 && !this.participantsActive && (h("div", { class: "waiting-participants-count", part: "waiting-participants-count" }, h("span", null, this.badgeCount <= 100 ? this.badgeCount : '99+'))), h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, class: { active: this.participantsActive }, onClick: () => this.toggleParticipantsTab(), icon: this.iconPack.participants, label: text, variant: this.variant })));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "states": ["statesChanged"]
    }; }
    static get style() { return DyteParticipantsToggleStyle0; }
}, [1, "dyte-participants-toggle", {
        "variant": [513],
        "meeting": [16],
        "states": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "participantsActive": [32],
        "waitlistedParticipants": [32],
        "stageRequestedParticipants": [32],
        "badgeCount": [32],
        "canViewParticipants": [32]
    }, undefined, {
        "meeting": ["meetingChanged"],
        "states": ["statesChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteParticipantsToggle$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsToggle$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsToggle$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsToggle$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsToggle$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-participants-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-participants-toggle":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteParticipantsToggle$1);
            }
            break;
        case "dyte-controlbar-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteParticipantsToggle = DyteParticipantsToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteParticipantsToggle, defineCustomElement };
