import { p as proxyCustomElement, H, h } from './p-1d5392d7.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import './p-e497ad6d.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$5 } from './p-b503759c.js';
import { d as defineCustomElement$4 } from './p-e7892c80.js';
import { d as defineCustomElement$3 } from './p-a443344b.js';
import { d as defineCustomElement$2 } from './p-cba97631.js';
import { d as defineCustomElement$1 } from './p-b4f8107f.js';

const dyteParticipantsWaitingListCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-top:var(--dyte-space-4, 16px);margin-bottom:calc(var(--dyte-space-2, 8px) * -1);display:flex;width:100%;flex-direction:column;font-size:14px}.waiting-participants{margin-bottom:var(--dyte-space-8, 32px)}.waiting-participants .accept-all-button{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}h3,.heading-count{margin:var(--dyte-space-0, 0px);display:flex;align-items:center;justify-content:center;padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));text-align:center}.heading-count{font-size:14px}.participants{margin-top:var(--dyte-space-2, 8px);padding:var(--dyte-space-0, 0px)}.waiting-participant{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);display:flex;align-items:center}.waiting-participant .participant-details{margin-right:auto;display:flex;align-items:center}.waiting-participant .participant-details dyte-avatar{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);flex-shrink:0;font-size:14px}.waiting-participant .participant-details .name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width: 1080px){.waiting-participant .participant-details .name{max-width:var(--dyte-space-40, 160px)}}.waiting-participant .waitlist-controls{display:flex}.waiting-participant .waitlist-controls dyte-button{margin-left:var(--dyte-space-2, 8px);cursor:pointer;border-radius:var(--dyte-border-radius-sm, 4px)}.waiting-participant .waitlist-controls dyte-icon.accept{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}.waiting-participant .waitlist-controls dyte-icon.deny{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}";
const DyteParticipantsWaitingListStyle0 = dyteParticipantsWaitingListCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipantsWaitlisted = /*@__PURE__*/ proxyCustomElement(class DyteParticipantsWaitlisted extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /** Config */
        this.config = defaultConfig;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** View mode for participants list */
        this.view = 'sidebar';
        /** Language */
        this.t = useLanguage();
        this.acceptWaitingRoomRequest = async (id) => {
            await this.meeting.participants.acceptWaitingRoomRequest(id);
        };
        this.waitlistedParticipants = [];
        this.acceptAllWaitingRoomRequests = async () => {
            await this.meeting.participants.acceptAllWaitingRoomRequest(this.waitlistedParticipants.map((p) => p.id));
        };
        this.rejectWaitingRoomRequest = async (id) => {
            await this.meeting.participants.rejectWaitingRoomRequest(id);
        };
        this.shouldShowWaitlist = () => {
            if (this.meeting.meta.viewType === 'LIVESTREAM')
                return false;
            return (this.meeting.self.permissions.acceptWaitingRequests &&
                this.waitlistedParticipants.length !== 0);
        };
    }
    disconnectedCallback() {
        const { participants } = this.meeting;
        this.waitlistedParticipantJoinedListener &&
            participants.waitlisted.removeListener('participantJoined', this.waitlistedParticipantJoinedListener);
        this.waitlistedParticipantLeftListener &&
            participants.waitlisted.removeListener('participantLeft', this.waitlistedParticipantLeftListener);
        this.waitlistedParticipantsClearedListener &&
            participants.waitlisted.removeListener('participantsCleared', this.waitlistedParticipantsClearedListener);
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    meetingChanged(meeting) {
        if (meeting == null)
            return;
        this.waitlistedParticipants = meeting.participants.waitlisted.toArray();
        this.waitlistedParticipantJoinedListener = (participant) => {
            if (!this.waitlistedParticipants.some((p) => p.id === participant.id)) {
                this.waitlistedParticipants = [...this.waitlistedParticipants, participant];
            }
        };
        this.waitlistedParticipantLeftListener = (participant) => {
            this.waitlistedParticipants = this.waitlistedParticipants.filter((p) => p.id !== participant.id);
        };
        this.waitlistedParticipantsClearedListener = () => {
            this.waitlistedParticipants = [];
        };
        meeting.participants.waitlisted.addListener('participantJoined', this.waitlistedParticipantJoinedListener);
        meeting.participants.waitlisted.addListener('participantLeft', this.waitlistedParticipantLeftListener);
        meeting.participants.waitlisted.addListener('participantsCleared', this.waitlistedParticipantsClearedListener);
    }
    render() {
        if (this.view !== 'sidebar' || !this.shouldShowWaitlist())
            return;
        return (h("div", { class: "waiting-participants" }, h("div", { class: "heading-count", part: "waitlisted-heading-count" }, this.t('waitlist.header_title'), " (", this.waitlistedParticipants.length, ")"), h("ul", { class: "participants", part: "waitlisted-participants" }, this.waitlistedParticipants.map((participant) => (h("li", { class: "waiting-participant", key: participant.id }, h("div", { class: "participant-details" }, h("dyte-avatar", { participant: participant, size: "sm", iconPack: this.iconPack, t: this.t }), h("p", { class: "name", title: participant.name }, participant.name)), h("div", { class: "waitlist-controls" }, h("dyte-tooltip", { label: this.t('waitlist.deny_request'), variant: "secondary" }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: () => this.rejectWaitingRoomRequest(participant.id) }, h("dyte-icon", { class: "deny", icon: this.iconPack.dismiss }))), h("dyte-tooltip", { label: this.t('waitlist.accept_request'), variant: "secondary" }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: () => this.acceptWaitingRoomRequest(participant.id) }, h("dyte-icon", { class: "accept", icon: this.iconPack.checkmark })))))))), h("dyte-button", { class: "accept-all-button", variant: "secondary", kind: "wide", onClick: this.acceptAllWaitingRoomRequests }, this.t('waitlist.accept_all'))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteParticipantsWaitingListStyle0; }
}, [1, "dyte-participants-waiting-list", {
        "meeting": [16],
        "config": [16],
        "size": [513],
        "iconPack": [16],
        "view": [1],
        "t": [16],
        "waitlistedParticipants": [32]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteParticipantsWaitlisted.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsWaitlisted.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsWaitlisted.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantsWaitlisted.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-participants-waiting-list", "dyte-avatar", "dyte-button", "dyte-icon", "dyte-spinner", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-participants-waiting-list":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteParticipantsWaitlisted);
            }
            break;
        case "dyte-avatar":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteParticipantsWaitlisted as D, defineCustomElement as d };
