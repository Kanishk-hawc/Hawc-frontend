import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { i as isFullScreenEnabled, r as requestFullScreen, e as exitFullSreen, a as isFullScreenSupported } from './p-02f19345.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$3 } from './p-9e83e8fe.js';
import { d as defineCustomElement$2 } from './p-a443344b.js';
import { d as defineCustomElement$1 } from './p-cba97631.js';

const dyteFullscreenToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}:host([data-hidden]){display:none}";
const DyteFullscreenToggleStyle0 = dyteFullscreenToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteFullscreenToggle = /*@__PURE__*/ proxyCustomElement(class DyteFullscreenToggle extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Variant */
        this.variant = 'button';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.fullScreenActive = false;
        this.isFullScreenSupported = true;
        this.onFullScreenchange = () => {
            this.fullScreenActive = isFullScreenEnabled();
        };
        this.toggleFullScreen = () => {
            let fullScreenElement = this.targetElement || document.querySelector('dyte-meeting');
            if (!fullScreenElement)
                return;
            if (!this.fullScreenActive) {
                requestFullScreen(fullScreenElement);
                this.fullScreenActive = true;
            }
            else {
                exitFullSreen();
                this.fullScreenActive = false;
            }
            this.stateUpdate.emit({ activeMoreMenu: false });
        };
    }
    connectedCallback() {
        this.isFullScreenSupported = isFullScreenSupported();
        this.onFullScreenchange();
        window.addEventListener('webkitfullscreenchange', this.onFullScreenchange);
        window.addEventListener('fullscreenchange', this.onFullScreenchange);
    }
    disconnectedCallback() {
        window.removeEventListener('webkitfullscreenchange', this.onFullScreenchange);
        window.removeEventListener('fullscreenchange', this.onFullScreenchange);
    }
    render() {
        if (!this.isFullScreenSupported) {
            return h(Host, { "data-hidden": true });
        }
        return (h(Host, { title: this.t('full_screen') }, h("dyte-controlbar-button", { size: this.size, iconPack: this.iconPack, onClick: this.toggleFullScreen, icon: this.fullScreenActive
                ? this.iconPack.full_screen_minimize
                : this.iconPack.full_screen_maximize, label: this.fullScreenActive ? this.t('full_screen.exit') : this.t('full_screen'), variant: this.variant })));
    }
    static get style() { return DyteFullscreenToggleStyle0; }
}, [1, "dyte-fullscreen-toggle", {
        "states": [16],
        "targetElement": [16],
        "variant": [513],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "fullScreenActive": [32],
        "isFullScreenSupported": [32]
    }]);
__decorate([
    SyncWithStore()
], DyteFullscreenToggle.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteFullscreenToggle.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteFullscreenToggle.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteFullscreenToggle.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-fullscreen-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-fullscreen-toggle":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteFullscreenToggle);
            }
            break;
        case "dyte-controlbar-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteFullscreenToggle as D, defineCustomElement as d };
