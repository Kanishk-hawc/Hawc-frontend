import { p as proxyCustomElement, H, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import './p-e497ad6d.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { R as Render } from './p-52218cb0.js';

const dyteAudioGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;height:100%;width:100%;box-sizing:border-box}.content{position:relative;display:flex;height:100%;width:100%;flex-direction:column;overflow-y:auto}.waitlist-area{display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.listening-title{text-align:center;margin-top:var(--dyte-space-5, 20px);margin-bottom:var(--dyte-space-4, 16px)}.waitlist-grid{flex:1 1 0%}.grid{box-sizing:border-box;flex:1 1 0%;gap:var(--dyte-space-6, 24px);display:flex;align-content:center;justify-content:center;flex-wrap:wrap}:host([size='md']) .grid{gap:var(--dyte-space-4, 16px)}:host([size='sm']) .grid{gap:var(--dyte-space-3, 12px)}dyte-audio-tile{aspect-ratio:1 / 1;flex:none;width:calc(20%);max-width:var(--dyte-space-48, 192px);transition:all 0.3s}dyte-audio-tile[size='md']{width:100%;max-width:var(--dyte-space-36, 144px)}dyte-audio-tile[size='sm']{width:100%;max-width:var(--dyte-space-24, 96px)}";
const DyteAudioGridStyle0 = dyteAudioGridCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteAudioGrid$1 = /*@__PURE__*/ proxyCustomElement(class DyteAudioGrid extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /** Icon Pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** Whether to hide self in the grid */
        this.hideSelf = false;
        this.activeParticipants = [];
        this.onStageParticipants = [];
        this.offStageParticipants = [];
        this.onParticipantListUpdate = () => {
            if (!this.meeting) {
                return;
            }
            let activeParticipants = this.meeting.participants.active.toArray();
            if (!this.hideSelf) {
                activeParticipants = [...activeParticipants, this.meeting.self];
            }
            let onStageParticipants = this.meeting.participants.joined
                .toArray()
                .filter((p) => !activeParticipants.some((a) => a.id === p.id));
            this.activeParticipants = activeParticipants;
            this.onStageParticipants = onStageParticipants;
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    meetingChanged(meeting) {
        if (!meeting || meeting.self.config.viewType !== 'AUDIO_ROOM') {
            return;
        }
        this.onParticipantListUpdate();
        // listeners
        meeting.participants.active.addListener('participantJoined', this.onParticipantListUpdate);
        meeting.participants.active.addListener('participantLeft', this.onParticipantListUpdate);
        meeting.participants.joined.addListener('participantJoined', this.onParticipantListUpdate);
        meeting.participants.joined.addListener('participantLeft', this.onParticipantListUpdate);
    }
    disconnectedCallback() {
        this.resizeObserver.disconnect();
        this.resizeObserver = undefined;
        this.meeting.participants.active.removeListener('participantJoined', this.onParticipantListUpdate);
        this.meeting.participants.active.removeListener('participantLeft', this.onParticipantListUpdate);
        this.meeting.participants.joined.removeListener('participantJoined', this.onParticipantListUpdate);
        this.meeting.participants.joined.removeListener('participantLeft', this.onParticipantListUpdate);
    }
    renderGrid(participants = []) {
        const defaults = {
            meeting: this.meeting,
            size: this.size,
            config: this.config,
            t: this.t,
            iconPack: this.iconPack,
            states: this.states,
        };
        return participants.map((participant) => {
            return (h(Render, { element: "dyte-audio-tile", defaults: defaults, props: {
                    key: participant.id,
                    participant,
                }, childProps: {
                    participant,
                }, deepProps: true }));
        });
    }
    render() {
        const onStage = this.activeParticipants.concat(this.onStageParticipants);
        return (h(Host, { key: 'e6ed7876a5948aac4b9596698f2e3047eefc05b5' }, h("div", { key: '94bb5d98a30cb29a6d949a6ad86cedff15590dc2', class: "content scrollbar" }, h("div", { key: 'c5521d2415aeb886b178d3792bf50d2942e8293a', class: "stage grid" }, this.renderGrid(onStage)), this.offStageParticipants.length > 0 && (h("div", { key: '99a43051949d1496fdad0f73b26e6b6caaf14701', class: "waitlist-area" }, h("div", { key: 'fecc92badc9ce6517a47e98ae3ab28b486a3698a', class: "listening-title" }, this.offStageParticipants.length, " ", this.t('grid.listening')), h("div", { key: 'eadea3da9dbc7fd01a9333def00649a1ababaf6c', class: "waitlist-grid grid" }, this.renderGrid(this.offStageParticipants))))), h("slot", { key: '6e05c350e0ad677d3f2f00436ce5c985bf00e498' })));
    }
    get host() { return this; }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteAudioGridStyle0; }
}, [1, "dyte-audio-grid", {
        "meeting": [16],
        "config": [16],
        "states": [16],
        "iconPack": [16],
        "size": [513],
        "t": [16],
        "hideSelf": [4, "hide-self"],
        "activeParticipants": [32],
        "onStageParticipants": [32],
        "offStageParticipants": [32]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteAudioGrid$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteAudioGrid$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteAudioGrid$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteAudioGrid$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteAudioGrid$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-audio-grid"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-audio-grid":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteAudioGrid$1);
            }
            break;
    } });
}
defineCustomElement$1();

const DyteAudioGrid = DyteAudioGrid$1;
const defineCustomElement = defineCustomElement$1;

export { DyteAudioGrid, defineCustomElement };
