import { p as proxyCustomElement, H, w as writeTask, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage, e as disableSettingSinkId } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$1 } from './p-a443344b.js';

const dyteMicrophoneSelectorCss = ".dyte-select{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.dyte-select:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dyte-select{display:block;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:var(--dyte-space-3, 12px);font-size:16px;--icon-size:var(--dyte-select-chevron-size, var(--dyte-space-6, 24px));--icon-right-position:var(--dyte-select-chevron-right-position, var(--dyte-space-2, 8px));background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");background-position:right var(--icon-right-position) center;background-repeat:no-repeat;background-size:var(--icon-size) var(--icon-size);padding-right:calc(var(--icon-right-position) * 5);width:100%;max-width:100%;text-overflow:ellipsis}.inline .dyte-select{margin-top:var(--dyte-space-1, 4px);width:100%;padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-8, 32px);font-size:14px}.row{margin-bottom:var(--dyte-space-2, 8px);display:flex;width:100%;align-items:center;justify-content:space-between;gap:var(--dyte-space-3, 12px)}.group{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px)}.group>*{margin-bottom:var(--dyte-space-2, 8px)}.group>*:last-child{margin-bottom:var(--dyte-space-0, 0px)}.group select{flex:1 1 0%}.inline.group{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0\\.5, 2px)}.inline.group>*{margin-bottom:var(--dyte-space-0, 0px)}label{display:flex;-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center;gap:var(--dyte-space-1, 4px);font-size:14px}.inline.container{display:flex;align-items:center;justify-content:flex-start;gap:var(--dyte-space-2, 8px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}";
const DyteMicrophoneSelectorStyle0 = dyteMicrophoneSelectorCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMicrophoneSelector = /*@__PURE__*/ proxyCustomElement(class DyteMicrophoneSelector extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** variant */
        this.variant = 'full';
        /** Language */
        this.t = useLanguage();
        this.audioinputDevices = [];
        this.canProduceAudio = true;
        this.currentDevices = { audio: undefined };
        this.stageStateListener = () => {
            this.canProduceAudio = this.meeting.self.permissions.canProduceAudio === 'ALLOWED';
        };
        this.deviceListUpdateListener = async () => {
            const devices = await this.meeting.self.getAudioDevices();
            this.audioinputDevices = devices;
        };
        this.deviceUpdateListener = ({ device }) => {
            if (device.kind === 'audioinput') {
                this.currentDevices = {
                    audio: device,
                };
            }
        };
        this.mediaPermissionUpdateListener = async ({ kind, message }) => {
            if (!this.meeting)
                return;
            if (kind === 'audio' && message === 'ACCEPTED') {
                this.audioinputDevices = await this.meeting.self.getAudioDevices();
            }
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a, _b, _c, _d, _e;
        (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.removeListener('stageStatusUpdate', this.stageStateListener);
        (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self.removeListener('deviceListUpdate', this.deviceListUpdateListener);
        (_d = this.meeting) === null || _d === void 0 ? void 0 : _d.self.removeListener('deviceUpdate', this.deviceUpdateListener);
        (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
    }
    meetingChanged(meeting) {
        if (meeting == null)
            return;
        writeTask(async () => {
            var _a, _b;
            const { self, stage } = meeting;
            const audioDevices = await meeting.self.getAudioDevices();
            const currentAudioDevice = (_a = meeting.self.getCurrentDevices()) === null || _a === void 0 ? void 0 : _a.audio;
            this.currentDevices = {
                audio: currentAudioDevice,
            };
            this.canProduceAudio = this.meeting.self.permissions.canProduceAudio === 'ALLOWED';
            stage === null || stage === void 0 ? void 0 : stage.addListener('stageStatusUpdate', this.stageStateListener);
            self.addListener('deviceListUpdate', this.deviceListUpdateListener);
            self.addListener('deviceUpdate', this.deviceUpdateListener);
            self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
            if (currentAudioDevice != undefined) {
                this.audioinputDevices = [
                    (_b = audioDevices.find((device) => device.deviceId === currentAudioDevice.deviceId)) !== null && _b !== void 0 ? _b : currentAudioDevice,
                    ...audioDevices.filter((device) => device.deviceId !== currentAudioDevice.deviceId),
                ];
            }
            else {
                this.audioinputDevices = audioDevices;
            }
        });
    }
    setDevice(deviceId) {
        var _a;
        if (disableSettingSinkId(this.meeting))
            return;
        const device = this.audioinputDevices.find((d) => d.deviceId === deviceId);
        if (device != null) {
            this.currentDevices = {
                audio: device,
            };
            (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.setDevice(device);
        }
    }
    render() {
        if (this.meeting == null)
            return null;
        let unnamedMicCount = 0;
        return (h(Host, null, this.canProduceAudio && (h("div", { part: "microphone-selection", class: 'group container ' + this.variant }, h("label", { slot: "label" }, this.variant !== 'inline' && this.t('settings.microphone_input'), h("dyte-icon", { icon: this.iconPack.mic_on, size: "sm" })), h("div", { class: "row" }, h("select", { class: "dyte-select", onChange: (e) => this.setDevice(e.target.value) }, this.audioinputDevices.map(({ deviceId, label }) => {
            var _a;
            return (h("option", { value: deviceId, selected: ((_a = this.currentDevices.audio) === null || _a === void 0 ? void 0 : _a.deviceId) === deviceId }, label || `Microphone ${++unnamedMicCount}`));
        })), h("slot", { name: "indicator" }))))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteMicrophoneSelectorStyle0; }
}, [1, "dyte-microphone-selector", {
        "meeting": [16],
        "size": [513],
        "iconPack": [16],
        "variant": [1],
        "t": [16],
        "audioinputDevices": [32],
        "canProduceAudio": [32],
        "currentDevices": [32]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteMicrophoneSelector.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteMicrophoneSelector.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteMicrophoneSelector.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteMicrophoneSelector.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-microphone-selector", "dyte-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-microphone-selector":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteMicrophoneSelector);
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteMicrophoneSelector as D, defineCustomElement as d };
