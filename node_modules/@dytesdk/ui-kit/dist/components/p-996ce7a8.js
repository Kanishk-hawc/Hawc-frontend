import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$a } from './p-3322a930.js';
import { d as defineCustomElement$9 } from './p-e7892c80.js';
import { d as defineCustomElement$8 } from './p-20f63782.js';
import { d as defineCustomElement$7 } from './p-a443344b.js';
import { d as defineCustomElement$6 } from './p-6bcc2f81.js';
import { d as defineCustomElement$5 } from './p-f40c832e.js';
import { d as defineCustomElement$4 } from './p-7777c347.js';
import { d as defineCustomElement$3 } from './p-d0534546.js';
import { d as defineCustomElement$2 } from './p-336b8c58.js';
import { d as defineCustomElement$1 } from './p-9548192b.js';

const dyteSettingsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;overflow:hidden;border-radius:var(--dyte-border-radius-md, 8px);width:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}header{display:flex;align-items:center;justify-content:space-between;padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px)}.title{font-size:20px;line-height:1}.back-btn,.dismiss-btn{border-radius:var(--dyte-border-radius-sm, 4px);background-color:transparent;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.back-btn:hover,.dismiss-btn:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}aside{box-sizing:border-box;display:flex;min-width:var(--dyte-space-56, 224px);flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));padding-left:var(--dyte-space-2, 8px)}aside button{margin-top:var(--dyte-space-4, 16px);box-sizing:border-box;display:flex;width:100%;align-items:center;justify-content:space-between;border-top-left-radius:var(--dyte-border-radius-sm, 4px);border-bottom-left-radius:var(--dyte-border-radius-sm, 4px);padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);background-color:transparent;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));cursor:default;font-size:16px;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);border-width:var(--dyte-border-width-none, 0);border-style:none;outline:2px solid transparent;outline-offset:2px}aside button .right{display:flex;align-items:center}aside button .right dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}aside button .right dyte-icon:last-child{margin-left:var(--dyte-space-4, 16px)}aside button[type='button']{cursor:pointer;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}aside button[type='button']:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}aside button[type='button']{border-right:var(--dyte-border-width-md, 2px) solid transparent}aside button.active{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-border-opacity));background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}aside button.active:hover{background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}dyte-icon.poor{--tw-text-opacity:1;color:rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-text-opacity))}dyte-icon.poorest{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}dyte-icon.good{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}main{display:flex;flex:1 1 0%;align-items:center;justify-content:center;padding-left:var(--dyte-space-6, 24px);padding-right:var(--dyte-space-6, 24px);box-sizing:border-box;width:100%;max-width:calc(100% - var(--dyte-space-56, 224px))}.dismiss-btn{position:absolute;top:var(--dyte-space-3, 12px);right:var(--dyte-space-3, 12px);height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}:host([size='sm']) aside{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}:host([size='sm']) .dismiss-btn{top:var(--dyte-space-5, 20px);right:var(--dyte-space-4, 16px)}:host([size='sm']) aside{width:100%;padding-left:var(--dyte-space-0, 0px)}:host([size='sm']) aside button{border-radius:var(--dyte-border-radius-none, 0)}:host([size='sm']) aside button.active{border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent}:host([size='sm']) aside button.active:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}:host([size='sm']) aside.hide{display:none}:host([size='sm']) main{display:none;max-width:100%;overflow-y:auto;padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px)}:host([size='sm']) main header{justify-content:center}:host([size='sm']) main header dyte-button{position:absolute;left:var(--dyte-space-4, 16px)}:host([size='sm']) main.active{display:block}";
const DyteSettingsStyle0 = dyteSettingsCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSettings = /*@__PURE__*/ proxyCustomElement(class DyteSettings extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        this.keyPressListener = (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        };
        this.stageStatusListener = () => {
            this.canProduceVideo = this.meeting.self.permissions.canProduceVideo === 'ALLOWED';
        };
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.activeTab = 'connection';
        this.isMobileMainVisible = false;
        this.networkStatus = 'good';
        this.canProduceVideo = false;
    }
    connectedCallback() {
        document.addEventListener('keydown', this.keyPressListener);
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a;
        // NOTE(ishita1805): hidden because preview was removed from self.
        // this.meeting?.self.disablePreview();
        this.keyPressListener && document.removeEventListener('keydown', this.keyPressListener);
        this.poorConnectionListener &&
            ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta.removeListener('poorConnection', this.poorConnectionListener));
        this.meeting.stage.removeListener('stageStatusUpdate', this.stageStatusListener);
    }
    meetingChanged(meeting) {
        if (meeting != null) {
            this.canProduceVideo = this.meeting.self.permissions.canProduceVideo === 'ALLOWED';
            if (!this.canProduceVideo) {
                this.activeTab = 'audio';
            }
            else {
                this.activeTab = 'video';
            }
            this.poorConnectionListener = ({ score }) => {
                if (score < 7) {
                    this.networkStatus = 'poor';
                }
                else if (score < 4) {
                    this.networkStatus = 'poorest';
                }
                setTimeout(() => {
                    // reset after 5 seconds
                    this.networkStatus = 'good';
                }, 5000);
            };
            meeting.meta.addListener('poorConnection', this.poorConnectionListener);
            meeting.stage.addListener('stageStatusUpdate', this.stageStatusListener);
        }
    }
    changeTab(tab) {
        this.activeTab = tab;
        if (this.size === 'sm') {
            if (!this.isMobileMainVisible) {
                this.isMobileMainVisible = true;
            }
        }
    }
    close() {
        this.stateUpdate.emit({ activeSettings: false });
    }
    render() {
        if (this.meeting == null)
            return null;
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            iconPack: this.iconPack,
            t: this.t,
        };
        return (h(Host, null, h("aside", { class: { hide: this.isMobileMainVisible }, part: "menu" }, h("header", null, h("h2", null, this.t('settings'))), h("button", { type: "button", class: { active: this.activeTab === 'audio' }, onClick: () => this.changeTab('audio') }, this.t('audio'), h("div", { class: "right" }, h("dyte-icon", { icon: this.iconPack.mic_on }), this.size === 'sm' && h("dyte-icon", { icon: this.iconPack.chevron_right }))), this.canProduceVideo && (h("button", { type: "button", class: { active: this.activeTab === 'video' }, onClick: () => this.changeTab('video') }, this.t('video'), h("div", { class: "right" }, h("dyte-icon", { icon: this.iconPack.video_on }), this.size === 'sm' && h("dyte-icon", { icon: this.iconPack.chevron_right })))), h("button", { type: "none", title: `Your network condition is ${this.networkStatus}` }, this.t('connection'), h("div", { class: "right" }, h("dyte-icon", { icon: this.iconPack.wifi, class: this.networkStatus })))), h("main", { class: { active: this.isMobileMainVisible, scrollbar: true }, part: "main-content" }, this.size === 'sm' && (h("header", null, h("dyte-button", { kind: "icon", class: "back-btn", onClick: () => (this.isMobileMainVisible = false) }, h("dyte-icon", { icon: this.iconPack.chevron_left })), h("h2", null, this.t(this.activeTab === 'audio' ? 'audio' : 'video')))), this.activeTab === 'audio' && h("dyte-settings-audio", Object.assign({}, defaults)), this.activeTab === 'video' && h("dyte-settings-video", Object.assign({}, defaults)))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteSettingsStyle0; }
}, [1, "dyte-settings", {
        "meeting": [16],
        "states": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "activeTab": [32],
        "isMobileMainVisible": [32],
        "networkStatus": [32],
        "canProduceVideo": [32]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteSettings.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteSettings.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteSettings.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteSettings.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteSettings.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-settings", "dyte-audio-visualizer", "dyte-button", "dyte-camera-selector", "dyte-icon", "dyte-microphone-selector", "dyte-participant-tile", "dyte-settings-audio", "dyte-settings-video", "dyte-speaker-selector", "dyte-switch"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-settings":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteSettings);
            }
            break;
        case "dyte-audio-visualizer":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "dyte-camera-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "dyte-microphone-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "dyte-participant-tile":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-settings-audio":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-settings-video":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-speaker-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-switch":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteSettings as D, defineCustomElement as d };
