import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage, F as FlagsmithFeatureFlags } from './p-dce5d30e.js';
import './p-e497ad6d.js';
import { R as Render } from './p-52218cb0.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$1 } from './p-a443344b.js';

const dyteParticipantTileCss = ":host {\n  line-height: initial;\n  font-family: var(--dyte-font-family, sans-serif);\n\n  font-feature-settings: normal;\n  font-variation-settings: normal;\n}\n\np {\n  margin: var(--dyte-space-0, 0px);\n  padding: var(--dyte-space-0, 0px);\n}\n\n\n:host {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  aspect-ratio: 16 / 9;\n  height: var(--dyte-space-56, 224px);\n  overflow: hidden;\n  border-radius: var(--dyte-border-radius-lg, 12px);\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-video-bg, 24 24 24) / var(--tw-bg-opacity));\n\n  transition-property: var(--dyte-transition-property, all);\n  transition-duration: 150ms;\n  container-type: inline-size;\n  container-name: participanttile;\n}\n\n@media (prefers-reduced-motion) {\n  /* No transitions when disabled */\n  :host {\n    --dyte-transition-property: none;\n  }\n}\n\ndyte-avatar {\n  z-index: -1;\n}\n\n/**\n  NOTE: provided :slotted(dyte-name-tag) & dyte-name-tag separately\n  because ::slotted isn't applied on default slots.\n*/\n\n::slotted(dyte-name-tag), \ndyte-name-tag {\n  position: absolute;\n  left: var(--dyte-space-3, 12px);\n  bottom: var(--dyte-space-3, 12px);\n}\n\n:host([size='sm'][variant='solid']) ::slotted(dyte-name-tag), \n  :host([size='sm'][variant='solid']) dyte-name-tag {\n  left: var(--dyte-space-2, 8px);\n  bottom: var(--dyte-space-2, 8px);\n  height: var(--dyte-space-4, 16px);\n}\n\n::slotted(dyte-network-indicator), \ndyte-network-indicator {\n  position: absolute;\n  right: var(--dyte-space-3, 12px);\n  bottom: var(--dyte-space-3, 12px);\n}\n\n:host([size='sm']) ::slotted(dyte-network-indicator), \n  :host([size='sm']) dyte-network-indicator {\n  right: var(--dyte-space-2, 8px);\n  bottom: var(--dyte-space-2, 8px);\n}\n\nvideo {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  border-radius: var(--dyte-border-radius-lg, 12px);\n}\n\nvideo.contain {\n  -o-object-fit: contain;\n     object-fit: contain;\n}\n\nvideo.cover {\n  -o-object-fit: cover;\n     object-fit: cover;\n}\n\nvideo::-webkit-media-controls {\n  display: none !important;\n}\n\n.pinned-icon {\n  position: absolute;\n  left: var(--dyte-space-3, 12px);\n  top: var(--dyte-space-3, 12px);\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  padding: var(--dyte-space-1, 4px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));\n}\n\n.network-container {\n  position: absolute;\n  right: var(--dyte-space-3, 12px);\n  bottom: var(--dyte-space-3, 12px);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: var(--dyte-space-2, 8px);\n  font-size: 12px;\n  border-radius: var(--dyte-border-radius-md, 8px);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));\n}\n.network-icon {\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  --tw-text-opacity: 1;\n  color: rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity));\n}\n\n:host([size='sm']) .pinned-icon {\n  top: var(--dyte-space-2, 8px);\n  left: var(--dyte-space-2, 8px);\n}\n\n:host([variant='gradient']) ::slotted(dyte-audio-visualizer), \n  :host([variant='gradient']) dyte-audio-visualizer {\n  position: absolute;\n  top: var(--dyte-space-2, 8px);\n  right: var(--dyte-space-2, 8px);\n  border-radius: 9999px;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));\n  padding: var(--dyte-space-2, 8px);\n}\n\n:host([variant='gradient']) ::slotted(dyte-name-tag), \n  :host([variant='gradient']) dyte-name-tag {\n  bottom: var(--dyte-space-0, 0px);\n  left: var(--dyte-space-0, 0px);\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  background-color: transparent;\n  background-image: linear-gradient(to top, var(--tw-gradient-stops));\n  --tw-gradient-from: rgb(var(--dyte-colors-background-1000, 8 8 8));\n  --tw-gradient-to: rgba(var(--dyte-colors-background-1000, 8 8 8) / 0);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n  --tw-gradient-to: transparent;\n}\n\nvideo.mirror {\n  transform: scaleX(-1);\n}\n\n/** Name tag positions */\n\n:host([name-tag-position='bottom-right']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='bottom-right']) dyte-name-tag {\n  left: auto;\n  right: var(--dyte-space-3, 12px);\n}\n\n:host([name-tag-position='bottom-center']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='bottom-center']) dyte-name-tag {\n  left: auto;\n  right: auto;\n}\n\n:host([name-tag-position='top-left']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='top-left']) dyte-name-tag {\n  top: var(--dyte-space-3, 12px);\n  bottom: auto;\n}\n\n:host([name-tag-position='top-right']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='top-right']) dyte-name-tag {\n  top: var(--dyte-space-3, 12px);\n  right: var(--dyte-space-3, 12px);\n  left: auto;\n  bottom: auto;\n}\n\n:host([name-tag-position='top-center']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='top-center']) dyte-name-tag {\n  left: auto;\n  right: auto;\n  bottom: auto;\n  top: var(--dyte-space-3, 12px);\n}\n\n@media only screen and (max-height: 480px) and (orientation: landscape) {\n  :host([size='sm']) {\n    border-radius: var(--dyte-border-radius-sm, 4px);\n  }\n\n  :host([size='sm']) > video {\n    border-radius: var(--dyte-border-radius-sm, 4px);\n  }\n\n  ::slotted(dyte-avatar), \n  dyte-avatar {\n    height: var(--dyte-space-12, 48px);\n    width: var(--dyte-space-12, 48px);\n  }\n    :host([size='sm'][variant='solid']) ::slotted(dyte-name-tag),\n    :host([size='sm'][variant='solid']) dyte-name-tag {\n      transform-origin: -2% 100%;\n      transform: scale(0.6);\n      z-index: 10;\n      left: var(--dyte-space-0, 0px);\n      bottom: var(--dyte-space-0, 0px);\n      border-radius: var(--dyte-border-radius-none, 0);\n    }\n}\n\n@media only screen and (max-width: 480px) and (orientation: portrait) {\n  :host([size='sm']) {\n    border-radius: var(--dyte-border-radius-sm, 4px);\n  }\n\n  :host([size='sm']) > video {\n    border-radius: var(--dyte-border-radius-sm, 4px);\n  }\n\n  ::slotted(dyte-avatar), \n  dyte-avatar {\n    height: var(--dyte-space-12, 48px);\n    width: var(--dyte-space-12, 48px);\n  }\n    :host([size='sm'][variant='solid']) ::slotted(dyte-name-tag),\n    :host([size='sm'][variant='solid']) dyte-name-tag {\n      transform-origin: -5% 110%;\n      transform: scale(0.6);\n      z-index: 10;\n      left: var(--dyte-space-0, 0px);\n      bottom: var(--dyte-space-0, 0px);\n      border-radius: var(--dyte-border-radius-none, 0);\n    }\n}\n\n@container participanttile (max-width: 300px) {\n  ::slotted(dyte-name-tag),\n  dyte-name-tag {\n    transform-origin: 0 100%;\n    transform: scale(0.8);\n  }\n\n  ::slotted(dyte-avatar), \n  dyte-avatar {\n    height: var(--dyte-space-8, 32px) !important;\n    width: var(--dyte-space-8, 32px) !important;\n  }\n}\n\n@container participanttile (max-width: 150px) {\n  ::slotted(dyte-name-tag),\n  dyte-name-tag[variant='solid'] {\n    transform-origin: -10% 130%;\n    transform: scale(0.6);\n    z-index: 10;\n    border-radius: 9999px;\n  }\n\n  ::slotted(dyte-avatar), \n  dyte-avatar {\n    height: 6 !important;\n    width: 6 !important;\n  }\n}\n";
const DyteParticipantTileStyle0 = dyteParticipantTileCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipantTile = /*@__PURE__*/ proxyCustomElement(class DyteParticipantTile extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.tileLoad = createEvent(this, "tileLoad", 7);
        this.tileUnload = createEvent(this, "tileUnload", 7);
        this.isPinned = false;
        this.mediaConnectionError = false;
        /** Position of name tag */
        this.nameTagPosition = 'bottom-left';
        /** Whether tile is used for preview */
        this.isPreview = false;
        /** Config object */
        this.config = defaultConfig;
        /** Variant */
        this.variant = 'solid';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.onPinned = ({ isPinned }) => {
            this.isPinned = isPinned;
        };
        this.isSelf = () => { var _a; return this.isPreview || this.participant.id === ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.id); };
        this.onPause = (event) => {
            var _a, _b;
            if (this.isSelf() &&
                ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.__internals__.features.hasFeature(FlagsmithFeatureFlags.PLAY_PARTICIPANT_TILE_VIDEO_ON_PAUSE))) {
                this.meeting.__internals__.logger.warn(`Video player paused for ${this.participant.id} isSelf: ${this.isSelf()}`);
                // @ts-ignore
                (_b = event === null || event === void 0 ? void 0 : event.target) === null || _b === void 0 ? void 0 : _b.play();
            }
        };
        this.onPlaying = () => {
            if (this.playTimeout)
                clearTimeout(this.playTimeout);
        };
    }
    onVideoRef(el) {
        if (!this.participant || !this.meeting || el === this.videoEl)
            return;
        this.videoEl = el;
        this.participant.registerVideoElement(this.videoEl, this.isPreview);
        this.tileLoad.emit({ participant: this.participant, videoElement: this.videoEl });
    }
    connectedCallback() {
        // set videoState before initial render and initialize listeners
        if (this.meeting)
            this.meetingChanged(this.meeting);
        else
            this.participantsChanged(this.participant);
    }
    disconnectedCallback() {
        if (this.playTimeout)
            clearTimeout(this.playTimeout);
        if (this.participant == null)
            return;
        this.participant.deregisterVideoElement(this.videoEl, this.isPreview);
        this.participant.removeListener('pinned', this.onPinned);
        this.participant.removeListener('unpinned', this.onPinned);
        this.meeting.meta.off('mediaConnectionUpdate', this.mediaConnectionUpdateListener);
        this.tileUnload.emit(this.participant);
    }
    meetingChanged(meeting) {
        if (meeting == undefined)
            return;
        this.participantsChanged(this.participant);
    }
    participantsChanged(participant) {
        if (participant == undefined)
            return;
        if (this.meeting === undefined) {
            if (this.isPreview) {
                this.videoEl && this.participant.registerVideoElement(this.videoEl, this.isPreview);
            }
            return;
        }
        this.isPinned = participant.isPinned;
        this.videoEl && this.participant.registerVideoElement(this.videoEl, this.isPreview);
        participant.addListener('pinned', this.onPinned);
        participant.addListener('unpinned', this.onPinned);
        this.meeting.meta.on('mediaConnectionUpdate', this.mediaConnectionUpdateListener.bind(this));
    }
    mediaConnectionUpdateListener() {
        var _a, _b, _c;
        const { recv: consuming, send: producing } = (_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.mediaState) !== null && _c !== void 0 ? _c : {};
        if ((consuming === null || consuming === void 0 ? void 0 : consuming.state) !== 'connected' && !this.isSelf()) {
            this.mediaConnectionError = true;
        }
        else if ((producing === null || producing === void 0 ? void 0 : producing.state) !== 'connected' && this.isSelf()) {
            this.mediaConnectionError = true;
        }
        else
            this.mediaConnectionError = false;
    }
    isMirrored() {
        var _a;
        if (this.participant != null) {
            if (this.isSelf()) {
                const states = this.states;
                const mirrorVideo = (_a = states === null || states === void 0 ? void 0 : states.prefs) === null || _a === void 0 ? void 0 : _a.mirrorVideo;
                if (typeof mirrorVideo === 'boolean') {
                    return mirrorVideo;
                }
            }
        }
        return false;
    }
    render() {
        var _a, _b, _c;
        const defaults = {
            meeting: this.meeting,
            size: this.size,
            states: this.states,
            config: this.config,
            iconPack: this.iconPack,
            t: this.t,
        };
        return (h(Host, { key: 'ae0d125a5d4b2bd7cab5c4c286be3fd31d9b6b80' }, h("video", { key: '46c326caaf26377c1a7e6ba2989eabbc89a3d4aa', ref: (el) => this.onVideoRef(el), class: {
                mirror: this.isMirrored(),
                [(_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.videoFit) !== null && _c !== void 0 ? _c : 'cover']: true,
            }, onPlaying: this.onPlaying, onPause: this.onPause, autoPlay: true, playsInline: true, muted: true, part: "video" }), this.isPinned && (h("dyte-icon", { key: '8a3e9d03d2c69b9a281d6633a87f519cd36f8caf', class: "pinned-icon", icon: this.iconPack.pin, "aria-label": this.t('pinned'), part: "pinned-icon" })), this.mediaConnectionError && (h("div", { key: 'b501ff04fcbe6c283b71c5bfa226cdc2b0127c6e', class: "network-container", part: "network-indicator" }, h("dyte-icon", { key: 'a200fd6ee5973cacd387ea38af916ac8d71355b5', class: "network-icon", icon: this.iconPack.disconnected, "aria-label": this.t('pinned'), part: "pinned-icon" }))), h("slot", { key: '03c182c48452d89f381eecea6895a98f865a1b2f' }, h(Render, { key: '459ff30c21c410a4cd7eea256d203fca6bf9d4bd', element: "dyte-participant-tile", defaults: defaults, childProps: {
                participant: this.participant,
            }, deepProps: true, onlyChildren: true }))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "participant": ["participantsChanged"]
    }; }
    static get style() { return DyteParticipantTileStyle0; }
}, [1, "dyte-participant-tile", {
        "nameTagPosition": [513, "name-tag-position"],
        "isPreview": [4, "is-preview"],
        "participant": [16],
        "meeting": [16],
        "states": [16],
        "config": [16],
        "variant": [513],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "isPinned": [32],
        "mediaConnectionError": [32]
    }, undefined, {
        "meeting": ["meetingChanged"],
        "participant": ["participantsChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteParticipantTile.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantTile.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantTile.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantTile.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantTile.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-participant-tile", "dyte-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-participant-tile":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteParticipantTile);
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteParticipantTile as D, defineCustomElement as d };
