import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$x } from './p-3322a930.js';
import { d as defineCustomElement$w } from './p-b503759c.js';
import { d as defineCustomElement$v } from './p-a9bd9d4b.js';
import { d as defineCustomElement$u } from './p-0ac95ccf.js';
import { d as defineCustomElement$t } from './p-867da383.js';
import { d as defineCustomElement$s } from './p-951917ce.js';
import { d as defineCustomElement$r } from './p-e7892c80.js';
import { d as defineCustomElement$q } from './p-20f63782.js';
import { d as defineCustomElement$p } from './p-3bf5adeb.js';
import { d as defineCustomElement$o } from './p-5049e1df.js';
import { d as defineCustomElement$n } from './p-a01c5f12.js';
import { d as defineCustomElement$m } from './p-90b26474.js';
import { d as defineCustomElement$l } from './p-7f827ea4.js';
import { d as defineCustomElement$k } from './p-6d531b8e.js';
import { d as defineCustomElement$j } from './p-4cad30d8.js';
import { d as defineCustomElement$i } from './p-52a3a26c.js';
import { d as defineCustomElement$h } from './p-659ba053.js';
import { d as defineCustomElement$g } from './p-a443344b.js';
import { d as defineCustomElement$f } from './p-ae10f779.js';
import { d as defineCustomElement$e } from './p-6d3979dc.js';
import { d as defineCustomElement$d } from './p-8b1a680a.js';
import { d as defineCustomElement$c } from './p-6bcc2f81.js';
import { d as defineCustomElement$b } from './p-2eccc6c6.js';
import { d as defineCustomElement$a } from './p-0eaa23c6.js';
import { d as defineCustomElement$9 } from './p-f40c832e.js';
import { d as defineCustomElement$8 } from './p-3ca9314d.js';
import { d as defineCustomElement$7 } from './p-996ce7a8.js';
import { d as defineCustomElement$6 } from './p-7777c347.js';
import { d as defineCustomElement$5 } from './p-d0534546.js';
import { d as defineCustomElement$4 } from './p-336b8c58.js';
import { d as defineCustomElement$3 } from './p-cba97631.js';
import { d as defineCustomElement$2 } from './p-9548192b.js';
import { d as defineCustomElement$1 } from './p-b4f8107f.js';

const dyteDialogManagerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";
const DyteDialogManagerStyle0 = dyteDialogManagerCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDialogManager = /*@__PURE__*/ proxyCustomElement(class DyteDialogManager extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** UI Config */
        this.config = defaultConfig;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.updateStoreState = (state, value) => {
            this.stateUpdate.emit({ [state]: value });
        };
        this.cancelJoinStage = async () => {
            var _a, _b, _c;
            if (((_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.status) === 'ACCEPTED_TO_JOIN_STAGE') {
                await ((_c = (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.stage) === null || _c === void 0 ? void 0 : _c.leave());
            }
            this.updateStoreState('activeJoinStage', false);
        };
        this.joinStage = async () => {
            await this.meeting.stage.join();
            /** NOTE(ishita1805): We close the modal once the status has changed */
        };
        this.stageStatusUpdateListener = (status) => {
            var _a;
            if (!((_a = this.states) === null || _a === void 0 ? void 0 : _a.activeJoinStage))
                return;
            if (status === 'ON_STAGE')
                this.updateStoreState('activeJoinStage', false);
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a;
        (_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.removeListener('stageStatusUpdate', this.stageStatusUpdateListener);
    }
    meetingChanged(meeting) {
        if (meeting == undefined)
            return;
        const { stage } = meeting;
        stage === null || stage === void 0 ? void 0 : stage.addListener('stageStatusUpdate', this.stageStatusUpdateListener);
    }
    render() {
        var _a, _b, _c, _d;
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            config: this.config,
            size: this.size,
            iconPack: this.iconPack,
            t: this.t,
        };
        const states = this.states;
        if ((states === null || states === void 0 ? void 0 : states.image) != null) {
            const image = states.image;
            const onImageClose = () => {
                this.stateUpdate.emit({ image: null });
            };
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: onImageClose, hideCloseButton: true, iconPack: this.iconPack, t: this.t }, h("dyte-image-viewer", Object.assign({}, defaults, { image: image, onClose: onImageClose })))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeSettings) === true) {
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeSettings', false), iconPack: this.iconPack, t: this.t }, h("dyte-settings", Object.assign({}, defaults)))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeDebugger) === true) {
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeDebugger', false), iconPack: this.iconPack, t: this.t }, h("dyte-debugger", Object.assign({}, defaults)))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeLeaveConfirmation) === true) {
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeLeaveConfirmation', false), iconPack: this.iconPack, t: this.t }, h("dyte-leave-meeting", Object.assign({}, defaults)))));
        }
        else if (((_a = states === null || states === void 0 ? void 0 : states.activePermissionsMessage) === null || _a === void 0 ? void 0 : _a.enabled) === true) {
            return (h(Host, null, h("dyte-dialog", { open: true, hideCloseButton: true, iconPack: this.iconPack, t: this.t }, h("dyte-permissions-message", Object.assign({}, defaults)))));
        }
        else if (((_b = states === null || states === void 0 ? void 0 : states.activeBreakoutRoomsManager) === null || _b === void 0 ? void 0 : _b.active) === true) {
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeBreakoutRoomsManager', {
                    active: false,
                    data: undefined,
                }), iconPack: this.iconPack, t: this.t }, h("dyte-breakout-rooms-manager", Object.assign({}, defaults)))));
        }
        else if (((_c = states === null || states === void 0 ? void 0 : states.activeConfirmationModal) === null || _c === void 0 ? void 0 : _c.active) === true) {
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeConfirmationModal', false), iconPack: this.iconPack, t: this.t }, h("dyte-confirmation-modal", Object.assign({}, defaults)))));
        }
        else if (((_d = states === null || states === void 0 ? void 0 : states.activeOverlayModal) === null || _d === void 0 ? void 0 : _d.active) === true) {
            return (h(Host, null, h("dyte-overlay-modal", { meeting: this.meeting, states: this.states, iconPack: this.iconPack, t: this.t })));
        }
        else if (states === null || states === void 0 ? void 0 : states.activeBroadcastMessageModal) {
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeBroadcastMessageModal', false), iconPack: this.iconPack, t: this.t }, h("dyte-broadcast-message-modal", Object.assign({}, defaults)))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeJoinStage) === true) {
            const dataState = {
                title: this.t('stage.join_title'),
                label: {
                    accept: this.t('stage.join_confirm'),
                    reject: this.t('stage.join_cancel'),
                },
                description: this.t('stage.join_summary'),
            };
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: this.cancelJoinStage, iconPack: this.iconPack, t: this.t }, h("dyte-join-stage", Object.assign({ dataConfig: dataState, onDyteJoinStage: this.joinStage, onDyteLeaveStage: this.cancelJoinStage }, defaults)))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeMuteAllConfirmation) === true) {
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => {
                    this.updateStoreState('activeMuteAllConfirmation', false);
                }, iconPack: this.iconPack, t: this.t }, h("dyte-mute-all-confirmation", Object.assign({}, defaults)))));
        }
        else if (states === null || states === void 0 ? void 0 : states.activeChannelCreator) {
            return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => {
                    this.updateStoreState('activeChannelCreator', false);
                }, iconPack: this.iconPack, t: this.t }, h("dyte-channel-creator", Object.assign({}, defaults)))));
        }
        return null;
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteDialogManagerStyle0; }
}, [1, "dyte-dialog-manager", {
        "meeting": [16],
        "config": [16],
        "states": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteDialogManager.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteDialogManager.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteDialogManager.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteDialogManager.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteDialogManager.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-dialog-manager", "dyte-audio-visualizer", "dyte-avatar", "dyte-breakout-room-manager", "dyte-breakout-room-participants", "dyte-breakout-rooms-manager", "dyte-broadcast-message-modal", "dyte-button", "dyte-camera-selector", "dyte-channel-creator", "dyte-confirmation-modal", "dyte-counter", "dyte-debugger", "dyte-debugger-audio", "dyte-debugger-screenshare", "dyte-debugger-system", "dyte-debugger-video", "dyte-dialog", "dyte-icon", "dyte-image-viewer", "dyte-join-stage", "dyte-leave-meeting", "dyte-microphone-selector", "dyte-mute-all-confirmation", "dyte-overlay-modal", "dyte-participant-tile", "dyte-permissions-message", "dyte-settings", "dyte-settings-audio", "dyte-settings-video", "dyte-speaker-selector", "dyte-spinner", "dyte-switch", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-dialog-manager":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteDialogManager);
            }
            break;
        case "dyte-audio-visualizer":
            if (!customElements.get(tagName)) {
                defineCustomElement$x();
            }
            break;
        case "dyte-avatar":
            if (!customElements.get(tagName)) {
                defineCustomElement$w();
            }
            break;
        case "dyte-breakout-room-manager":
            if (!customElements.get(tagName)) {
                defineCustomElement$v();
            }
            break;
        case "dyte-breakout-room-participants":
            if (!customElements.get(tagName)) {
                defineCustomElement$u();
            }
            break;
        case "dyte-breakout-rooms-manager":
            if (!customElements.get(tagName)) {
                defineCustomElement$t();
            }
            break;
        case "dyte-broadcast-message-modal":
            if (!customElements.get(tagName)) {
                defineCustomElement$s();
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$r();
            }
            break;
        case "dyte-camera-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$q();
            }
            break;
        case "dyte-channel-creator":
            if (!customElements.get(tagName)) {
                defineCustomElement$p();
            }
            break;
        case "dyte-confirmation-modal":
            if (!customElements.get(tagName)) {
                defineCustomElement$o();
            }
            break;
        case "dyte-counter":
            if (!customElements.get(tagName)) {
                defineCustomElement$n();
            }
            break;
        case "dyte-debugger":
            if (!customElements.get(tagName)) {
                defineCustomElement$m();
            }
            break;
        case "dyte-debugger-audio":
            if (!customElements.get(tagName)) {
                defineCustomElement$l();
            }
            break;
        case "dyte-debugger-screenshare":
            if (!customElements.get(tagName)) {
                defineCustomElement$k();
            }
            break;
        case "dyte-debugger-system":
            if (!customElements.get(tagName)) {
                defineCustomElement$j();
            }
            break;
        case "dyte-debugger-video":
            if (!customElements.get(tagName)) {
                defineCustomElement$i();
            }
            break;
        case "dyte-dialog":
            if (!customElements.get(tagName)) {
                defineCustomElement$h();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$g();
            }
            break;
        case "dyte-image-viewer":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "dyte-join-stage":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "dyte-leave-meeting":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "dyte-microphone-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "dyte-mute-all-confirmation":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "dyte-overlay-modal":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "dyte-participant-tile":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "dyte-permissions-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "dyte-settings":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "dyte-settings-audio":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "dyte-settings-video":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-speaker-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-switch":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteDialogManager as D, defineCustomElement as d };
