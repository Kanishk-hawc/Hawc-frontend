import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import './p-e497ad6d.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$f } from './p-b503759c.js';
import { d as defineCustomElement$e } from './p-e7892c80.js';
import { d as defineCustomElement$d } from './p-a443344b.js';
import { d as defineCustomElement$c } from './p-9ae9dd32.js';
import { d as defineCustomElement$b } from './p-3a600290.js';
import { d as defineCustomElement$a } from './p-302cb8fb.js';
import { d as defineCustomElement$9 } from './p-999e6b44.js';
import { d as defineCustomElement$8 } from './p-b682daa9.js';
import { d as defineCustomElement$7 } from './p-fbf9693d.js';
import { d as defineCustomElement$6 } from './p-e4cd156e.js';
import { d as defineCustomElement$5 } from './p-1b08344d.js';
import { d as defineCustomElement$4 } from './p-cba97631.js';
import { d as defineCustomElement$3 } from './p-b4f8107f.js';
import { d as defineCustomElement$2 } from './p-67b40782.js';
import { d as debounce } from './p-a08b5a59.js';

const dyteParticipantsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{display:flex;height:100%;width:100%;flex-direction:column;font-size:14px}*{box-sizing:border-box}.ctr{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);box-sizing:border-box;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-0, 0px);padding-bottom:var(--dyte-space-0, 0px);overflow-y:auto;flex-grow:1;flex-basis:0}.ctr.virtualised{overflow-y:hidden}.search{position:sticky;box-sizing:border-box;display:flex;align-items:center;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));margin-left:var(--dyte-space-3, 12px);margin-right:var(--dyte-space-3, 12px);margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0, 0px)}.search dyte-icon{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.search input{box-sizing:border-box;height:var(--dyte-space-9, 36px);width:100%;padding-right:var(--dyte-space-2, 8px);border-width:var(--dyte-border-width-none, 0);border-style:none;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));outline:2px solid transparent;outline-offset:2px;border-radius:var(--dyte-border-radius-sm, 4px);font-size:14px}.search input::-moz-placeholder{color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.search input::placeholder{color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}:host([size='md']) .search{margin-top:var(--dyte-space-4, 16px) !important;margin-bottom:var(--dyte-space-4, 16px) !important}:host([size='sm']) .search{margin-top:var(--dyte-space-4, 16px) !important;margin-bottom:var(--dyte-space-4, 16px) !important}.no-pending-requests{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);text-align:center;font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}";
const DyteParticipantsStyle0 = dyteParticipantsCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipants$1 = /*@__PURE__*/ proxyCustomElement(class DyteParticipants extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Config */
        this.config = defaultConfig;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Default section */
        this.defaultParticipantsTabId = 'stage-list';
        /** Language */
        this.t = useLanguage();
        this.currentParticipantsTabId = this.defaultParticipantsTabId;
        this.tabs = [];
        this.hasRequests = false;
        this.search = '';
        this.updateParticipantCountsInTabs = debounce(() => {
            var _a;
            // totalRequests consist of stage requests & waitlisted ones
            let totalRequests = ((_a = this.meeting.participants.waitlisted) === null || _a === void 0 ? void 0 : _a.size) || 0;
            let totalOnStage = 0;
            let totalViewers = 0;
            this.meeting.participants.joined.toArray().forEach((participant) => {
                if (participant.stageStatus === 'ON_STAGE') {
                    totalOnStage++;
                }
                if (participant.stageStatus === 'OFF_STAGE') {
                    totalViewers++;
                }
                if (participant.stageStatus === 'REQUESTED_TO_JOIN_STAGE') {
                    totalRequests++;
                    totalViewers++;
                }
                if (participant.stageStatus === 'ACCEPTED_TO_JOIN_STAGE') {
                    totalViewers++;
                }
            });
            if (this.meeting.self.stageStatus === 'ON_STAGE') {
                totalOnStage++;
            }
            if (this.meeting.self.stageStatus === 'OFF_STAGE') {
                totalViewers++;
            }
            if (this.meeting.self.stageStatus === 'REQUESTED_TO_JOIN_STAGE') {
                totalRequests++;
                totalViewers++;
            }
            if (this.meeting.self.stageStatus === 'ACCEPTED_TO_JOIN_STAGE') {
                totalViewers++;
            }
            const tabs = [];
            if (this.shouldShowRequestsTab()) {
                tabs.push({
                    id: 'requests',
                    name: (h("span", null, this.t('requests'), "\u00A0", h("span", { class: `tab-participant-count-badge ${totalRequests > 0 ? 'requests-pending' : ''} ${this.currentParticipantsTabId === 'requests' ? 'selected-tab' : ''}` }, totalRequests))),
                });
            }
            tabs.push({
                id: 'stage-list',
                name: (h("span", null, this.t('participants'), "\u00A0", h("span", { class: `tab-participant-count-badge ${this.currentParticipantsTabId === 'stage-list' ? 'selected-tab' : ''}` }, totalOnStage))),
            });
            if (this.shouldShowViewersTab()) {
                tabs.push({
                    id: 'viewer-list',
                    name: (h("span", null, this.t('viewers'), "\u00A0", h("span", { class: `tab-participant-count-badge ${this.currentParticipantsTabId === 'viewer-list' ? 'selected-tab' : ''}` }, totalViewers))),
                });
            }
            this.tabs = tabs;
            this.hasRequests = totalRequests > 0;
        });
        this.onSearchInput = (e) => {
            this.search = e.target.value;
        };
        this.shouldShowViewersTab = () => {
            var _a, _b, _c;
            return (_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.stageEnabled;
        };
        this.shouldShowRequestsTab = () => {
            var _a;
            let shouldShowWaitlist = false;
            if (this.meeting.meta.viewType === 'LIVESTREAM') {
                shouldShowWaitlist = false;
            }
            else {
                shouldShowWaitlist =
                    ((_a = this.meeting.self.config.waitingRoom) === null || _a === void 0 ? void 0 : _a.isEnabled) &&
                        this.meeting.self.permissions.acceptWaitingRequests;
            }
            return ((this.meeting.self.permissions.stageEnabled &&
                this.meeting.self.permissions.acceptStageRequests) ||
                shouldShowWaitlist);
        };
        this.viewSection = (section) => {
            this.currentParticipantsTabId = section;
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        if (this.meeting == null)
            return;
        this.meeting.participants.joined.off('participantJoined', this.updateParticipantCountsInTabs);
        this.meeting.participants.joined.off('participantsUpdate', this.updateParticipantCountsInTabs);
        this.meeting.participants.joined.off('participantLeft', this.updateParticipantCountsInTabs);
        this.meeting.participants.joined.off('stageStatusUpdate', this.updateParticipantCountsInTabs);
        this.meeting.stage.off('stageStatusUpdate', this.updateParticipantCountsInTabs);
        this.meeting.participants.waitlisted.off('participantJoined', this.updateParticipantCountsInTabs);
        this.meeting.participants.waitlisted.off('participantLeft', this.updateParticipantCountsInTabs);
        this.meeting.participants.waitlisted.off('stageStatusUpdate', this.updateParticipantCountsInTabs);
    }
    meetingChanged(meeting) {
        if (meeting == null)
            return;
        meeting.participants.joined.on('participantJoined', this.updateParticipantCountsInTabs);
        meeting.participants.joined.on('participantsUpdate', this.updateParticipantCountsInTabs);
        meeting.participants.joined.on('participantLeft', this.updateParticipantCountsInTabs);
        meeting.participants.joined.on('stageStatusUpdate', this.updateParticipantCountsInTabs);
        meeting.stage.on('stageStatusUpdate', this.updateParticipantCountsInTabs);
        meeting.participants.waitlisted.on('participantJoined', this.updateParticipantCountsInTabs);
        meeting.participants.waitlisted.on('participantLeft', this.updateParticipantCountsInTabs);
        meeting.participants.waitlisted.on('stageStatusUpdate', this.updateParticipantCountsInTabs);
        this.updateParticipantCountsInTabs();
    }
    currentParticipantsTabIdChanged() {
        this.stateUpdate.emit({
            participantsTabId: this.currentParticipantsTabId,
        });
        this.updateParticipantCountsInTabs();
    }
    render() {
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            config: this.config,
            size: this.size,
            iconPack: this.iconPack,
            t: this.t,
        };
        return (h(Host, { key: '480aec3590cdf484f086f5120938d9e8ac348ca1' }, h("div", { key: '29f7064560ac5a2ad90057aa30960fbbd6f8c7ee', class: "search", part: "search" }, h("dyte-icon", { key: '4abbff7265591d8283d3d092fb070426797ab803', icon: this.iconPack.search, part: "search-icon" }), h("input", { key: '959e79448af2bf197dd1c531da484278eac2693e', type: "search", autocomplete: "off", placeholder: this.t('search'), onInput: this.onSearchInput, part: "search-input" })), h("slot", { key: '6fbfacc270b0e268660ea78dacbe90a516224c43', name: "start" }), h("div", { key: 'e8b7472aee6ed129ceee97abbd89f77c01f7559c', class: `ctr scrollbar ${this.currentParticipantsTabId !== 'requests' ? 'virtualised' : ''}`, part: "container" }, h("dyte-sidebar-ui", { key: '96d95ef917399340c2ba1e6271726dc213aa3b4b', tabs: this.tabs, currentTab: this.currentParticipantsTabId, view: "full-screen", hideHeader: true, hideCloseAction: true, style: { position: 'relative' }, onTabChange: (e) => {
                this.viewSection(e.detail);
                e.stopPropagation();
            } }, (!this.currentParticipantsTabId || this.currentParticipantsTabId === 'stage-list') && (h("div", { key: 'd8bcf02f0f6f1f91fcb91249cc6d367e0942c9a2', slot: "stage-list", style: { marginTop: '10px', height: '100%' } }, h("dyte-participants-stage-list", Object.assign({ key: 'a17c62efa97440dd8da28aedb81f0bde6d494da0' }, defaults, { search: this.search, hideHeader: true })))), this.currentParticipantsTabId === 'requests' && (h("div", { key: '9241d6d585ff4c868d568c2033d3ae8b01c53180', slot: "requests", style: { marginTop: '10px', height: '100%' } }, !this.hasRequests && (h("div", { key: 'e68d9238c16a4dc1c97c3dc40d4620ce048e5fe3', class: "no-pending-requests" }, this.t('participants.no_pending_requests'))), h("dyte-participants-stage-queue", Object.assign({ key: '945ffdc7578dc98d5df3fdba0dcd95e7eef22613' }, defaults)), h("dyte-participants-waiting-list", Object.assign({ key: 'c88bf2ff95796fe0c8859484cb30010f85ab74be' }, defaults)))), this.currentParticipantsTabId === 'viewer-list' && (h("div", { key: '63913220bfdefeaee9f3f544cd22a1192e1f4e32', slot: "viewer-list", style: { marginTop: '10px', height: '100%' } }, h("dyte-participants-viewer-list", Object.assign({ key: 'e37f9024b4dcbb3c809cc94551de13cabea297de' }, defaults, { search: this.search, hideHeader: true })))))), h("slot", { key: 'd69d7d91f239f0f37200279065963ae3bf4054d1', name: "end" })));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "currentParticipantsTabId": ["currentParticipantsTabIdChanged"]
    }; }
    static get style() { return DyteParticipantsStyle0; }
}, [1, "dyte-participants", {
        "meeting": [16],
        "states": [16],
        "config": [16],
        "size": [513],
        "iconPack": [16],
        "defaultParticipantsTabId": [1, "default-participants-tab-id"],
        "t": [16],
        "currentParticipantsTabId": [32],
        "tabs": [32],
        "hasRequests": [32],
        "search": [32]
    }, undefined, {
        "meeting": ["meetingChanged"],
        "currentParticipantsTabId": ["currentParticipantsTabIdChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteParticipants$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteParticipants$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteParticipants$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteParticipants$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteParticipants$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-participants", "dyte-avatar", "dyte-button", "dyte-icon", "dyte-menu-item", "dyte-menu-list", "dyte-participant", "dyte-participants-stage-list", "dyte-participants-stage-queue", "dyte-participants-viewer-list", "dyte-participants-waiting-list", "dyte-sidebar-ui", "dyte-spinner", "dyte-tooltip", "dyte-virtualized-participant-list"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-participants":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteParticipants$1);
            }
            break;
        case "dyte-avatar":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "dyte-menu-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "dyte-menu-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "dyte-participant":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "dyte-participants-stage-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "dyte-participants-stage-queue":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "dyte-participants-viewer-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "dyte-participants-waiting-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "dyte-sidebar-ui":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-virtualized-participant-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteParticipants = DyteParticipants$1;
const defineCustomElement = defineCustomElement$1;

export { DyteParticipants, defineCustomElement };
