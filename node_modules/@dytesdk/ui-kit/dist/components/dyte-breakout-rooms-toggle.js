import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage, k as canToggleBreakout } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$4 } from './p-9e83e8fe.js';
import { d as defineCustomElement$3 } from './p-a443344b.js';
import { d as defineCustomElement$2 } from './p-cba97631.js';

const dyteBreakoutRoomsToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";
const DyteBreakoutRoomsToggleStyle0 = dyteBreakoutRoomsToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteBreakoutRoomsToggle$1 = /*@__PURE__*/ proxyCustomElement(class DyteBreakoutRoomsToggle extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Variant */
        this.variant = 'button';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.canToggle = false;
        this.permissionsUpdateListener = () => {
            this.canToggle = canToggleBreakout(this.meeting);
        };
        this.breakoutRoomToggle = () => {
            var _a, _b;
            const mode = this.meeting.connectedMeetings.isActive ? 'view' : 'create';
            this.stateUpdate.emit({
                activeBreakoutRoomsManager: {
                    active: !((_b = (_a = this.states) === null || _a === void 0 ? void 0 : _a.activeBreakoutRoomsManager) === null || _b === void 0 ? void 0 : _b.active),
                    mode,
                },
            });
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a, _b, _c;
        (_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.off('permissionsUpdate', this.permissionsUpdateListener);
    }
    meetingChanged(meeting) {
        if (!meeting)
            return;
        this.canToggle = canToggleBreakout(meeting);
        meeting.self.permissions.on('permissionsUpdate', this.permissionsUpdateListener);
    }
    render() {
        if (!this.canToggle)
            return;
        return (h(Host, { title: this.t('breakout_rooms') }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, onClick: this.breakoutRoomToggle, icon: this.iconPack.breakout_rooms, label: this.t('breakout_rooms'), variant: this.variant })));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteBreakoutRoomsToggleStyle0; }
}, [1, "dyte-breakout-rooms-toggle", {
        "variant": [513],
        "meeting": [16],
        "states": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "canToggle": [32]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteBreakoutRoomsToggle$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteBreakoutRoomsToggle$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteBreakoutRoomsToggle$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteBreakoutRoomsToggle$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteBreakoutRoomsToggle$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-breakout-rooms-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-breakout-rooms-toggle":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteBreakoutRoomsToggle$1);
            }
            break;
        case "dyte-controlbar-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteBreakoutRoomsToggle = DyteBreakoutRoomsToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteBreakoutRoomsToggle, defineCustomElement };
