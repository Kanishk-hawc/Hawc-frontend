import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { C as ChatHead } from './p-3727005d.js';
import { a as sanitizeLink } from './p-338c7261.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { d as downloadFile } from './p-9fc565cf.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$3 } from './p-e7892c80.js';
import { d as defineCustomElement$2 } from './p-a443344b.js';
import { d as defineCustomElement$1 } from './p-cba97631.js';

const dyteImageMessageCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.image-spinner{cursor:wait}.image-errored{cursor:not-allowed}";
const DyteImageMessageStyle0 = dyteImageMessageCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteImageMessage = /*@__PURE__*/ proxyCustomElement(class DyteImageMessage extends H {
    constructor() {
        super();
        this.__registerHost();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Date object of now, to calculate distance between dates */
        this.now = new Date();
        /** Whether the message is continued by same user */
        this.isContinued = false;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** show message in bubble */
        this.showBubble = false;
        this.status = 'loading';
    }
    render() {
        return (h(Host, { key: 'fa9c168429dd5f92a542b7ca092dd4cc805743bd' }, !this.isContinued && (h(ChatHead, { key: 'dfd15b9192fc7198fef6c4b5f2964a83d912e53d', name: this.message.displayName, time: this.message.time, now: this.now })), h("div", { key: 'cefee5d9928f506c9ff758c858cc53c12827ff35', class: {
                body: true,
                bubble: this.showBubble,
            }, part: "body" }, h("div", { key: '643e1d4703eac657c73467d0791307fba8aedcd8', class: { image: true, loaded: this.status === 'loaded' } }, h("img", { key: '4453724021e1f2c83221cde8aebff82aceaf2e16', src: sanitizeLink(this.message.link), onLoad: () => {
                this.status = 'loaded';
            }, onError: () => {
                this.status = 'errored';
            }, onClick: () => {
                if (this.status === 'loaded') {
                    this.stateUpdate.emit({ image: this.message });
                }
            } }), this.status === 'loading' && (h("div", { key: 'ee3cf0052083e8468c9aed66fb8716e541424c5a', class: "image-spinner", title: this.t('chat.img.loading'), "aria-label": this.t('chat.img.loading') }, h("dyte-spinner", { key: 'a1e1563ab6269ce75dc319c6896d609b45fbd76e', iconPack: this.iconPack }))), this.status === 'errored' && (h("div", { key: '9a17301d149d6aa957408592ba5ea004f204c638', class: "image-errored", title: this.t('chat.error.img_not_found'), "aria-label": this.t('chat.error.img_not_found') }, h("dyte-icon", { key: 'ee5672f1c3708329f9d6a299c8186d9383b6c963', icon: this.iconPack.image_off }))), this.status === 'loaded' && (h("div", { key: '6b15f2e58846b2d3bbdb706c939d6c0e174ef45b', class: "actions" }, h("dyte-button", { key: 'b4c0904c8b31f2e8e0fed72d8147e106827ca8b8', class: "action", variant: "secondary", kind: "icon", onClick: () => {
                this.stateUpdate.emit({ image: this.message });
            } }, h("dyte-icon", { key: '4745d25ee35fe6ce31f7cf037a6e6b6da07c7047', icon: this.iconPack.full_screen_maximize })), h("dyte-button", { key: '51d687441df970faf55c745bdbb39186188e2da0', class: "action", variant: "secondary", kind: "icon", onClick: () => downloadFile(this.message.link, { fallbackName: 'image' }) }, h("dyte-icon", { key: 'cd488683796615bc0dd3c622338bf5949c0af89e', icon: this.iconPack.download }))))))));
    }
    static get style() { return DyteImageMessageStyle0; }
}, [0, "dyte-image-message", {
        "message": [16],
        "now": [16],
        "isContinued": [516, "is-continued"],
        "iconPack": [16],
        "t": [16],
        "showBubble": [4, "show-bubble"],
        "status": [32]
    }]);
__decorate([
    SyncWithStore()
], DyteImageMessage.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteImageMessage.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-image-message", "dyte-button", "dyte-icon", "dyte-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-image-message":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteImageMessage);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteImageMessage as D, defineCustomElement as d };
