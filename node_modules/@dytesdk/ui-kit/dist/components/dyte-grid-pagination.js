import { p as proxyCustomElement, H, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as debounce_1 } from './p-cbdd7a99.js';
import { d as defineCustomElement$4 } from './p-e7892c80.js';
import { d as defineCustomElement$3 } from './p-a443344b.js';
import { d as defineCustomElement$2 } from './p-b4f8107f.js';

const dyteGridPaginationCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);display:flex;-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center;font-size:16px}:host([size='sm']){margin-left:var(--dyte-space-1, 4px);margin-right:var(--dyte-space-1, 4px);font-size:12px}:host([size='sm']) .center{margin-left:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0, 0px)}:host([size='sm']) dyte-button{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px)}:host([size='sm']) dyte-button dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}dyte-button{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.center{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.center .page{color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.center .slash{margin-left:var(--dyte-space-0\\.5, 2px);margin-right:var(--dyte-space-0\\.5, 2px)}.center .pages{align-self:flex-end;font-size:12px}:host([variant='rounded']){overflow:hidden;border-radius:9999px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}:host([variant='rounded']) dyte-button{border-radius:9999px;border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}:host([variant='rounded']) dyte-button:not([disabled]):hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}:host([variant='rounded']) dyte-button:not([disabled]):focus{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}:host([variant='grid']){margin-left:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0, 0px)}:host([variant='grid']) dyte-button{position:absolute;top:50%;height:var(--dyte-space-20, 80px);width:var(--dyte-space-20, 80px);opacity:0.2;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}:host([variant='grid']) dyte-button:hover{opacity:1}:host([variant='grid']) dyte-button{transform:translateY(-50%)}:host([variant='grid']) dyte-button.prev{left:var(--dyte-space-0, 0px);border-top-right-radius:9999px;border-bottom-right-radius:9999px}:host([variant='grid']) dyte-button.next{right:var(--dyte-space-0, 0px);border-top-left-radius:9999px;border-bottom-left-radius:9999px}:host([variant='grid']) dyte-button.auto{left:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);border-top-right-radius:9999px;border-bottom-right-radius:9999px}:host([variant='grid']) .dots{position:absolute;left:50%;bottom:var(--dyte-space-3, 12px);display:flex;align-items:center;transform:translateX(-50%)}:host([variant='grid']) .dots .dot{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-2, 8px);width:var(--dyte-space-2, 8px);cursor:pointer;border-radius:9999px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}:host([variant='grid']) .dots .dot:last-child{margin-right:var(--dyte-space-0, 0px)}:host([variant='grid']) .dots .dot.active{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}:host([variant='grid'][size='sm']) dyte-button{height:var(--dyte-space-14, 56px);width:var(--dyte-space-14, 56px);opacity:0.1}";
const DyteGridPaginationStyle0 = dyteGridPaginationCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const MASS_ACTIONS_DEBOUNCE_TIMER = 50; // In ms
const DyteGridPagination$1 = /*@__PURE__*/ proxyCustomElement(class DyteGridPagination extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /** Variant */
        this.variant = 'rounded';
        /** Icon Pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.page = 1;
        this.pageCount = 0;
        this.activeCount = 0;
        this.activeComputedCount = 0;
        this.showPagination = false;
        this.onPageChanged = ({ currentPage, pageCount, }) => {
            this.pageCount = pageCount;
            this.page = currentPage;
        };
        this.toggleGridPagination = debounce_1(() => {
            var _a;
            const { self, participants } = this.meeting;
            const { mobile, desktop } = (_a = self.config) === null || _a === void 0 ? void 0 : _a.maxVideoStreams;
            const maxCount = this.size === 'sm' ? mobile : desktop;
            const stagePeopleCount = participants.joined
                .toArray()
                .filter((p) => p.stageStatus === 'ON_STAGE').length;
            if (stagePeopleCount < maxCount) {
                this.showPagination = false;
            }
            else {
                this.showPagination = true;
            }
        }, MASS_ACTIONS_DEBOUNCE_TIMER);
        this.onParticipantJoin = debounce_1(() => {
            this.pageCount = this.meeting.participants.pageCount;
            this.toggleGridPagination();
        }, MASS_ACTIONS_DEBOUNCE_TIMER);
        this.onParticipantLeave = debounce_1(() => {
            this.pageCount = this.meeting.participants.pageCount;
            this.toggleGridPagination();
        }, MASS_ACTIONS_DEBOUNCE_TIMER);
        this.onStateStatusUpdate = debounce_1(() => {
            this.pageCount = this.meeting.participants.pageCount;
            this.toggleGridPagination();
        }, MASS_ACTIONS_DEBOUNCE_TIMER);
        this.prevPage = () => {
            if (this.meeting == null)
                return;
            const { participants } = this.meeting;
            if (this.page > 1) {
                participants.setPage((this.page -= 1));
            }
            else if (participants.viewMode === 'PAGINATED') {
                participants.setViewMode('ACTIVE_GRID');
            }
        };
        this.nextPage = () => {
            if (this.meeting == null)
                return;
            const { participants } = this.meeting;
            if (this.page > 0 && this.page < this.pageCount) {
                participants.setPage((this.page += 1));
            }
            else if (participants.count > 0 && this.pageCount === 0) {
                participants.setViewMode('PAGINATED');
            }
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
        this.sizeChanged();
    }
    disconnectedCallback() {
        if (this.meeting == null)
            return;
        const { participants, stage } = this.meeting;
        participants.removeListener('pageChanged', this.onPageChanged);
        participants.removeListener('viewModeChanged', this.onPageChanged);
        participants.joined.removeListener('participantJoined', this.onParticipantJoin);
        participants.joined.removeListener('participantLeft', this.onParticipantLeave);
        participants.joined.removeListener('stageStatusUpdate', this.onStateStatusUpdate);
        stage.removeListener('stageStatusUpdate', this.onStateStatusUpdate);
    }
    meetingChanged(meeting) {
        if (meeting != null) {
            const { stage, participants } = meeting;
            this.page = participants.currentPage;
            this.pageCount = participants.pageCount;
            participants.addListener('viewModeChanged', this.onPageChanged);
            participants.addListener('pageChanged', this.onPageChanged);
            participants.joined.addListener('participantJoined', this.onParticipantJoin);
            participants.joined.addListener('participantLeft', this.onParticipantLeave);
            participants.joined.addListener('stageStatusUpdate', this.onStateStatusUpdate);
            stage.addListener('stageStatusUpdate', this.onStateStatusUpdate);
            this.activeCount = this.meeting.participants.joined.size;
            this.activeComputedCount = this.meeting.participants.joined.size;
            this.toggleGridPagination();
        }
    }
    sizeChanged() {
        this.toggleGridPagination();
    }
    render() {
        const { meta } = this.meeting;
        const isAudioRoom = (meta === null || meta === void 0 ? void 0 : meta.viewType) === 'AUDIO_ROOM';
        if (isAudioRoom || !this.showPagination) {
            return;
        }
        return (h(Host, null, h("dyte-button", { class: "prev", variant: "secondary", kind: "icon", disabled: this.pageCount === 0, onClick: this.prevPage, "aria-label": this.t('page.prev') }, h("dyte-icon", { icon: this.iconPack.chevron_left })), this.variant !== 'grid' && (h("div", { class: "center" }, h("span", { class: "page" }, this.pageCount === 0 ? (h("dyte-tooltip", { label: this.t('layout.auto') }, h("dyte-button", { kind: "icon", class: "auto" }, h("dyte-icon", { icon: this.iconPack.wand })))) : (this.page)), this.pageCount !== 0 && [
            h("span", { class: "slash" }, "/"),
            h("span", { class: "pages" }, this.pageCount),
        ])), this.variant === 'grid' && this.pageCount > 0 && (h("div", { class: "dots" }, [...Array(this.pageCount)].map((_, index) => (h("div", { key: `dot-${index}`, class: { dot: true, active: index + 1 === this.page } }))))), h("dyte-button", { class: "next", variant: "secondary", kind: "icon", disabled: this.page !== 0 && this.page === this.pageCount, onClick: this.nextPage, "aria-label": this.t('page.next') }, h("dyte-icon", { icon: this.iconPack.chevron_right, tabIndex: -1, "aria-hidden": true }))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "size": ["sizeChanged"]
    }; }
    static get style() { return DyteGridPaginationStyle0; }
}, [1, "dyte-grid-pagination", {
        "meeting": [16],
        "states": [16],
        "size": [513],
        "variant": [513],
        "iconPack": [16],
        "t": [16],
        "page": [32],
        "pageCount": [32],
        "activeCount": [32],
        "activeComputedCount": [32],
        "showPagination": [32]
    }, undefined, {
        "meeting": ["meetingChanged"],
        "size": ["sizeChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteGridPagination$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteGridPagination$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteGridPagination$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteGridPagination$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteGridPagination$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-grid-pagination", "dyte-button", "dyte-icon", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-grid-pagination":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteGridPagination$1);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteGridPagination = DyteGridPagination$1;
const defineCustomElement = defineCustomElement$1;

export { DyteGridPagination, defineCustomElement };
