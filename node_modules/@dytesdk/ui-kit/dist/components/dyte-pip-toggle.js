import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import './p-e497ad6d.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$4 } from './p-9e83e8fe.js';
import { d as defineCustomElement$3 } from './p-a443344b.js';
import { d as defineCustomElement$2 } from './p-cba97631.js';

const dytePipToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}:host([data-hidden]){display:none}";
const DytePipToggleStyle0 = dytePipToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DytePipToggle$1 = /*@__PURE__*/ proxyCustomElement(class DytePipToggle extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Variant */
        this.variant = 'button';
        /** Config */
        this.config = defaultConfig;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.pipSupported = false;
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    meetingChanged(meeting) {
        var _a, _b, _c;
        if (!meeting)
            return;
        // Check if PiP is supported and enabled
        this.pipSupported =
            ((_a = meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.isSupported()) &&
                ((_b = meeting.self.config) === null || _b === void 0 ? void 0 : _b.pipMode) &&
                ((_c = meeting.self.config) === null || _c === void 0 ? void 0 : _c.viewType) !== 'LIVESTREAM';
    }
    togglePip() {
        if (!this.meeting.participants.pip)
            return;
        // Not active, activate
        if (this.meeting.participants.pip.isActive) {
            this.meeting.participants.pip.disable();
        }
        else {
            this.meeting.participants.pip.enable();
        }
        this.stateUpdate.emit({ activeMoreMenu: false });
    }
    render() {
        if (!this.pipSupported)
            return h(Host, { "data-hidden": true });
        const pipEnabled = this.meeting.participants.pip.isActive;
        return (h(Host, { role: "log", "aria-label": `Picture-in-Picture mode` }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, onClick: () => this.togglePip(), icon: pipEnabled ? this.iconPack.pip_on : this.iconPack.pip_off, label: pipEnabled ? this.t('pip_off') : this.t('pip_on'), variant: this.variant })));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DytePipToggleStyle0; }
}, [1, "dyte-pip-toggle", {
        "variant": [513],
        "meeting": [16],
        "states": [16],
        "config": [16],
        "iconPack": [16],
        "size": [513],
        "t": [16],
        "pipSupported": [32]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DytePipToggle$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DytePipToggle$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DytePipToggle$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DytePipToggle$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DytePipToggle$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-pip-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-pip-toggle":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DytePipToggle$1);
            }
            break;
        case "dyte-controlbar-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DytePipToggle = DytePipToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DytePipToggle, defineCustomElement };
