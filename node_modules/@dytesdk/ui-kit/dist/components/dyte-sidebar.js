import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { c as canViewChat, d as canViewPolls, a as canViewParticipants, b as canViewPlugins } from './p-5a3e99fe.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { R as Render } from './p-52218cb0.js';
import { d as defineCustomElement$9 } from './p-e7892c80.js';
import { d as defineCustomElement$8 } from './p-a443344b.js';
import { d as defineCustomElement$7 } from './p-2ae41ef7.js';
import { d as defineCustomElement$6 } from './p-17345509.js';
import { d as defineCustomElement$5 } from './p-26cecbdf.js';
import { d as defineCustomElement$4 } from './p-b521ba13.js';
import { d as defineCustomElement$3 } from './p-1b08344d.js';
import { d as defineCustomElement$2 } from './p-b4f8107f.js';

const dyteSidebarCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{height:100%;width:100%;max-width:var(--dyte-space-96, 384px);box-sizing:border-box;display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));border-width:var(--dyte-border-width-sm, 1px);border-style:solid;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-border-opacity))}:host([view='sidebar']){right:var(--dyte-space-2, 8px);overflow:clip;border-radius:var(--dyte-border-radius-lg, 12px);--tw-shadow:0 25px 50px -12px rgb(0 0 0 / 0.25);--tw-shadow-colored:0 25px 50px -12px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:rgb(var(--dyte-colors-background-900, 26 26 26));--tw-shadow:var(--tw-shadow-colored)}:host([view='full-screen']){top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);max-width:100%}:host(.floating){position:absolute !important;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);left:auto;z-index:50}.pinned-state{position:absolute;right:var(--dyte-space-1, 4px);display:inline-flex;width:var(--dyte-space-2, 8px);justify-content:flex-end}";
const DyteSidebarStyle0 = dyteSidebarCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSidebar$1 = /*@__PURE__*/ proxyCustomElement(class DyteSidebar extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Enabled sections in sidebar */
        this.enabledSections = [];
        /** Default section */
        this.defaultSection = 'chat';
        /** Config */
        this.config = defaultConfig;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** View type */
        this.view = 'sidebar';
        this.currentTab = this.defaultSection;
        this.isFloating = false;
        this.enablePinning = true;
        this.getTabs = () => {
            if (!this.meeting.self.config) {
                return this.enabledSections;
            }
            return this.enabledSections.filter((section) => this.meeting.self.config.controlBar.elements[section.id]);
        };
        this.close = () => {
            this.stateUpdate.emit({ activeSidebar: false, sidebar: this.defaultSection });
        };
        this.toggleFloating = () => {
            this.isFloating = !this.isFloating;
        };
    }
    connectedCallback() {
        var _a;
        this.viewChanged(this.view);
        this.statesChanged(this.states);
        this.meetingChanged(this.meeting);
        this.isFloating = ((_a = this.states) === null || _a === void 0 ? void 0 : _a.sidebarFloating) || false;
    }
    disconnectedCallback() {
        var _a, _b;
        document.removeEventListener('keydown', this.keydownListener);
        (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.removeListener('stageStatusUpdate', this.onStageStatusUpdate);
        this.onStageStatusUpdate = null;
    }
    meetingChanged(meeting) {
        var _a, _b;
        this.updateEnabledSections(meeting);
        this.onStageStatusUpdate = (_status) => {
            this.updateEnabledSections(this.meeting);
        };
        (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.on('stageStatusUpdate', this.onStageStatusUpdate);
    }
    statesChanged(s) {
        const states = s;
        if (states === null || states === void 0 ? void 0 : states.sidebar) {
            this.currentTab = states.sidebar;
        }
    }
    viewChanged(view) {
        if (view === 'full-screen') {
            this.enablePinning = false;
            this.keydownListener = (e) => {
                if (e.key === 'Escape') {
                    this.close();
                }
            };
            document.addEventListener('keydown', this.keydownListener);
        }
        else {
            this.enablePinning = true;
        }
    }
    viewSection(section) {
        this.currentTab = section;
        this.stateUpdate.emit({ activeSidebar: true, sidebar: this.currentTab });
    }
    updateEnabledSections(meeting = this.meeting) {
        const list = [];
        if (canViewChat(meeting)) {
            list.push({ id: 'chat', name: this.t('chat') });
        }
        if (canViewPolls(meeting)) {
            list.push({ id: 'polls', name: this.t('polls') });
        }
        if (canViewParticipants(meeting)) {
            list.push({ id: 'participants', name: this.t('participants') });
        }
        if (canViewPlugins(meeting)) {
            list.push({ id: 'plugins', name: this.t('plugins') });
        }
        this.enabledSections = list;
    }
    render() {
        var _a;
        const defaults = {
            meeting: this.meeting,
            config: this.config,
            states: this.states,
            size: this.size,
            t: this.t,
            iconPack: this.iconPack,
        };
        // NOTE(ishita1805): This makes it easier to use the sidebar component in isolation.
        if (((_a = defaults.states) === null || _a === void 0 ? void 0 : _a.activeSidebar) === false || !this.currentTab) {
            return null;
        }
        return (h(Host, { class: this.enablePinning ? (this.isFloating ? 'floating' : '') : 'floating' }, h("dyte-sidebar-ui", { tabs: this.getTabs(), currentTab: this.currentTab, view: this.view, onTabChange: (e) => {
                this.viewSection(e.detail);
            }, onSidebarClose: this.close }, this.enablePinning && (h("div", { class: "pinned-state", slot: "pinned-state" }, h("dyte-button", { variant: "ghost", kind: "icon", onClick: this.toggleFloating, "aria-label": this.isFloating ? this.t('pin') : this.t('unpin') }, h("dyte-icon", { icon: this.isFloating ? this.iconPack.pin : this.iconPack.pin_off })))), defaults.states.sidebar === 'chat' && (h(Render, { element: "dyte-chat", defaults: defaults, props: { slot: 'chat' } })), defaults.states.sidebar === 'polls' && h("dyte-polls", Object.assign({}, defaults, { slot: "polls" })), defaults.states.sidebar === 'participants' && (h(Render, { element: "dyte-participants", defaults: defaults, props: { slot: 'participants' } })), defaults.states.sidebar === 'plugins' && h("dyte-plugins", Object.assign({}, defaults, { slot: "plugins" })))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "states": ["statesChanged"],
        "view": ["viewChanged"]
    }; }
    static get style() { return DyteSidebarStyle0; }
}, [1, "dyte-sidebar", {
        "enabledSections": [1040],
        "defaultSection": [1, "default-section"],
        "meeting": [16],
        "states": [16],
        "config": [16],
        "iconPack": [16],
        "t": [16],
        "size": [513],
        "view": [513],
        "currentTab": [32],
        "isFloating": [32],
        "enablePinning": [32]
    }, undefined, {
        "meeting": ["meetingChanged"],
        "states": ["statesChanged"],
        "view": ["viewChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteSidebar$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteSidebar$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteSidebar$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteSidebar$1.prototype, "t", void 0);
__decorate([
    SyncWithStore()
], DyteSidebar$1.prototype, "size", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-sidebar", "dyte-button", "dyte-icon", "dyte-plugins", "dyte-poll", "dyte-poll-form", "dyte-polls", "dyte-sidebar-ui", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-sidebar":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteSidebar$1);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "dyte-plugins":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "dyte-poll":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "dyte-poll-form":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-polls":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-sidebar-ui":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteSidebar = DyteSidebar$1;
const defineCustomElement = defineCustomElement$1;

export { DyteSidebar, defineCustomElement };
