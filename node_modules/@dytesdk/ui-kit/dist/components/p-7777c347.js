import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { b as getPreference, s as setPreference } from './p-e497ad6d.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$6 } from './p-3322a930.js';
import { d as defineCustomElement$5 } from './p-e7892c80.js';
import { d as defineCustomElement$4 } from './p-a443344b.js';
import { d as defineCustomElement$3 } from './p-6bcc2f81.js';
import { d as defineCustomElement$2 } from './p-336b8c58.js';
import { d as defineCustomElement$1 } from './p-9548192b.js';

const dyteSettingsAudioCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;width:100%;flex-direction:column}audio{visibility:hidden}.group{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px)}.group>*{margin-bottom:var(--dyte-space-2, 8px)}.group>*:last-child{margin-bottom:var(--dyte-space-0, 0px)}.group select{flex:1 1 0%}dyte-audio-visualizer{flex-shrink:0}dyte-button{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}dyte-button dyte-icon{margin-right:var(--dyte-space-2, 8px)}";
const DyteSettingsAudioStyle0 = dyteSettingsAudioCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSettingsAudio = /*@__PURE__*/ proxyCustomElement(class DyteSettingsAudio extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
    }
    render() {
        var _a, _b;
        if (this.meeting == null)
            return null;
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            size: this.size,
            iconPack: this.iconPack,
            t: this.t,
        };
        const states = this.states;
        const initialNotificationSoundsPreference = ((_a = states === null || states === void 0 ? void 0 : states.prefs) === null || _a === void 0 ? void 0 : _a.muteNotificationSounds) === true ||
            getPreference('mute-notification-sounds') === 'true';
        return (h(Host, null, h("dyte-microphone-selector", Object.assign({}, defaults), h("dyte-audio-visualizer", { participant: (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self, iconPack: this.iconPack, t: this.t, slot: "indicator" })), h("dyte-speaker-selector", Object.assign({}, defaults)), h("div", { class: "group", part: "notification-toggle" }, h("div", { class: "row" }, h("label", { htmlFor: "notification-toggle" }, this.t('settings.notification_sound')), h("dyte-switch", { id: "notification-toggle", checked: !initialNotificationSoundsPreference, onDyteChange: (e) => {
                const { checked } = e.target;
                const muteNotificationSounds = !checked;
                this.stateUpdate.emit({ prefs: { muteNotificationSounds } });
                setPreference('mute-notification-sounds', muteNotificationSounds);
            }, iconPack: this.iconPack, t: this.t })))));
    }
    static get style() { return DyteSettingsAudioStyle0; }
}, [1, "dyte-settings-audio", {
        "meeting": [16],
        "states": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16]
    }]);
__decorate([
    SyncWithStore()
], DyteSettingsAudio.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteSettingsAudio.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteSettingsAudio.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteSettingsAudio.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteSettingsAudio.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-settings-audio", "dyte-audio-visualizer", "dyte-button", "dyte-icon", "dyte-microphone-selector", "dyte-speaker-selector", "dyte-switch"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-settings-audio":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteSettingsAudio);
            }
            break;
        case "dyte-audio-visualizer":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-microphone-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-speaker-selector":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-switch":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteSettingsAudio as D, defineCustomElement as d };
