import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';

const dyteSwitchCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{box-sizing:border-box;display:inline-flex;height:var(--dyte-space-6, 24px);width:var(--dyte-space-10, 40px);align-items:center;padding:var(--dyte-space-1, 4px);border-radius:9999px;background-color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52));cursor:pointer}.switch{box-sizing:border-box;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);background-color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));border-radius:9999px;transition-property:var(--dyte-transition-property, all);transition-duration:200ms}:host(.checked){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}:host(.checked) .switch{transform:translateX(100%)}:host([readonly]),:host([disabled]){cursor:not-allowed;opacity:0.6}";
const DyteSwitchStyle0 = dyteSwitchCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSwitch = /*@__PURE__*/ proxyCustomElement(class DyteSwitch extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.dyteChange = createEvent(this, "dyteChange", 4);
        /** Whether the switch is enabled/checked */
        this.checked = false;
        /** Whether switch is readonly */
        this.readonly = false;
        /** Whether switch is readonly */
        this.disabled = false;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.onClick = () => {
            if (!this.readonly && !this.disabled) {
                this.checked = !this.checked;
            }
        };
        this.onKeyPress = (e) => {
            if (this.readonly)
                return;
            switch (e.key) {
                // Enter or Space
                case 'Enter':
                case ' ':
                    this.checked = !this.checked;
                    break;
            }
        };
    }
    connectedCallback() {
        this.checkedChange(this.checked);
    }
    checkedChange(checked) {
        this.checked = checked;
        this.dyteChange.emit(checked);
    }
    render() {
        return (h(Host, { key: '873702f9dfe5cff8482944e50c3d18cdbcc83185', role: "switch", tabIndex: this.disabled && 0, "aria-readonly": this.readonly, "aria-checked": this.checked, "aria-disabled": this.disabled, class: { checked: this.checked }, onClick: this.onClick, onKeyPress: this.onKeyPress }, h("div", { key: '01d727f8cbe301d7a1134b522dabd0d9a202923f', class: "switch", part: "switch" })));
    }
    static get watchers() { return {
        "checked": ["checkedChange"]
    }; }
    static get style() { return DyteSwitchStyle0; }
}, [1, "dyte-switch", {
        "checked": [1028],
        "readonly": [4],
        "disabled": [516],
        "iconPack": [16],
        "t": [16]
    }, undefined, {
        "checked": ["checkedChange"]
    }]);
__decorate([
    SyncWithStore()
], DyteSwitch.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteSwitch.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-switch"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-switch":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteSwitch);
            }
            break;
    } });
}
defineCustomElement();

export { DyteSwitch as D, defineCustomElement as d };
