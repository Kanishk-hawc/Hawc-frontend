import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { l as logger } from './p-5605a420.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$5 } from './p-9e83e8fe.js';
import { d as defineCustomElement$4 } from './p-a443344b.js';
import { d as defineCustomElement$3 } from './p-cba97631.js';
import { d as defineCustomElement$2 } from './p-b4f8107f.js';

const dyteScreenShareToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}:host([data-hidden]){display:none}";
const DyteScreenShareToggleStyle0 = dyteScreenShareToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const deviceCanScreenShare = () => {
    return (typeof navigator !== 'undefined' &&
        typeof navigator.mediaDevices !== 'undefined' &&
        'getDisplayMedia' in navigator.mediaDevices);
};
const DyteScreenShareToggle$1 = /*@__PURE__*/ proxyCustomElement(class DyteScreenShareToggle extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        this.dyteAPIError = createEvent(this, "dyteAPIError", 7);
        /** Variant */
        this.variant = 'button';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /**
         * Maximum screen share count (value from preset)
         * -1 denotes there is no limit on maximum
         */
        this.maxScreenShareCount = -1;
        this.screenShareCount = 0;
        this.screenShareEnabled = false;
        this.canScreenShare = false;
        this.shareScreenPermission = 'NOT_REQUESTED';
        this.screenShareState = {
            tooltipLabel: this.t('screenshare.start'),
            label: this.t('screenshare.start'),
            icon: this.iconPack.share_screen_start,
            classList: {},
            showWarning: false,
            disable: false,
        };
        this.stageStatus = 'OFF_STAGE';
        this.screenShareListener = () => {
            const activeScreenShares = this.meeting.participants.active
                .toArray()
                .filter((p) => p.screenShareEnabled).length;
            const selfScreenShare = this.meeting.self.screenShareEnabled ? 1 : 0;
            this.screenShareCount = activeScreenShares + selfScreenShare;
            this.screenShareEnabled = this.meeting.self.screenShareEnabled;
            this.getState();
            this.meeting.__internals__.logger.info('dyteScreenShare::screenShareUpdate', {
                media: {
                    screenshare: {
                        enabled: this.screenShareEnabled,
                        count: this.screenShareCount,
                    },
                },
            });
        };
        this.participantLeftListener = ({ screenShareEnabled }) => {
            if (screenShareEnabled) {
                // decrement count if participant who left had screenShareEnabled
                // and don't let it go below 0 (just a failsafe)
                this.screenShareCount = Math.max(this.screenShareCount - 1, 0);
                this.getState();
                this.meeting.__internals__.logger.info('dyteScreenShare::screenShareUpdate', {
                    media: {
                        screenshare: {
                            enabled: this.screenShareEnabled,
                            count: this.screenShareCount,
                        },
                    },
                });
            }
        };
        this.stageStatusListener = () => {
            this.stageStatus = this.meeting.stage.status;
            this.canScreenShare = this.meeting.self.permissions.canProduceScreenshare === 'ALLOWED';
        };
        this.mediaPermissionUpdateListener = ({ kind, message }) => {
            if (kind === 'screenshare') {
                this.shareScreenPermission = message;
                this.getState();
                if (message === 'COULD_NOT_START') {
                    this.dyteAPIError.emit({
                        trace: this.t('screenshare.permissions'),
                        message: this.t('screenshare.error.unknown'),
                    });
                }
                if (this.hasPermissionError()) {
                    const permissionModalSettings = {
                        enabled: true,
                        kind: 'screenshare',
                    };
                    this.stateUpdate.emit({ activePermissionsMessage: permissionModalSettings });
                }
            }
        };
        this.reachedMaxScreenShares = () => {
            // checks if a limit exists, and if limit is reached
            return this.maxScreenShareCount > 0 && this.screenShareCount >= this.maxScreenShareCount;
        };
        this.toggleScreenShare = async () => {
            var _a;
            if (this.screenShareState.disable)
                return;
            if (this.hasPermissionError()) {
                const permissionModalSettings = {
                    enabled: true,
                    kind: 'screenshare',
                };
                this.stateUpdate.emit({ activePermissionsMessage: permissionModalSettings });
                return false;
            }
            const self = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self;
            if (this.screenShareEnabled) {
                self.disableScreenShare();
                return;
            }
            if (self == null ||
                !this.canScreenShare ||
                this.reachedMaxScreenShares() ||
                this.hasPermissionError())
                return;
            this.screenShareState = Object.assign(Object.assign({}, this.screenShareState), { disable: true });
            await self.enableScreenShare();
            this.screenShareState = Object.assign(Object.assign({}, this.screenShareState), { disable: false });
            this.stateUpdate.emit({ activeMoreMenu: false });
        };
    }
    connectedCallback() {
        if (!deviceCanScreenShare()) {
            logger.error('[dyte-screenshare-toggle] Device does not support screensharing.');
            return;
        }
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a, _b, _c, _d, _e, _f;
        (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.participants.joined.removeListener('screenShareUpdate', this.screenShareListener);
        (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.participants.joined.removeListener('participantLeft', this.participantLeftListener);
        (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self.removeListener('screenShareUpdate', this.screenShareListener);
        (_d = this.meeting) === null || _d === void 0 ? void 0 : _d.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
        (_f = (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.stage) === null || _f === void 0 ? void 0 : _f.removeListener('stageStatusUpdate', this.stageStatusListener);
    }
    meetingChanged(meeting) {
        if (meeting != null) {
            const { self, stage } = meeting;
            this.canScreenShare = this.meeting.self.permissions.canProduceScreenshare === 'ALLOWED';
            this.maxScreenShareCount = self.config.maxScreenShareCount;
            this.screenShareEnabled = self.screenShareEnabled;
            let screenShareCount = 0;
            for (const participant of meeting.participants.joined.toArray()) {
                if (participant.screenShareEnabled) {
                    screenShareCount++;
                }
            }
            this.screenShareCount = screenShareCount;
            this.getState();
            meeting.__internals__.logger.info('dyteScreenShare::initialise', {
                media: {
                    screenshare: {
                        enabled: this.screenShareEnabled,
                        count: this.screenShareCount,
                        maxAllowedCount: this.maxScreenShareCount,
                    },
                },
            });
            this.stageStatus = meeting.stage.status;
            meeting.participants.joined.addListener('screenShareUpdate', this.screenShareListener);
            meeting.participants.joined.addListener('participantLeft', this.participantLeftListener);
            self.addListener('screenShareUpdate', this.screenShareListener);
            self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
            stage === null || stage === void 0 ? void 0 : stage.addListener('stageStatusUpdate', this.stageStatusListener);
        }
    }
    hasPermissionError() {
        return (this.shareScreenPermission === 'SYSTEM_DENIED' || this.shareScreenPermission === 'DENIED');
    }
    getState() {
        let tooltipLabel = '';
        let label = '';
        let icon = '';
        let classList = {};
        const hasError = this.hasPermissionError() && !this.screenShareEnabled;
        const limitReached = this.reachedMaxScreenShares() && !this.screenShareEnabled;
        const couldNotStart = this.shareScreenPermission === 'COULD_NOT_START';
        if (this.screenShareEnabled && !hasError) {
            label = this.t('screenshare.stop');
            icon = this.iconPack.share_screen_stop;
            classList['red-icon'] = true;
        }
        else {
            label = this.t('screenshare.start');
            icon = this.iconPack.share_screen_start;
        }
        if (this.shareScreenPermission === 'SYSTEM_DENIED') {
            tooltipLabel = this.t('perm_sys_denied.screenshare');
            classList['red-icon'] = true;
        }
        else if (this.shareScreenPermission === 'DENIED') {
            tooltipLabel = this.t('perm_denied.screenshare');
            classList['red-icon'] = true;
        }
        else {
            tooltipLabel = label;
        }
        if (limitReached) {
            tooltipLabel = this.t('screenshare.error.max_count');
        }
        if (couldNotStart) {
            tooltipLabel = this.t('screenshare.error.unknown');
        }
        this.screenShareState = {
            tooltipLabel,
            label,
            icon,
            classList,
            disable: hasError || limitReached,
            showWarning: hasError || limitReached || couldNotStart,
        };
    }
    render() {
        if (!deviceCanScreenShare() ||
            !this.canScreenShare ||
            ['OFF_STAGE', 'REQUESTED_TO_JOIN_STAGE'].includes(this.stageStatus)) {
            return h(Host, { "data-hidden": true });
        }
        return (h(Host, { title: this.screenShareState.label }, h("dyte-tooltip", { placement: "top", kind: "block", label: this.screenShareState.tooltipLabel, delay: 600, part: "tooltip" }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, variant: this.variant, label: this.screenShareState.label, icon: this.screenShareState.icon, class: this.screenShareState.classList, onClick: this.toggleScreenShare, disabled: this.screenShareState.disable, showWarning: this.screenShareState.showWarning }))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
    static get style() { return DyteScreenShareToggleStyle0; }
}, [1, "dyte-screen-share-toggle", {
        "states": [16],
        "variant": [513],
        "meeting": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "maxScreenShareCount": [32],
        "screenShareCount": [32],
        "screenShareEnabled": [32],
        "canScreenShare": [32],
        "shareScreenPermission": [32],
        "screenShareState": [32],
        "stageStatus": [32]
    }, undefined, {
        "meeting": ["meetingChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteScreenShareToggle$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteScreenShareToggle$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteScreenShareToggle$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteScreenShareToggle$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteScreenShareToggle$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-screen-share-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner", "dyte-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-screen-share-toggle":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteScreenShareToggle$1);
            }
            break;
        case "dyte-controlbar-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteScreenShareToggle = DyteScreenShareToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteScreenShareToggle, defineCustomElement };
