import { p as proxyCustomElement, H, h, e as Host } from './p-1d5392d7.js';
import { c as computePosition, o as offset, f as flip, s as shift } from './p-1397a392.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';

const dyteMenuCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:inline-block;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}#menu-list{position:absolute;z-index:20;display:none}";
const DyteMenuStyle0 = dyteMenuCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMenu = /*@__PURE__*/ proxyCustomElement(class DyteMenu extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.clickedThis = false;
        /** Placement of menu */
        this.placement = 'bottom-end';
        /** Offset in px */
        this.offset = 10;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.handleOutsideClick = () => {
            // handles clicking on other menu triggers
            if (!this.clickedThis) {
                // if other trigger is clicked, hide this menu-list
                this.menuListEl.style.display = 'none';
            }
            // reset the value
            this.clickedThis = false;
        };
    }
    componentDidLoad() {
        document.addEventListener('click', this.handleOutsideClick);
        this.update();
    }
    disconnectedCallback() {
        document.removeEventListener('click', this.handleOutsideClick);
    }
    update() {
        computePosition(this.triggerEl, this.menuListEl, {
            placement: this.placement,
            middleware: [offset(this.offset), flip(), shift({ padding: 5 })],
        }).then(({ x, y }) => {
            Object.assign(this.menuListEl.style, {
                left: `${x}px`,
                top: `${y}px`,
            });
        });
    }
    render() {
        return (h(Host, { key: '8fce9cdf74c107e0438f30cd2c1ed33b5eb0570e' }, h("span", { key: 'bfe2fcfcac4f87a60cc2762d758c34e42c1ab653', id: "trigger", ref: (el) => (this.triggerEl = el), onClick: () => {
                this.clickedThis = true;
                if (this.menuListEl.style.display !== 'block') {
                    this.menuListEl.style.display = 'block';
                    this.update();
                }
                else {
                    this.menuListEl.style.display = 'none';
                }
            } }, h("slot", { key: '09c4699c881002da8ffaab3cfef27e06d8ceae60', name: "trigger" })), h("span", { key: '1feae9bc99d7379471552ea2ea8a39c795259826', part: "menu-list", id: "menu-list", ref: (el) => (this.menuListEl = el) }, h("slot", { key: '01cc566916d96fb30a0845b975431c9202a20ebb' }))));
    }
    static get style() { return DyteMenuStyle0; }
}, [1, "dyte-menu", {
        "size": [513],
        "placement": [1],
        "offset": [2],
        "iconPack": [16],
        "t": [16]
    }]);
__decorate([
    SyncWithStore()
], DyteMenu.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteMenu.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteMenu.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-menu"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-menu":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteMenu);
            }
            break;
    } });
}
defineCustomElement();

export { DyteMenu as D, defineCustomElement as d };
