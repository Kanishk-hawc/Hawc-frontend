import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$2 } from './p-e7892c80.js';
import { d as defineCustomElement$1 } from './p-a443344b.js';

const dyteDialogCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:fixed;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);box-sizing:border-box;padding:var(--dyte-space-4, 16px);flex-direction:column;align-items:center;justify-content:center;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / 0.5);color:rgb(var(--dyte-colors-text-1000, 255 255 255));visibility:hidden;display:none;overflow-wrap:break-word;word-wrap:break-word;z-index:60;-webkit-backdrop-filter:blur(12px) saturate(180%);backdrop-filter:blur(12px) saturate(180%)}#dialog{position:relative;max-height:100%;max-width:100%}#dismiss-btn{position:absolute;top:var(--dyte-space-3, 12px);right:var(--dyte-space-3, 12px);z-index:50}::slotted(*){max-height:100%;max-width:100%}:host([open]){visibility:visible;display:flex}:host([open='false']){visibility:hidden;display:none}";
const DyteDialogStyle0 = dyteDialogCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDialog = /*@__PURE__*/ proxyCustomElement(class DyteDialog extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.onClose = createEvent(this, "dyteDialogClose", 7);
        /** Whether to show the close button */
        this.hideCloseButton = false;
        /** Whether Escape key can close the modal */
        this.disableEscapeKey = false;
        /** UI Config */
        this.config = defaultConfig;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** Whether a dialog is open or not */
        this.open = true;
        this.close = () => {
            this.open = false;
            this.onClose.emit();
        };
        this.keydownListener = (e) => {
            if (!this.disableEscapeKey && e.key === 'Escape' && this.open) {
                this.close();
            }
        };
    }
    connectedCallback() {
        document.addEventListener('keydown', this.keydownListener);
    }
    disconnectedCallback() {
        document.removeEventListener('keydown', this.keydownListener);
    }
    render() {
        if (!this.open) {
            return null;
        }
        return (h(Host, null, h("div", { id: "dialog", part: "container", role: "dialog", "aria-modal": "true" }, h("slot", null), !this.hideCloseButton && (h("dyte-button", { part: "close-button", id: "dismiss-btn", kind: "icon", variant: "ghost", onClick: () => this.close(), type: "button", "aria-label": this.t('dialog.close'), role: "button" }, h("dyte-icon", { icon: this.iconPack.dismiss }))))));
    }
    static get style() { return DyteDialogStyle0; }
}, [1, "dyte-dialog", {
        "hideCloseButton": [4, "hide-close-button"],
        "disableEscapeKey": [4, "disable-escape-key"],
        "meeting": [16],
        "config": [16],
        "states": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "open": [1540]
    }]);
__decorate([
    SyncWithStore()
], DyteDialog.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteDialog.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteDialog.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteDialog.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteDialog.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-dialog", "dyte-button", "dyte-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-dialog":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteDialog);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteDialog as D, defineCustomElement as d };
