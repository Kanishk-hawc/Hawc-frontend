import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage, l as usePaginatedChat } from './p-dce5d30e.js';
import { c as canViewChat } from './p-5a3e99fe.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$4 } from './p-9e83e8fe.js';
import { d as defineCustomElement$3 } from './p-a443344b.js';
import { d as defineCustomElement$2 } from './p-cba97631.js';

const dyteChatToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block}:host([data-hidden]){display:none}.unread-count{position:absolute;right:var(--dyte-space-3, 12px);box-sizing:border-box;padding:var(--dyte-space-0\\.5, 2px);-webkit-user-select:none;-moz-user-select:none;user-select:none;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));font-size:12px;color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));display:flex;height:var(--dyte-space-5, 20px);min-width:var(--dyte-space-5, 20px);align-items:center;justify-content:center;border-radius:9999px;z-index:1}.unread-count-dot{position:absolute;right:var(--dyte-space-3, 12px);z-index:10;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));border-radius:50%;display:flex;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);align-items:center;justify-content:center}:host([variant='horizontal']) .unread-count{right:var(--dyte-space-4, 16px);top:auto}";
const DyteChatToggleStyle0 = dyteChatToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChatToggle$1 = /*@__PURE__*/ proxyCustomElement(class DyteChatToggle extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        this.unreadMessageCount = 0;
        /** Variant */
        this.variant = 'button';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.chatActive = false;
        this.canViewChat = false;
        /**
         * Only used when paginated chat is enabled
         */
        this.hasNewMessages = false;
        this.onChatUpdate = ({ action, message }) => {
            var _a;
            if (this.chatActive)
                return;
            if (action === 'add' && message.userId !== ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.userId)) {
                this.hasNewMessages = true;
                this.unreadMessageCount += 1;
            }
        };
        this.toggleChat = () => {
            const states = this.states;
            this.chatActive = !((states === null || states === void 0 ? void 0 : states.activeSidebar) && (states === null || states === void 0 ? void 0 : states.sidebar) === 'chat');
            if (this.chatActive) {
                this.unreadMessageCount = 0;
                this.hasNewMessages = false;
            }
            this.stateUpdate.emit({
                activeSidebar: this.chatActive,
                sidebar: this.chatActive ? 'chat' : undefined,
                activeMoreMenu: false,
                activeAI: false,
            });
        };
        this.updateCanView = () => {
            this.canViewChat = canViewChat(this.meeting);
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
        this.statesChanged(this.states);
    }
    disconnectedCallback() {
        var _a, _b, _c, _d, _e, _f;
        (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.chat) === null || _b === void 0 ? void 0 : _b.removeListener('chatUpdate', this.onChatUpdate);
        (_d = (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.stage) === null || _d === void 0 ? void 0 : _d.removeListener('stageStatusUpdate', this.updateCanView);
        (_f = (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self) === null || _f === void 0 ? void 0 : _f.permissions.removeListener('chatUpdate', this.updateCanView);
    }
    meetingChanged(meeting) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (meeting == null)
            return;
        if (usePaginatedChat(meeting)) {
            (_a = meeting.chat) === null || _a === void 0 ? void 0 : _a.getMessages(new Date().getTime(), 1, true).then((res) => {
                var _a;
                if ((_a = res === null || res === void 0 ? void 0 : res.messages) === null || _a === void 0 ? void 0 : _a.length)
                    this.hasNewMessages = true;
            });
        }
        const meetingStartedTimeMs = (_c = (_b = meeting.meta) === null || _b === void 0 ? void 0 : _b.meetingStartedTimestamp.getTime()) !== null && _c !== void 0 ? _c : 0;
        const newMessages = (_d = meeting.chat) === null || _d === void 0 ? void 0 : _d.messages.filter((m) => m.timeMs > meetingStartedTimeMs);
        this.unreadMessageCount = newMessages.length || 0;
        (_e = meeting.chat) === null || _e === void 0 ? void 0 : _e.addListener('chatUpdate', this.onChatUpdate);
        this.canViewChat = canViewChat(meeting);
        (_f = meeting === null || meeting === void 0 ? void 0 : meeting.stage) === null || _f === void 0 ? void 0 : _f.on('stageStatusUpdate', this.updateCanView);
        (_g = meeting === null || meeting === void 0 ? void 0 : meeting.self) === null || _g === void 0 ? void 0 : _g.permissions.on('chatUpdate', this.updateCanView);
    }
    statesChanged(states) {
        if (states != null) {
            this.chatActive = states.activeSidebar === true && states.sidebar === 'chat';
        }
    }
    render() {
        if (!this.canViewChat)
            return h(Host, { "data-hidden": true });
        return (h(Host, { title: this.t('chat') }, usePaginatedChat(this.meeting)
            ? this.hasNewMessages && h("div", { class: "unread-count-dot", part: "unread-count-dot" })
            : this.unreadMessageCount !== 0 &&
                !this.chatActive && (h("div", { class: "unread-count", part: "unread-count" }, h("span", null, this.unreadMessageCount <= 100 ? this.unreadMessageCount : '99+'))), h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, class: { active: this.chatActive }, onClick: this.toggleChat, icon: this.iconPack.chat, label: this.t('chat'), variant: this.variant })));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "states": ["statesChanged"]
    }; }
    static get style() { return DyteChatToggleStyle0; }
}, [1, "dyte-chat-toggle", {
        "variant": [513],
        "meeting": [16],
        "states": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "unreadMessageCount": [32],
        "chatActive": [32],
        "canViewChat": [32],
        "hasNewMessages": [32]
    }, undefined, {
        "meeting": ["meetingChanged"],
        "states": ["statesChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteChatToggle$1.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteChatToggle$1.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteChatToggle$1.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteChatToggle$1.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteChatToggle$1.prototype, "t", void 0);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-chat-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-chat-toggle":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteChatToggle$1);
            }
            break;
        case "dyte-controlbar-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "dyte-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}
defineCustomElement$1();

const DyteChatToggle = DyteChatToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteChatToggle, defineCustomElement };
