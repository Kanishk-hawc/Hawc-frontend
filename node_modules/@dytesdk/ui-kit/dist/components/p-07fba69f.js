import { p as proxyCustomElement, H, h, e as Host } from './p-1d5392d7.js';
import { C as ChatHead } from './p-3727005d.js';
import { a as sanitizeLink } from './p-338c7261.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { g as getExtension, a as getFileSize, d as downloadFile } from './p-9fc565cf.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { d as defineCustomElement$2 } from './p-e7892c80.js';
import { d as defineCustomElement$1 } from './p-a443344b.js';

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteFileMessage = /*@__PURE__*/ proxyCustomElement(class DyteFileMessage extends H {
    constructor() {
        super();
        this.__registerHost();
        /** Date object of now, to calculate distance between dates */
        this.now = new Date();
        /** Whether the message is continued by same user */
        this.isContinued = false;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** show message in bubble */
        this.showBubble = false;
    }
    render() {
        const link = sanitizeLink(this.message.link);
        return (h(Host, { key: 'f5befc2c8ec9cb19a0bdf188a3313be725601841' }, !this.isContinued && (h(ChatHead, { key: '127c8691596fe2b2ea236ecf754d6ceca18dee08', name: this.message.displayName, time: this.message.time, now: this.now })), h("div", { key: '209f10f73b231b9d7ccd5de677ff812dfc235950', class: {
                body: true,
                bubble: this.showBubble,
            }, part: "body" }, h("div", { key: '47834225c4d6b625db6823f979ae0b592f897ff8', class: "file" }, h("div", { key: '14516331f804e78977f0b718758cf71b6e57ff33', class: "file-data" }, h("div", { key: 'fa03e638f47d8af6b66eca2b9155c3683d51eb8a', class: "name" }, this.message.name), h("div", { key: 'e9060694813e9d9d90692c70a52ff782a156268d', class: "file-data-split" }, h("div", { key: '7955b2e62e52a2d23cb026badbb1b8960b8ac6e1', class: "ext" }, getExtension(this.message.name)), h("span", { key: '84d6ba7a76be685a3f1509c59d24844d29fd6fee', class: "divider" }), h("div", { key: '9070a6bac59bd947f0b73d4508bc1ff26a493f5d', class: "size" }, getFileSize(this.message.size)))), h("dyte-button", { key: '8ff6e3be0173975f1ab73220317f7171a9923383', variant: "secondary", kind: "icon", onClick: () => downloadFile(link, { name: this.message.name, fallbackName: 'file' }), part: "button" }, h("dyte-icon", { key: 'da690564e3361a9f1ff1e4a933b21020636bd23e', icon: this.iconPack.download }))))));
    }
}, [0, "dyte-file-message", {
        "message": [16],
        "now": [16],
        "isContinued": [516, "is-continued"],
        "iconPack": [16],
        "t": [16],
        "showBubble": [4, "show-bubble"]
    }]);
__decorate([
    SyncWithStore()
], DyteFileMessage.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteFileMessage.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-file-message", "dyte-button", "dyte-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-file-message":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteFileMessage);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteFileMessage as D, defineCustomElement as d };
