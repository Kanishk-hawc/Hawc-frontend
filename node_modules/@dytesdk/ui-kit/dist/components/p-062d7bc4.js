import { p as proxyCustomElement, H, d as createEvent, h, e as Host } from './p-1d5392d7.js';
import { a as defaultIconPack, c as useLanguage } from './p-dce5d30e.js';
import { S as SyncWithStore } from './p-9ae68517.js';
import { T as TextMessageView } from './p-f0a60cbc.js';
import { d as defineCustomElement$2 } from './p-e7892c80.js';
import { d as defineCustomElement$1 } from './p-a443344b.js';

const dyteNotificationCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{pointer-events:none;display:block;height:var(--dyte-space-10, 40px);color:rgb(var(--dyte-colors-text-1000, 255 255 255));animation:show 0.4s ease;transition:0.4s;z-index:100}.ctr{box-sizing:border-box;display:inline-flex;height:100%;min-width:var(--dyte-space-40, 160px);align-items:center;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);-webkit-user-select:none;-moz-user-select:none;user-select:none;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));--tw-shadow:0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:rgb(var(--dyte-colors-background-1000, 8 8 8));--tw-shadow:var(--tw-shadow-colored);pointer-events:auto}img{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-0, 0px);width:var(--dyte-space-0, 0px);border-radius:9999px}img.loaded{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}.message{margin-right:var(--dyte-space-2, 8px);max-width:var(--dyte-space-72, 288px) !important;font-size:14px !important;overflow:hidden !important;display:-webkit-box !important;-webkit-box-orient:vertical !important;-webkit-line-clamp:2 !important}.message p{margin:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-1, 4px)}.message blockquote{display:none}dyte-icon.icon{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}dyte-icon.dismiss{margin-left:auto;height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);border-radius:var(--dyte-border-radius-md, 8px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}dyte-icon.dismiss:hover{cursor:pointer;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}dyte-icon.dismiss{transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}dyte-button{margin-left:var(--dyte-space-4, 16px);margin-right:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-sm, 4px)}.right{margin-left:auto;display:flex;align-items:center}.right>*{margin-left:var(--dyte-space-2, 8px)}.right>*:first-child{margin-left:var(--dyte-space-0, 0px)}:host(.exit){animation:exit 0.4s ease}@keyframes show{0%{opacity:0;transform:translateX(-120px)}100%{opacity:1;transform:translateX(0px)}}@keyframes exit{0%{opacity:1;transform:translateX(0)}100%{opacity:0;transform:translateX(-120px)}}:host([size='sm']){font-size:14px}";
const DyteNotificationStyle0 = dyteNotificationCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteNotification = /*@__PURE__*/ proxyCustomElement(class DyteNotification extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.dismiss = createEvent(this, "dyteNotificationDismiss", 7);
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.imageState = 'loading';
    }
    connectedCallback() {
        this.notificationChanged(this.notification);
    }
    notificationChanged(notification) {
        if (notification != null && typeof notification.duration === 'number') {
            setTimeout(() => {
                this.dismiss.emit(notification.id);
            }, notification.duration);
        }
    }
    render() {
        var _a;
        return (h(Host, { key: 'd1b50e98469e3a31478ffb37eaf0d16b06a97f11' }, h("div", { key: 'ccbba0abd0b8b2126ed435aa22fad0ce4c09bbc3', class: "ctr" }, this.notification.icon != null && (h("dyte-icon", { key: '2977f801f26dc7bab7484ca3344375b59e912789', class: "icon", icon: this.notification.icon, variant: (_a = this.notification.iconVariant) !== null && _a !== void 0 ? _a : 'primary' })), this.notification.image != null &&
            this.notification.icon == null &&
            this.imageState !== 'errored' && (h("img", { key: 'bb74bf766c92d366ff57a64109e9321a755173d3', src: this.notification.image, class: { loaded: this.imageState === 'loaded' }, onLoad: () => (this.imageState = 'loaded'), onError: () => (this.imageState = 'errored') })), h("p", { key: '9882e460b11e649d6ea72ac5d366f968092bfdce', class: "message" }, h(TextMessageView, { key: '913d03c9028353d8b2b3d4a097a6cf588ac3ae9b', message: this.notification.message })), h("div", { key: '2c1458dc02e345bb3c1e3fc8285e6a561c4609eb', class: "right" }, this.notification.button != null && (h("dyte-button", { key: '2b5b9774b6f289ca2f533e5473080007b1390ec1', size: "sm", variant: this.notification.button.variant, onClick: () => this.notification.button.onClick() }, this.notification.button.text)), h("dyte-icon", { key: '51b648dbc0c1411633a6e1e741080b82a7e95c5b', "aria-label": this.t('dismiss'), class: "dismiss", icon: this.iconPack.dismiss, onClick: () => this.dismiss.emit(this.notification.id) })))));
    }
    static get watchers() { return {
        "notification": ["notificationChanged"]
    }; }
    static get style() { return DyteNotificationStyle0; }
}, [1, "dyte-notification", {
        "notification": [16],
        "size": [513],
        "iconPack": [16],
        "t": [16],
        "imageState": [32]
    }, undefined, {
        "notification": ["notificationChanged"]
    }]);
__decorate([
    SyncWithStore()
], DyteNotification.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteNotification.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteNotification.prototype, "t", void 0);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["dyte-notification", "dyte-button", "dyte-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "dyte-notification":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DyteNotification);
            }
            break;
        case "dyte-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "dyte-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { DyteNotification as D, defineCustomElement as d };
