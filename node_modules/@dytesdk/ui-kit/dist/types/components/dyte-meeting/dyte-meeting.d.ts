import { EventEmitter } from '../../stencil-public-runtime';
import { Size, States } from '../../types/props';
import { Meeting } from '../../types/dyte-client';
import { DyteI18n } from '../../lib/lang';
import { IconPack } from '../../lib/icons';
import { UIConfig } from '../../types/ui-config';
import { GridLayout } from '../dyte-grid/dyte-grid';
export type MeetingMode = 'fixed' | 'fill';
/**
 * A single component which renders an entire meeting UI.
 *
 * It loads your preset and renders the UI based on it.
 * With this component, you don't have to handle all the states,
 * dialogs and other smaller bits of managing the application.
 */
export declare class DyteMeeting {
    private resizeObserver;
    private leaveRoomTimer;
    private roomJoinedListener;
    private waitlistedListener;
    private roomLeftListener;
    private mediaPermissionUpdateListener;
    private socketConnectionUpdateListener;
    host: HTMLDyteMeetingElement;
    /** Whether to load config from preset */
    loadConfigFromPreset: boolean;
    /** Whether to apply the design system on the document root from config */
    applyDesignSystem: boolean;
    /** Fill type */
    mode: MeetingMode;
    /** Whether participant should leave when this component gets unmounted */
    leaveOnUnmount: boolean;
    /** Meeting object */
    meeting: Meeting;
    /** Whether to show setup screen or not */
    showSetupScreen: boolean;
    /** Language */
    t: DyteI18n;
    /** UI Config */
    config: UIConfig;
    /** Size */
    size: Size;
    /** Grid layout */
    gridLayout: GridLayout;
    /** Icon pack */
    iconPack: IconPack;
    /** States */
    statesUpdate: EventEmitter<States>;
    private authErrorListener;
    connectedCallback(): void;
    private clearListeners;
    disconnectedCallback(): void;
    meetingChanged(meeting: Meeting): void;
    listenState(e: CustomEvent<States>): void;
    private handleChangingMeeting;
    private handleResize;
    private updateStates;
    render(): any;
}
