'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-1109742b.js');
const uiStore = require('./ui-store-c9fc6964.js');
const index = require('./index-42dce5ce.js');

const dytePipToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}:host([data-hidden]){display:none}";
const DytePipToggleStyle0 = dytePipToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DytePipToggle = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Variant */
        this.variant = 'button';
        /** Config */
        this.config = uiStore.defaultConfig;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.pipSupported = false;
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    meetingChanged(meeting) {
        var _a, _b, _c;
        if (!meeting)
            return;
        // Check if PiP is supported and enabled
        this.pipSupported =
            ((_a = meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.isSupported()) &&
                ((_b = meeting.self.config) === null || _b === void 0 ? void 0 : _b.pipMode) &&
                ((_c = meeting.self.config) === null || _c === void 0 ? void 0 : _c.viewType) !== 'LIVESTREAM';
    }
    togglePip() {
        if (!this.meeting.participants.pip)
            return;
        // Not active, activate
        if (this.meeting.participants.pip.isActive) {
            this.meeting.participants.pip.disable();
        }
        else {
            this.meeting.participants.pip.enable();
        }
        this.stateUpdate.emit({ activeMoreMenu: false });
    }
    render() {
        if (!this.pipSupported)
            return index$1.h(index$1.Host, { "data-hidden": true });
        const pipEnabled = this.meeting.participants.pip.isActive;
        return (index$1.h(index$1.Host, { role: "log", "aria-label": `Picture-in-Picture mode` }, index$1.h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, onClick: () => this.togglePip(), icon: pipEnabled ? this.iconPack.pip_on : this.iconPack.pip_off, label: pipEnabled ? this.t('pip_off') : this.t('pip_on'), variant: this.variant })));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate([
    index.SyncWithStore()
], DytePipToggle.prototype, "meeting", void 0);
__decorate([
    index.SyncWithStore()
], DytePipToggle.prototype, "states", void 0);
__decorate([
    index.SyncWithStore()
], DytePipToggle.prototype, "iconPack", void 0);
__decorate([
    index.SyncWithStore()
], DytePipToggle.prototype, "size", void 0);
__decorate([
    index.SyncWithStore()
], DytePipToggle.prototype, "t", void 0);
DytePipToggle.style = DytePipToggleStyle0;

exports.dyte_pip_toggle = DytePipToggle;
