'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-1109742b.js');
const hark = require('./hark-c97d0a59.js');
const uiStore = require('./ui-store-c9fc6964.js');
const index = require('./index-42dce5ce.js');
const string = require('./string-a410fab6.js');
const debounce = require('./debounce-6dabb441.js');
const chat = require('./chat-4d103ef0.js');
const ChatHead = require('./ChatHead-b44cd0bf.js');
const scroll = require('./scroll-c6404609.js');
const index$2 = require('./index-861582ac.js');
const config = require('./config-2a79f568.js');
const size = require('./size-2a406e36.js');
const ResizeObserver_es = require('./ResizeObserver.es-ba961f16.js');
const floatingUi_dom_esm = require('./floating-ui.dom.esm-8c888b2c.js');
const TextMessage = require('./TextMessage-3cf33756.js');
const notification = require('./notification-cfffcd85.js');
require('./isObjectLike-73d13a39.js');
require('./keysIn-8bdbe83d.js');
require('./logger-3df9c75d.js');

/**
 * Draws audio visualizer of variant `bars`
 * @param canvas Canvas element
 * @param volume Current volume
 */
const drawBarsVisualizer = (canvas, volume) => {
    if (canvas == null) {
        return;
    }
    const nSlices = 3;
    const halfwaySlice = Math.round(nSlices / 2);
    const sample = [...Array(nSlices)].map((_, i) => {
        let index = i;
        if (index > halfwaySlice - 1) {
            index = nSlices - index - 1;
        }
        return Math.round(((index + 1) / (halfwaySlice + 1)) * volume);
    });
    const { width, height } = canvas;
    const context = canvas.getContext('2d');
    let x = 2;
    const sliceGraphicWidth = 4;
    const sliceWidth = (width * 1.0) / sample.length;
    const slicePadding = sliceWidth - sliceGraphicWidth;
    context.clearRect(0, 0, width, height);
    context.fillStyle = 'rgb(0,0,0,0.0)';
    context.fillRect(0, 0, width, height);
    const color = getComputedStyle(canvas).getPropertyValue('color');
    context.fillStyle = color;
    context.strokeStyle = color;
    context.lineCap = 'round';
    context.lineWidth = 4;
    context.beginPath();
    for (const item of sample) {
        const y = Math.min(-Math.abs(((item * 1.2) / 10) * height) + height / 2, height / 2 - 2.5);
        const sliceHeight = Math.max((height / 2 - y) * 2, 5);
        context.moveTo(x + slicePadding / 2, y);
        context.lineTo(x + slicePadding / 2, y + sliceHeight);
        x += sliceWidth;
    }
    context.stroke();
};

const dyteAudioVisualizerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block;width:-moz-fit-content;width:fit-content}.hideMuted{padding:var(--dyte-space-1, 4px)}canvas,dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}:host([size='sm']){transform:scale(0.9)}canvas{display:none}canvas.visible{display:block}canvas.bars{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity))}";
const DyteAudioVisualizerStyle0 = dyteAudioVisualizerCss;

var __decorate$Z = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteAudioVisualizer = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Variant */
        this.variant = 'bars';
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Hide when there is no audio / audio is muted */
        this.hideMuted = false;
        /** Audio visualizer for screensharing, it will use screenShareTracks.audio instead of audioTrack */
        this.isScreenShare = false;
        this.volume = 0;
    }
    connectedCallback() {
        this.participantChanged(this.participant);
    }
    componentDidLoad() {
        drawBarsVisualizer(this.visualizer, 0);
    }
    disconnectedCallback() {
        var _a, _b, _c;
        (_a = this.hark) === null || _a === void 0 ? void 0 : _a.stop();
        this.audioUpdateListener &&
            ((_b = this.participant) === null || _b === void 0 ? void 0 : _b.removeListener('audioUpdate', this.audioUpdateListener));
        this.screenShareUpdateListener &&
            ((_c = this.participant) === null || _c === void 0 ? void 0 : _c.removeListener('screenShareUpdate', this.screenShareUpdateListener));
    }
    participantChanged(participant) {
        if (participant != null) {
            this.audioUpdateListener = ({ audioEnabled, audioTrack }) => {
                var _a;
                (_a = this.hark) === null || _a === void 0 ? void 0 : _a.stop();
                if (audioEnabled && audioTrack != null) {
                    this.audioEnabled = true;
                    const stream = new MediaStream();
                    stream.addTrack(audioTrack);
                    this.calcVolume(stream);
                    // initial draw with volume: 0
                    drawBarsVisualizer(this.visualizer, 0);
                }
                else {
                    this.volume = 0;
                    this.audioEnabled = false;
                }
            };
            if (this.isScreenShare) {
                this.screenShareUpdateListener = ({ screenShareEnabled, screenShareTracks }) => {
                    this.audioUpdateListener({
                        audioEnabled: screenShareEnabled && screenShareTracks.audio != null,
                        audioTrack: screenShareTracks.audio,
                    });
                };
                this.screenShareUpdateListener({
                    screenShareEnabled: participant.screenShareEnabled,
                    screenShareTracks: {
                        audio: participant.screenShareTracks.audio,
                        video: participant.screenShareTracks.video,
                    },
                });
                participant.addListener('screenShareUpdate', this.screenShareUpdateListener);
            }
            else {
                this.audioUpdateListener(participant);
                participant.addListener('audioUpdate', this.audioUpdateListener);
            }
        }
    }
    /**
     * Determines the volume from a given MediaStream and updates the components state
     * @param stream A MediaStream with AudioTrack(s) added
     */
    calcVolume(stream) {
        this.hark = hark.hark(stream, {
            play: false,
            interval: 1000 / 10,
        });
        this.hark.on('volume_change', (dBs) => {
            const prevVolume = this.volume;
            // The exact formula to convert from dBs (-100..0) to linear (0..1) is:
            //   Math.pow(10, dBs / 20)
            // However it does not produce a visually useful output, so let exagerate
            // it a bit. Also, let convert it from 0..1 to 0..10 and avoid value 1 to
            // minimize component renderings.
            // if dBs is -Inifnity, set vol to 0
            let audioVol = Math.round(10 ** (dBs / 115) * 10);
            if (audioVol < 3)
                audioVol = 0;
            let volume = Math.round((prevVolume * 2 + audioVol) / 3);
            if (prevVolume !== volume) {
                this.volume = volume;
                drawBarsVisualizer(this.visualizer, this.volume);
            }
        });
    }
    render() {
        return (index$1.h(index$1.Host, { key: '544351071e0d4766dcadb3b9a6b5c714b8c8a0c2' }, index$1.h("div", { key: 'd52567ede61844a23d21cbf32a7d185b0790f435', class: {
                hideMuted: this.hideMuted,
            } }, index$1.h("canvas", { key: 'd9e71f8d75cae5465e661df0381c00d5b75e88a9', width: "24", height: "24", class: {
                bars: true,
                visible: this.audioEnabled,
            }, ref: (el) => (this.visualizer = el), part: "canvas" }), !this.isScreenShare && !this.audioEnabled && this.hideMuted !== true && (index$1.h("dyte-icon", { key: '107a86c8b02c044ba5e7a22a1d1dc6f250da9720', icon: this.iconPack.mic_off, part: "mic-off-icon" })))));
    }
    static get watchers() { return {
        "participant": ["participantChanged"]
    }; }
};
__decorate$Z([
    index.SyncWithStore()
], DyteAudioVisualizer.prototype, "size", void 0);
__decorate$Z([
    index.SyncWithStore()
], DyteAudioVisualizer.prototype, "iconPack", void 0);
__decorate$Z([
    index.SyncWithStore()
], DyteAudioVisualizer.prototype, "t", void 0);
DyteAudioVisualizer.style = DyteAudioVisualizerStyle0;

const dyteAvatarCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:var(--dyte-space-32, 128px);width:var(--dyte-space-32, 128px);align-items:center;justify-content:center;font-size:28px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));overflow:clip;border-radius:9999px;-webkit-user-select:none;-moz-user-select:none;user-select:none}dyte-icon{height:50%;width:50%}.image-ctr{display:flex;height:100%;width:100%;align-items:center;justify-content:center;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}img{height:var(--dyte-space-0, 0px);width:var(--dyte-space-0, 0px);-o-object-fit:cover;object-fit:cover}img.loaded{height:100%;width:100%}.initials{display:flex;height:100%;width:100%;align-items:center;justify-content:center;text-transform:uppercase}.image{display:flex;height:100%;width:100%;align-items:center;justify-content:center}.image img{display:none;height:100%;width:100%;-o-object-fit:cover;object-fit:cover}.image img.loaded{display:block}:host([variant='hexagon']){border-radius:var(--dyte-border-radius-none, 0);clip-path:polygon(50% 0, 95% 25%, 95% 75%, 50% 100%, 5% 75%, 5% 25%)}:host([variant='square']){border-radius:var(--dyte-border-radius-none, 0);clip-path:polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)}:host([size='sm']){height:var(--dyte-space-14, 56px);width:var(--dyte-space-14, 56px);font-size:12px}:host([size='md']){height:var(--dyte-space-28, 112px);width:var(--dyte-space-28, 112px)}:host([size='lg']){height:var(--dyte-space-32, 128px);width:var(--dyte-space-32, 128px)}";
const DyteAvatarStyle0 = dyteAvatarCss;

var __decorate$Y = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteAvatar = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Avatar type */
        this.variant = 'circular';
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.imageState = 'loading';
        this.getAvatar = () => {
            var _a;
            const name = string.formatName(((_a = this.participant) === null || _a === void 0 ? void 0 : _a.name) || '');
            let picture;
            if (this.participant != null && 'picture' in this.participant) {
                picture = this.participant.picture;
            }
            if (picture && picture.length > 0 && this.imageState !== 'errored') {
                return (index$1.h("div", { class: "image-ctr" }, this.imageState === 'loading' && index$1.h("dyte-spinner", { iconPack: this.iconPack }), index$1.h("img", { src: picture, class: { loaded: this.imageState === 'loaded' }, loading: "lazy", title: name, onLoad: () => (this.imageState = 'loaded'), onError: () => (this.imageState = 'errored'), part: "image" })));
            }
            const initials = string.getInitials(name);
            return (index$1.h("div", { class: "initials", title: name, part: "initials" }, initials));
        };
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'c57eb98421d28fbc9e6f8ddd9c7c0205c843aa81' }, this.getAvatar(), index$1.h("slot", { key: '7e1e8618d0b077c1c4633804e06b602a474d3490' })));
    }
};
__decorate$Y([
    index.SyncWithStore()
], DyteAvatar.prototype, "size", void 0);
__decorate$Y([
    index.SyncWithStore()
], DyteAvatar.prototype, "iconPack", void 0);
__decorate$Y([
    index.SyncWithStore()
], DyteAvatar.prototype, "t", void 0);
DyteAvatar.style = DyteAvatarStyle0;

const dyteBreakoutRoomManagerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));border-radius:var(--dyte-border-radius-sm, 4px)}@keyframes bg-glow{25%{background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}50%{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}75%{background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}}.glowing-card{animation:bg-glow 0.8s}.selector-mode,.assign-mode{display:flex;flex-direction:column;align-items:center;padding:var(--dyte-space-2, 8px);cursor:pointer}.selector:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.show-on-hover{display:none}.header{width:100%;display:flex;align-items:center}.header dyte-icon{margin-left:var(--dyte-space-2, 8px);height:var(--dyte-space-5, 20px);cursor:pointer}.header .danger{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}.header .hide{display:none}.header .rooms-container{display:flex;flex-grow:1;flex-direction:row;align-items:center;justify-content:flex-end}.header input{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));padding:var(--dyte-space-1, 4px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));max-width:var(--dyte-space-36, 144px);font-size:14px;font-weight:500;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;outline:2px solid transparent;outline-offset:2px;border-bottom-width:var(--dyte-border-width-sm, 1px);border-style:solid;--tw-border-opacity:1;border-bottom-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-border-opacity))}.header input:disabled{overflow-x:visible;border-radius:var(--dyte-border-radius-none, 0);border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent}.header input:invalid{border-bottom-width:var(--dyte-border-width-sm, 1px);border-style:dashed;--tw-border-opacity:1;border-bottom-color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-border-opacity))}.header input.editing-enabled{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}.header .participant-count{display:flex;align-items:center;font-size:14px;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.header .participant-count dyte-icon{margin:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0\\.5, 2px);width:var(--dyte-space-3, 12px)}.header .assign-button{height:var(--dyte-space-6, 24px);--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity));text-decoration-line:underline}.header .assign-button:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.participant-list{display:grid;flex-grow:1;grid-template-columns:repeat(2, minmax(0, 1fr));gap:var(--dyte-space-2, 8px);margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);width:100%;border-radius:var(--dyte-border-radius-sm, 4px)}.participant-list::-webkit-scrollbar{width:var(--dyte-space-1\\.5, 6px)}.participant-list::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.participant-list::-webkit-scrollbar-track{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.participant-item{display:flex;align-items:center;justify-content:space-between;margin-right:var(--dyte-space-2, 8px);height:-moz-fit-content;height:fit-content;padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}.participant-item:hover{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.selector-mode:hover .show-on-hover{display:flex}.message-container{margin:var(--dyte-space-0, 0px);display:flex;width:100%;padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px)}.message-container p{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0, 0px);height:var(--dyte-space-20, 80px);display:flex;width:100%;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-sm, 4px);font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));border-style:dashed;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity))}.message-container p:hover{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-border-opacity));background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.25)}.message-container .drop-zone-active{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-border-opacity));background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.25)}dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}.show-on-hover{margin-left:var(--dyte-space-4, 16px);height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);display:none}:host(:hover) .show-on-hover{display:flex}.peer-ui-container{position:relative;display:flex;align-items:center;gap:var(--dyte-space-2, 8px);height:var(--dyte-space-10, 40px);cursor:pointer;border-radius:var(--dyte-border-radius-sm, 4px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.peer-ui-container dyte-avatar{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px);font-size:14px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.peer-ui-container .name{font-size:14px;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}";
const DyteBreakoutRoomManagerStyle0 = dyteBreakoutRoomManagerCss;

var __decorate$X = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const ROOM_TITLE_MIN_CHARS = 3;
const DyteBreakoutRoomManager = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onParticipantsAdd = index$1.createEvent(this, "participantsAdd", 7);
        this.onParticipantDelete = index$1.createEvent(this, "participantDelete", 7);
        this.onRoomJoin = index$1.createEvent(this, "roomJoin", 7);
        this.deleteRoom = index$1.createEvent(this, "delete", 7);
        this.updateRoom = index$1.createEvent(this, "update", 7);
        /** allow room delete */
        this.allowDelete = true;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Drag mode */
        this.isDragMode = false;
        /** display expanded card by default */
        this.defaultExpanded = false;
        this.editingTitleRoomId = null;
        this.newTitle = null;
        this.showExpandedCard = false;
        this.glowingCard = false;
        this.permissionsUpdateListener = () => {
            this.permissions = this.meeting.self.permissions.connectedMeetings;
        };
        this.reset = () => {
            this.editingTitleRoomId = null;
            this.newTitle = null;
        };
        this.onEditClick = () => {
            if (this.editingTitleRoomId) {
                if (this.newTitle.length < ROOM_TITLE_MIN_CHARS)
                    return;
                this.roomTitle = this.newTitle;
                this.updateRoom.emit({
                    title: this.newTitle,
                    id: this.editingTitleRoomId,
                });
                this.glowCard();
                this.reset();
            }
            else {
                this.editingTitleRoomId = this.room.id;
                index$1.writeTask(() => {
                    this.inputTextEl.focus();
                    this.inputTextEl.select();
                });
            }
        };
        this.onDrop = (e) => {
            if (e.currentTarget instanceof HTMLParagraphElement) {
                e.currentTarget.classList.remove('drop-zone-active');
                this.onAssign();
            }
        };
        this.onDragOver = (e) => {
            if (e.currentTarget instanceof HTMLParagraphElement) {
                e.currentTarget.classList.add('drop-zone-active');
                e.preventDefault();
            }
        };
    }
    connectedCallback() {
        var _a;
        this.allParticipants = uiStore.getAllConnectedParticipants(this.meeting);
        this.permissionsUpdateListener();
        this.showExpandedCard = this.defaultExpanded;
        this.roomTitle = this.room.isParent ? this.t('breakout_rooms.main_room') : (_a = this.room) === null || _a === void 0 ? void 0 : _a.title;
        this.canEditMeetingTitle =
            this.permissions.canAlterConnectedMeetings &&
                !this.room.isParent &&
                !this.meeting.connectedMeetings.isActive; // TODO: remove this once socket supports update meetings
        this.meeting.self.permissions.on('permissionsUpdate', this.permissionsUpdateListener);
    }
    disconnectedCallback() {
        this.meeting.self.permissions.off('permissionsUpdate', this.permissionsUpdateListener);
    }
    onDragLeave(e) {
        if (e.currentTarget instanceof HTMLParagraphElement) {
            e.currentTarget.classList.remove('drop-zone-active');
        }
    }
    getAssignmentHint() {
        if (this.assigningParticipants && this.isDragMode) {
            return this.t('breakout_rooms.drag_drop_participants');
        }
        if (this.assigningParticipants) {
            return this.t('breakout_rooms.click_drop_participants');
        }
        if (this.room.participants.length === 0) {
            return this.t('breakout_rooms.none_assigned');
        }
    }
    toggleCardDisplay() {
        this.showExpandedCard = !this.showExpandedCard;
    }
    glowCard() {
        this.glowingCard = true;
        setTimeout(() => {
            this.glowingCard = false;
        }, 2000);
    }
    onAssign() {
        this.onParticipantsAdd.emit();
        this.glowCard();
    }
    onJoin() {
        this.onRoomJoin.emit();
    }
    onTitleChanged(e) {
        if (e.key === 'Enter') {
            this.newTitle = e.target.value;
            this.onEditClick();
        }
    }
    renderPeer(participant) {
        const { displayPictureUrl: picture } = this.allParticipants.find((p) => uiStore.participantIdentifier(p) === uiStore.participantIdentifier(participant));
        const name = string.formatName(participant.displayName || '');
        return (index$1.h("div", { class: "peer-ui-container" }, index$1.h("dyte-avatar", { participant: { name, picture }, size: "sm" }), index$1.h("p", { class: "name", title: name }, string.shorten(name, 16), this.meeting.self.userId === participant.id && ` (${this.t('you')})`)));
    }
    renderExpandedCardMaybe() {
        if (!this.showExpandedCard)
            return;
        if (this.room.isParent)
            return;
        if (!this.getAssignmentHint())
            return;
        if (!this.permissions.canAlterConnectedMeetings)
            return;
        return (index$1.h("div", { class: "message-container" }, index$1.h("p", { class: { 'compact-height': this.room.participants.length !== 0 }, onClick: () => this.onAssign(), onDragOver: this.onDragOver, onDragLeave: this.onDragLeave, onDrop: this.onDrop }, this.getAssignmentHint())));
    }
    renderParticipantsMaybe() {
        if (!this.showExpandedCard)
            return;
        if (this.room.isParent)
            return;
        if (this.room.participants.length === 0)
            return;
        return (index$1.h("div", { class: "participant-list", onClick: () => {
                this.onAssign();
            } }, this.room.participants.map((participant) => (index$1.h("div", { class: "participant-item", role: "listitem", key: participant.id }, this.renderPeer(participant), this.permissions.canAlterConnectedMeetings && (index$1.h("dyte-icon", { class: "show-on-hover", icon: this.iconPack.dismiss, onClick: () => {
                this.onParticipantDelete.emit(participant);
            } })))))));
    }
    render() {
        var _a, _b, _c;
        return (index$1.h(index$1.Host, { key: '55d8c00978d9710c5bedd9ab0e34ba18afa50733' }, index$1.h("div", { key: 'a82630203869a94d2ecc4e33103ada61eedb19bc', class: {
                'assign-mode': this.assigningParticipants,
                'selector-mode': !this.assigningParticipants,
                'glowing-card': this.glowingCard,
            } }, index$1.h("div", { key: 'd6286509a9917de384d80648d5171f94851906b9', class: "header" }, index$1.h("input", { key: '76304ed7452bfac9e03998578c8ffb8ea03b82fb', ref: (el) => (this.inputTextEl = el), placeholder: this.t('breakout_rooms.room_name'), disabled: !(this.editingTitleRoomId === this.room.id), value: this.roomTitle, minlength: ROOM_TITLE_MIN_CHARS, onChange: (e) => {
                this.newTitle = e.target.value;
            }, onKeyPress: (e) => this.onTitleChanged(e), class: { 'editing-enabled': this.editingTitleRoomId === this.room.id }, style: { width: `${this.roomTitle.length + 1}ch` } }), this.editingTitleRoomId !== this.room.id && (index$1.h("span", { key: '4f31320550907e0dcb44f31b4b929167795a1850', class: "participant-count" }, "(", index$1.h("dyte-icon", { key: '697420b64dd947349e736ac381a526a1f340606f', icon: this.iconPack.people }), (_c = (_b = (_a = this.room) === null || _a === void 0 ? void 0 : _a.participants) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : '0', ")")), this.canEditMeetingTitle && (index$1.h("dyte-tooltip", { key: '3e826e83ac09e69b1c90c4f6e0e7c93638a1eed1', label: this.editingTitleRoomId === this.room.id
                ? this.t('breakout_rooms.save_room_name')
                : this.t('breakout_rooms.edit_room_name') }, index$1.h("dyte-icon", { key: '8735226fb881ad3b06d4130e8ec51a85c037949b', icon: this.editingTitleRoomId === this.room.id
                ? this.iconPack.checkmark
                : this.iconPack.edit, class: "show-on-hover", onClick: this.onEditClick }))), index$1.h("div", { key: 'e06e9e8f30ebdbeb3cb16dfb2c3fc23822f13187', class: "rooms-container" }, this.permissions.canAlterConnectedMeetings &&
            !this.room.isParent &&
            this.allowDelete && (index$1.h("dyte-tooltip", { key: '30b872574e985b00191d277e3e2ed0d75a3291a1', label: this.t('breakout_rooms.delete'), class: "danger" }, index$1.h("dyte-icon", { key: '2c92407f1589e22a9198594f5c3d7cb2cf345521', icon: this.iconPack.delete, class: "show-on-hover", onClick: () => {
                this.deleteRoom.emit();
            } }))), this.assigningParticipants &&
            this.permissions.canAlterConnectedMeetings &&
            !this.room.isParent && (index$1.h("dyte-button", { key: '2e1bae37a6410fecf22228b16cbbcd744972c41f', kind: "button", variant: "ghost", class: "assign-button", size: "md", onClick: () => this.onAssign() }, this.t('breakout_rooms.assign'))), this.mode === 'edit' &&
            !this.assigningParticipants &&
            this.permissions.canSwitchConnectedMeetings && (index$1.h("dyte-button", { key: 'ebf98a4e34ece75f1fe8fe41e8884d9d6e1e8292', kind: "button", variant: "ghost", class: "assign-button", size: "md", disabled: this.room.id === this.meeting.meta.meetingId, onClick: () => this.onJoin() }, this.room.id === this.meeting.meta.meetingId
            ? this.t('joined')
            : this.t('join'))), !this.room.isParent && (index$1.h("dyte-icon", { key: 'fd3ce5aaae760638a9d32ac306be26f248cbd947', icon: this.showExpandedCard ? this.iconPack.chevron_up : this.iconPack.chevron_down, onClick: () => this.toggleCardDisplay() })))), this.renderExpandedCardMaybe(), this.renderParticipantsMaybe())));
    }
};
__decorate$X([
    index.SyncWithStore()
], DyteBreakoutRoomManager.prototype, "meeting", void 0);
__decorate$X([
    index.SyncWithStore()
], DyteBreakoutRoomManager.prototype, "states", void 0);
__decorate$X([
    index.SyncWithStore()
], DyteBreakoutRoomManager.prototype, "iconPack", void 0);
__decorate$X([
    index.SyncWithStore()
], DyteBreakoutRoomManager.prototype, "t", void 0);
DyteBreakoutRoomManager.style = DyteBreakoutRoomManagerStyle0;

const dyteBreakoutRoomParticipantsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{display:flex;height:100%;flex-direction:column;font-size:14px}:host input[type='checkbox']{margin:var(--dyte-space-0, 0px);cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;border-radius:var(--dyte-border-radius-sm, 4px);position:relative;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);border-width:var(--dyte-border-width-sm, 1px);border-style:solid;border-color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}:host input[type='checkbox']:checked{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-border-opacity));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}:host input[type='checkbox']:checked::before{position:absolute;top:1px;left:1px;height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px);background-color:rgb(var(--dyte-colors-text-1000, 255 255 255));content:'';clip-path:polygon(5% 60%, 35% 93%, 100% 19%, 86% 4%, 36% 62%, 19% 44%)}*{box-sizing:border-box}.participants{margin-top:var(--dyte-space-2, 8px);padding:var(--dyte-space-0, 0px)}.ctr{box-sizing:border-box;padding-top:var(--dyte-space-0, 0px);padding-bottom:var(--dyte-space-0, 0px);overflow-y:auto;flex-grow:1;flex-basis:0}.empty-message{margin-top:var(--dyte-space-10, 40px);margin-bottom:var(--dyte-space-10, 40px);text-align:center;font-size:14px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.empty-room{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:var(--dyte-space-2, 8px);height:100%;text-align:center;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.empty-room dyte-icon{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px)}.empty-room p{font-size:16px;font-weight:500;margin:var(--dyte-space-0, 0px)}.empty-room span{font-size:12px;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.search-wrapper{margin-bottom:var(--dyte-space-1, 4px);display:flex;align-items:center;gap:var(--dyte-space-2, 8px)}.search{position:sticky;box-sizing:border-box;display:flex;align-items:center;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0, 0px);height:var(--dyte-space-8, 32px)}.search .search-icon{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.search input{box-sizing:border-box;width:100%;padding-right:var(--dyte-space-2, 8px);border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:inherit;color:rgb(var(--dyte-colors-text-1000, 255 255 255));outline:2px solid transparent;outline-offset:2px;border-radius:var(--dyte-border-radius-sm, 4px);font-size:14px}.search input::-moz-placeholder{color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.search input::placeholder{color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.header{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-1\\.5, 6px);height:var(--dyte-space-9, 36px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-0\\.5, 2px);border-bottom-width:var(--dyte-border-width-sm, 1px);border-top-width:var(--dyte-border-width-none, 0);border-right-width:var(--dyte-border-width-none, 0);border-left-width:var(--dyte-border-width-none, 0);border-style:solid;--tw-border-opacity:1;border-bottom-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity));font-size:12px;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));display:flex;align-items:center;justify-content:space-between}.title-wrapper{display:flex;align-items:center;gap:var(--dyte-space-2, 8px)}.participant-count{display:flex;align-items:center;font-size:14px}.participant-count dyte-icon{margin-right:var(--dyte-space-0\\.5, 2px);width:var(--dyte-space-3, 12px)}.participant-item{display:flex;align-items:center;justify-content:space-between;margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);border-radius:var(--dyte-border-radius-sm, 4px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);cursor:pointer}.participant-item input.hide-checkbox{display:none}.participant-item input:checked{display:inline-block}.dragging input{display:none}.participant-item:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.participant-item:hover input{display:inline-block}.peer-ui-container{position:relative;display:flex;align-items:center;gap:var(--dyte-space-2, 8px);height:var(--dyte-space-10, 40px);cursor:pointer;border-radius:var(--dyte-border-radius-sm, 4px);color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.peer-ui-container dyte-avatar{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px);font-size:14px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.peer-ui-container .name{font-size:14px;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}";
const DyteBreakoutRoomParticipantsStyle0 = dyteBreakoutRoomParticipantsCss;

var __decorate$W = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteBreakoutRoomParticipants = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onSelectedParticipantsUpdate = index$1.createEvent(this, "selectedParticipantsUpdate", 7);
        this.onAllToggled = index$1.createEvent(this, "allParticipantsToggleUpdate", 7);
        this.onParticipantsDragging = index$1.createEvent(this, "participantsDragging", 7);
        /** Participant ids */
        this.participantIds = [];
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.search = '';
        this.participantsToShow = [];
        /** selected participants */
        this.selectedParticipantIds = [];
        this.isDragging = false;
        this.onSearchInput = (e) => {
            this.search = e.target.value;
        };
        this.onDragStart = (participant) => {
            this.isDragging = true;
            this.onParticipantsDragging.emit(true);
            this.updateSelectedParticipants(participant, true);
        };
        this.onDragEnd = (participant) => {
            this.isDragging = false;
            this.onParticipantsDragging.emit(false);
            this.updateSelectedParticipants(participant, false);
        };
        this.onClick = (participant) => {
            const selected = this.selectedParticipantIds.includes(uiStore.participantIdentifier(participant));
            this.updateSelectedParticipants(participant, !selected);
        };
        this.onToggleAll = (checked) => {
            const selectedParticipants = checked ? this.participantsToShow.map(uiStore.participantIdentifier) : [];
            this.onAllToggled.emit(selectedParticipants);
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
        this.searchChanged(this.search);
    }
    disconnectedCallback() {
        if (this.meeting == null)
            return;
    }
    updateSelectedParticipants(participant, selected) {
        const id = uiStore.participantIdentifier(participant);
        let selectedParticipants = [];
        if (selected && !this.selectedParticipantIds.includes(id)) {
            selectedParticipants = [...this.selectedParticipantIds, id];
        }
        else {
            selectedParticipants = [...this.selectedParticipantIds.filter((x) => x !== id)];
        }
        this.onSelectedParticipantsUpdate.emit(selectedParticipants);
    }
    meetingChanged(meeting) {
        if (meeting == null)
            return;
        this.getParticipants(this.search);
    }
    participantsChanged() {
        this.getParticipants(this.search);
    }
    searchChanged(search) {
        this.getParticipants(search);
    }
    getParticipants(search) {
        const allParticipants = uiStore.getAllConnectedParticipants(this.meeting);
        this.participantsToShow = allParticipants.filter((participant) => {
            var _a;
            return (this.participantIds.includes(uiStore.participantIdentifier(participant)) &&
                ((_a = participant.displayName) !== null && _a !== void 0 ? _a : '').toLowerCase().includes(search.toLowerCase()));
        });
    }
    renderPeer(participant) {
        const name = string.formatName(participant.displayName || '');
        return (index$1.h("div", { class: "peer-ui-container" }, index$1.h("dyte-avatar", { participant: {
                name: participant.displayName,
                picture: participant.displayPictureUrl,
            }, size: "sm" }), index$1.h("p", { class: "name", title: name }, string.shorten(name, 16), this.meeting.self.userId === participant.id && ` (${this.t('you')})`)));
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'f2d84e849f539e0c6fc709258c280894ed33bf03' }, index$1.h("div", { key: '7a837d42639e0577ec6a263ad8551b7ad0d26178', class: "search-wrapper" }, index$1.h("div", { key: '3297c0dd3654ebfc017bac54b0b88f3703894456', class: "search", part: "search" }, index$1.h("dyte-icon", { key: '3703973e874502d500aa1e814bce881f6731e132', icon: this.iconPack.search, part: "search-icon", class: "search-icon" }), index$1.h("input", { key: '3a3ad70f36122385f7da50c018d2e326c0d37e5e', type: "search", autocomplete: "off", placeholder: this.t('search'), onInput: this.onSearchInput, part: "search-input" })), index$1.h("slot", { key: '94570b18dbed22c304a86f571e7eb3a58a341d2e', name: "shuffle-button" })), index$1.h("div", { key: '1945693901357dbcb608199c9ed460745390ab03', class: "header" }, index$1.h("div", { key: '3929f5c2d37a6a60f8b21345535420ea5cc30d9e', class: "title-wrapper" }, index$1.h("span", { key: 'fdcda41de05fc7a6cc1ce40af7d6b1a3d891e551' }, this.t('breakout_rooms.main_room')), index$1.h("span", { key: '67730b14ab4b77e2d5f469ffeb187d631793bddb', class: "participant-count" }, "(", index$1.h("dyte-icon", { key: '19d758f1f0bee73b1100754a7f4d369592f60bd2', icon: this.iconPack.people }), this.participantsToShow.length, ")")), this.selectedParticipantIds.length !== 0 && (index$1.h("dyte-tooltip", { key: '47eff73a22c4471e3f5c44bda4b966f2b3ad5e44', label: this.t('breakout_rooms.select_all') }, index$1.h("input", { key: 'd180c3d5f879b263de54b7d449cf88b00dbfe1d7', type: "checkbox", checked: this.selectedParticipantIds.length === this.participantsToShow.length, onChange: (e) => this.onToggleAll(!!e.target.checked) })))), index$1.h("div", { key: '33ea623c6378203774429d0964e35af32a4541d0', class: "ctr scrollbar", part: "container" }, this.participantsToShow.length > 0 && (index$1.h("ul", { key: '89e4e47c8d67cac9eda4d3f6e4aab9cfa9fbede2', class: "participants", part: "participants" }, this.participantsToShow.map((participant) => (index$1.h("li", { class: { 'participant-item': true, dragging: this.isDragging }, onClick: () => this.onClick(participant), onDragStart: () => this.onDragStart(participant), onDragEnd: () => this.onDragEnd(participant), draggable: this.selectedParticipantIds.length === 0, role: "listitem", key: participant.id }, this.renderPeer(participant), !this.isDragging && (index$1.h("input", { type: "checkbox", class: {
                'hide-checkbox': this.selectedParticipantIds.length === 0,
            }, checked: this.selectedParticipantIds.includes(uiStore.participantIdentifier(participant)) }))))))), this.participantsToShow.length === 0 && this.search.length > 0 && (index$1.h("div", { key: '749a308a9fd64ebf4d0a0d92dee2cf1e03f6c3b9', class: "empty-message" }, this.t('participants.errors.empty_results'))), this.participantsToShow.length === 0 && this.search.length === 0 && (index$1.h("div", { key: '0bc4d11ad0d47d5222ed886963888481aa21d1af', class: "empty-room" }, index$1.h("dyte-icon", { key: '75fb66ad3077eaf45ea103147b7f74620d9bb2a7', icon: this.iconPack.people_checked, part: "search-icon", class: "search-icon" }), index$1.h("p", { key: 'b94340bb40d335b1f5833c105b22c348c4e13cf6' }, this.t('breakout_rooms.all_assigned')), index$1.h("span", { key: '807499efca10da51093eec42229356cd5acce1ec' }, this.t('breakout_rooms.empty_main_room')))))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "participantIds": ["participantsChanged"],
        "search": ["searchChanged"]
    }; }
};
__decorate$W([
    index.SyncWithStore()
], DyteBreakoutRoomParticipants.prototype, "meeting", void 0);
__decorate$W([
    index.SyncWithStore()
], DyteBreakoutRoomParticipants.prototype, "iconPack", void 0);
__decorate$W([
    index.SyncWithStore()
], DyteBreakoutRoomParticipants.prototype, "t", void 0);
DyteBreakoutRoomParticipants.style = DyteBreakoutRoomParticipantsStyle0;

const dyteBreakoutRoomsManagerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.color-brand{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity))}.color-danger{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}.loading-content{height:var(--dyte-space-60, 240px);width:var(--dyte-space-96, 384px);padding:var(--dyte-space-9, 36px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));display:flex;align-items:center;justify-content:center}.room-config{overflow:hidden;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));display:flex;flex-direction:column;width:var(--dyte-space-96, 384px);padding-left:var(--dyte-space-9, 36px);padding-right:var(--dyte-space-9, 36px);padding-top:var(--dyte-space-10, 40px);padding-bottom:var(--dyte-space-10, 40px)}header{margin-bottom:var(--dyte-space-8, 32px);display:flex;align-items:center;gap:var(--dyte-space-2, 8px);font-size:24px;font-weight:600}header dyte-icon{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px)}.create-room{margin-bottom:var(--dyte-space-4, 16px);display:flex;align-items:center;gap:var(--dyte-space-3, 12px);width:100%}.create-room p{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-1, 4px);font-size:16px}.distribution-hint{margin-bottom:var(--dyte-space-8, 32px);font-size:14px;font-weight:400;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.distribution-hint em{font-style:normal;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}footer{display:flex;flex-direction:row;vertical-align:middle;justify-content:center}footer dyte-button{width:100%;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}label{margin-bottom:var(--dyte-space-3, 12px);font-weight:400;color:rgb(var(--dyte-colors-text-1000, 255 255 255));opacity:0.4}.participant-config-wrapper{width:850px;height:595px;max-width:100%;max-height:100%;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));display:flex;flex-direction:column}.participant-config-actions{display:flex;justify-content:space-between;padding-left:var(--dyte-space-8, 32px);padding-right:var(--dyte-space-8, 32px);padding-top:var(--dyte-space-5, 20px);padding-bottom:var(--dyte-space-5, 20px);border-bottom-right-radius:var(--dyte-border-radius-md, 8px);border-bottom-left-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}.participant-config{display:flex;flex-grow:1;flex-direction:row;overflow:hidden}aside{box-sizing:border-box;display:flex;width:var(--dyte-space-96, 384px);flex-grow:1;flex-direction:column;padding-left:var(--dyte-space-8, 32px);padding-right:var(--dyte-space-4, 16px);border-right-width:var(--dyte-border-width-sm, 1px);border-top-width:var(--dyte-border-width-none, 0);border-bottom-width:var(--dyte-border-width-none, 0);border-left-width:var(--dyte-border-width-none, 0);border-style:solid;--tw-border-opacity:1;border-right-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity))}aside header{margin-bottom:var(--dyte-space-4, 16px);width:100%;padding-left:var(--dyte-space-0, 0px);padding-right:var(--dyte-space-0, 0px);padding-top:var(--dyte-space-8, 32px);font-size:20px;font-weight:500;line-height:2rem}.shuffle-button{display:flex;flex-direction:row;align-items:center}.shuffle-button dyte-icon{height:var(--dyte-space-8, 32px)}.participants-assign-actions{display:flex;flex-direction:row;align-items:center;justify-content:space-between;font-size:14px;padding-left:var(--dyte-space-8, 32px);padding-right:var(--dyte-space-2, 8px);margin-left:calc(var(--dyte-space-8, 32px) * -1);margin-right:calc(var(--dyte-space-4, 16px) * -1);padding-top:var(--dyte-space-0\\.5, 2px);padding-bottom:var(--dyte-space-0\\.5, 2px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}.participants-assign-actions .deselect-button{height:var(--dyte-space-6, 24px)}.participants-assign-actions .deselect-button:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}.assign-rooms{padding:var(--dyte-space-8, 32px);display:flex;width:100%;flex-direction:column}.assign-rooms .disabled{opacity:0.2}.assign-rooms .back{display:flex;cursor:pointer;flex-direction:row;align-items:center;justify-content:flex-start;padding:var(--dyte-space-4, 16px);padding-bottom:var(--dyte-space-0, 0px);font-size:14px;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.assign-rooms .back dyte-icon{height:var(--dyte-space-5, 20px)}.assign-rooms .row{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;gap:var(--dyte-space-3, 12px);margin-bottom:var(--dyte-space-4, 16px);font-size:14px}.assign-rooms .row-header{margin:var(--dyte-space-0, 0px);font-size:16px;line-height:2rem}.assign-rooms .cta-buttons{display:flex;align-items:center;justify-content:flex-start;gap:var(--dyte-space-2, 8px)}.assign-rooms .cta-buttons dyte-button div{display:flex;flex-direction:row;align-items:center}.assign-rooms .cta-buttons dyte-button div dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}.rooms{margin-bottom:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-1, 4px);display:flex;flex-grow:1;flex-direction:column;gap:var(--dyte-space-2, 8px);overflow-y:auto;max-height:500px}.rooms::-webkit-scrollbar{width:var(--dyte-space-1\\.5, 6px);border-radius:var(--dyte-border-radius-sm, 4px)}.rooms::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.rooms::-webkit-scrollbar-track{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.breakout-actions{display:flex;flex-direction:row;align-items:center;justify-content:flex-end;gap:var(--dyte-space-2, 8px)}.breakout-actions .start-breakout-button{color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.breakout-actions .close-breakout-button{color:rgb(var(--dyte-colors-text-1000, 255 255 255));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-bg-opacity))}.breakout-actions .update-breakout-button{background-color:transparent;--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity));border-width:var(--dyte-border-width-sm, 1px);border-style:solid;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-border-opacity))}.status-bar{display:flex;align-items:center;font-size:14px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));width:var(--dyte-space-80, 320px)}.ephemeral-status{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}.ephemeral-status dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}.room-switcher-container{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));width:468px;padding:var(--dyte-space-8, 32px)}.add-room-jumbo-btn div{display:flex;align-items:center;gap:var(--dyte-space-1, 4px);font-size:14px;--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity))}.add-room-jumbo-btn div dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}.br-primary-btn:not([disabled]){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.br-primary-btn:not([disabled]):hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-600, 13 81 253) / var(--tw-bg-opacity))}.br-secondary-btn:not([disabled]){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.br-secondary-btn:not([disabled]):hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}";
const DyteBreakoutRoomsManagerStyle0 = dyteBreakoutRoomsManagerCss;

var __decorate$V = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const MIN_ROOMS = 1;
const DyteBreakoutRoomsManager = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Flag to indicate busy state */
        this.loading = false;
        /** Breakout room config object */
        this.roomConfig = {
            rooms: 2,
            step: 'room-config',
            mode: 'create',
            applyingChanges: false,
        };
        /** List of assigned participants */
        // @State() unassignedParticipants: string[] = [];
        /** Flag that tells if participants are being assigned or not */
        this.assigningParticipants = false;
        /** List of selected peers */
        this.selectedParticipants = [];
        /** update about room changes */
        this.ephemeralStatusText = '';
        /** Flag that tells if participants are being dragged */
        this.isDragMode = false;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.permissionsUpdateListener = () => {
            this.permissions = this.meeting.self.permissions.connectedMeetings;
        };
        this.updateLocalState = (payload) => {
            this.stateManager.updateCurrentState(payload);
            this.draftState = this.stateManager.currentState;
            if (this.meeting.connectedMeetings.isActive) {
                this.roomConfig = Object.assign(Object.assign({}, this.roomConfig), { mode: 'edit' });
            }
            if (this.roomConfig.mode === 'create' && !this.meeting.connectedMeetings.isActive) {
                uiStore.resetRoomCount();
            }
            if (['edit', 'view'].includes(this.roomConfig.mode)) {
                this.roomConfig = Object.assign(Object.assign({}, this.roomConfig), { rooms: payload.meetings.length, step: 'participants-config' });
                this.selectedParticipants = [];
            }
        };
        this.onAddNewRoom = () => {
            this.stateManager.addNewMeeting();
            this.draftState = this.stateManager.currentState;
            this.selectorRef.scrollTo({ top: this.selectorRef.scrollHeight, behavior: 'smooth' });
        };
        this.onRoomUpdate = (event) => {
            const { detail } = event;
            this.stateManager.updateMeetingTitle(detail.id, detail.title);
            this.draftState = this.stateManager.currentState;
        };
        this.onRoomDelete = (id) => {
            const toDelete = this.stateManager.allConnectedMeetings.find((meeting) => meeting.id === id);
            if (toDelete) {
                this.stateManager.deleteMeeting(id);
                this.draftState = this.stateManager.currentState;
            }
        };
        this.unassignParticipant = (id) => {
            this.stateManager.unassignParticipants([id]);
            this.draftState = this.stateManager.currentState;
        };
        this.onUnassignAll = () => {
            this.stateManager.unassignAllParticipants();
            this.draftState = this.stateManager.currentState;
        };
        this.assignParticipantsToRoom = (destinationMeetingId) => {
            if (this.selectedParticipants.length === 0 || this.assigningParticipants == false)
                return;
            this.stateManager.assignParticipantsToMeeting(this.selectedParticipants, destinationMeetingId);
            this.draftState = this.stateManager.currentState;
            this.selectedParticipants = [];
            this.assigningParticipants = false;
            this.setEphemeralStatus(this.t('breakout_rooms.ephemeral_status.participants_assigned'));
        };
        this.handleClose = (stateUpdate, store) => {
            stateUpdate.emit({
                activeBreakoutRoomsManager: {
                    active: true,
                },
            });
            store.activeBreakoutRoomsManager = {
                active: true,
            };
        };
        this.enableConfirmationModal = (modalType = 'start-breakout') => {
            let activeConfirmationModal = {
                active: true,
                header: 'breakout_rooms.confirm_modal.start_breakout.header',
                content: 'breakout_rooms.confirm_modal.start_breakout.content',
                variant: 'primary',
                cancelText: 'breakout_rooms.confirm_modal.start_breakout.cancelText',
                ctaText: 'breakout_rooms.confirm_modal.start_breakout.ctaText',
                onClick: () => this.applyChanges(),
                onClose: this.handleClose,
            };
            if (modalType === 'close-breakout') {
                activeConfirmationModal = {
                    active: true,
                    header: 'breakout_rooms.confirm_modal.close_breakout.header',
                    content: 'breakout_rooms.confirm_modal.close_breakout.content',
                    variant: 'danger',
                    cancelText: 'cancel',
                    ctaText: 'breakout_rooms.confirm_modal.close_breakout.ctaText',
                    onClick: () => this.closeBreakout(),
                    onClose: this.handleClose,
                };
            }
            this.stateUpdate.emit({
                activeBreakoutRoomsManager: { active: false },
                activeConfirmationModal,
            });
        };
        this.close = () => {
            this.stateManager.discardChanges();
            this.stateUpdate.emit({
                activeBreakoutRoomsManager: {
                    active: false,
                },
            });
        };
        this.applyChanges = async () => {
            this.roomConfig = Object.assign(Object.assign({}, this.roomConfig), { applyingChanges: true });
            await this.stateManager.applyChanges(this.meeting);
            this.close();
            this.roomConfig = Object.assign(Object.assign({}, this.roomConfig), { applyingChanges: false });
        };
    }
    onSelectedParticipantsChanged(participants) {
        if (participants.length > 0)
            this.assigningParticipants = true;
        else
            this.assigningParticipants = false;
    }
    connectedCallback() {
        this.permissionsUpdateListener();
        this.meeting.connectedMeetings.on('stateUpdate', this.updateLocalState);
        this.meeting.connectedMeetings.on('changingMeeting', this.close);
        this.meeting.self.permissions.on('permissionsUpdate', this.permissionsUpdateListener);
        this.stateManager = new uiStore.BreakoutRoomsManager();
        this.fetchRoomState();
    }
    disconnectedCallback() {
        this.meeting.connectedMeetings.off('stateUpdate', this.updateLocalState);
        this.meeting.connectedMeetings.off('changingMeeting', this.close);
        this.meeting.self.permissions.off('permissionsUpdate', this.permissionsUpdateListener);
    }
    async fetchRoomState() {
        this.loading = true;
        await this.meeting.connectedMeetings.getConnectedMeetings();
        this.loading = false;
    }
    setEphemeralStatus(text) {
        this.ephemeralStatusText = text;
        setTimeout(() => {
            this.ephemeralStatusText = '';
        }, 3000);
    }
    onCreateRooms() {
        this.selectedParticipants = [];
        this.stateManager.addNewMeetings(this.roomConfig.rooms);
        this.draftState = this.stateManager.currentState;
        // move to next step -> participants-config
        this.roomConfig = Object.assign(Object.assign({}, this.roomConfig), { step: 'participants-config' });
    }
    onParticipantDelete(event) {
        const { detail } = event;
        const id = uiStore.participantIdentifier(detail);
        if (id == null)
            return;
        this.unassignParticipant(id);
    }
    toggleDragMode(e) {
        this.isDragMode = e.detail;
    }
    assignParticipantsRandomly() {
        if (this.stateManager.unassignedParticipants.length === 0)
            return;
        this.stateManager.assignParticipantsRandomly();
        this.draftState = this.stateManager.currentState;
        this.setEphemeralStatus(this.t('breakout_rooms.ephemeral_status.participants_assigned_randomly'));
    }
    async joinRoom(destinationMeetingId) {
        const participantId = uiStore.participantIdentifier(this.meeting.self);
        this.stateManager.assignParticipantsToMeeting([participantId], destinationMeetingId);
        await this.applyChanges();
    }
    async closeBreakout() {
        this.stateManager.allConnectedMeetings.forEach((meeting) => this.stateManager.deleteMeeting(meeting.id));
        await this.applyChanges();
    }
    updateSelectedParticipants(e) {
        this.selectedParticipants = e.detail;
    }
    updateAllParticipants(e) {
        this.selectedParticipants = e.detail;
    }
    getStatusText() {
        if (this.ephemeralStatusText !== '')
            return this.ephemeralStatusText;
        let statusText = '';
        if (this.roomConfig.mode === 'create') {
            statusText = this.t('breakout_rooms.status.assign_multiple');
            if (this.selectedParticipants.length !== 0) {
                statusText = this.t('breakout_rooms.status.select_room');
            }
        }
        return statusText;
    }
    getApproxDistribution() {
        const num = this.stateManager.unassignedParticipants.length / (this.roomConfig.rooms || MIN_ROOMS);
        return Math.max(MIN_ROOMS, Math.round(num));
    }
    deselectAll() {
        this.selectedParticipants = [];
    }
    async discardChanges() {
        this.stateManager.discardChanges();
        await this.fetchRoomState();
        this.setEphemeralStatus(this.t('breakout_rooms.ephemeral_status.changes_discarded'));
    }
    shouldShowOnlyRoomSwitcher() {
        return this.permissions.canAlterConnectedMeetings === false;
    }
    getPermittedRooms() {
        if (this.permissions.canAlterConnectedMeetings || this.permissions.canSwitchConnectedMeetings) {
            return this.stateManager.allConnectedMeetings;
        }
        return this.stateManager.allConnectedMeetings.filter((cMeeting) => cMeeting.id === this.meeting.meta.meetingId);
    }
    renderMainRoomMaybe() {
        if (!(this.meeting.connectedMeetings.isActive && this.permissions.canSwitchToParentMeeting)) {
            return null;
        }
        return (index$1.h("dyte-breakout-room-manager", { key: this.stateManager.currentState.parentMeeting['id'], assigningParticipants: this.assigningParticipants, isDragMode: this.isDragMode, meeting: this.meeting, mode: this.roomConfig.mode, onParticipantsAdd: () => this.assignParticipantsToRoom(this.stateManager.currentState.parentMeeting['id']), onRoomJoin: () => this.joinRoom(this.stateManager.currentState.parentMeeting['id']), onUpdate: this.onRoomUpdate, states: this.states, room: Object.assign({}, this.stateManager.currentState.parentMeeting), iconPack: this.iconPack, t: this.t }));
    }
    renderRoomSwitcher() {
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "room-switcher-container" }, index$1.h("header", null, index$1.h("dyte-icon", { icon: this.iconPack.breakout_rooms }), index$1.h("span", null, this.t('breakout_rooms.join_breakout_header'))), index$1.h("div", { class: "rooms", ref: (el) => (this.selectorRef = el) }, this.renderMainRoomMaybe(), this.getPermittedRooms().map((room, idx) => {
            return (index$1.h("dyte-breakout-room-manager", { key: room['id'], assigningParticipants: this.assigningParticipants, isDragMode: this.isDragMode, defaultExpanded: idx === 0, meeting: this.meeting, mode: this.roomConfig.mode, onDelete: () => this.onRoomDelete(room['id']), onParticipantsAdd: () => this.assignParticipantsToRoom(room['id']), onRoomJoin: () => this.joinRoom(room['id']), states: this.states, room: Object.assign({}, room), iconPack: this.iconPack, t: this.t, allowDelete: false }));
        })))));
    }
    renderLoading() {
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "loading-content" }, index$1.h("dyte-spinner", { size: "xl" }))));
    }
    renderRoomConfig() {
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "room-config" }, index$1.h("header", null, index$1.h("dyte-icon", { icon: this.iconPack.breakout_rooms }), index$1.h("span", null, this.t('breakout_rooms.room_config_header'))), index$1.h("div", { class: "create-room" }, index$1.h("p", null, this.t('breakout_rooms.num_of_rooms')), index$1.h("dyte-counter", { value: this.roomConfig.rooms, minValue: MIN_ROOMS, iconPack: this.iconPack, t: this.t, onValueChange: (val) => {
                this.roomConfig = Object.assign(Object.assign({}, this.roomConfig), { rooms: Math.max(+val.detail, MIN_ROOMS) });
            } })), index$1.h("span", { class: "distribution-hint" }, `${this.t('breakout_rooms.approx')}${' '}`, ' ', index$1.h("em", null, this.getApproxDistribution(), " ", this.t('breakout_rooms.participants_per_room')), ' ', this.t('breakout_rooms.division_text')), index$1.h("footer", null, index$1.h("dyte-button", { kind: "button", size: "lg", title: this.t('create'), disabled: this.roomConfig.rooms === 0, onClick: () => this.onCreateRooms() }, this.t('create'))))));
    }
    render() {
        if (this.loading) {
            return this.renderLoading();
        }
        if (this.shouldShowOnlyRoomSwitcher()) {
            return this.renderRoomSwitcher();
        }
        if (this.roomConfig.step === 'room-config') {
            return this.renderRoomConfig();
        }
        // participant config
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "participant-config-wrapper" }, index$1.h("div", { class: "participant-config" }, index$1.h("aside", { part: "menu" }, index$1.h("header", null, this.t('breakout_rooms.assign_participants')), index$1.h("dyte-breakout-room-participants", { meeting: this.meeting, iconPack: this.iconPack, t: this.t, participantIds: this.stateManager.unassignedParticipants.map(uiStore.participantIdentifier), selectedParticipantIds: this.selectedParticipants }, index$1.h("dyte-tooltip", { label: this.t('breakout_rooms.shuffle_participants'), slot: "shuffle-button" }, index$1.h("dyte-button", { disabled: this.roomConfig.mode === 'edit' ||
                this.stateManager.unassignedParticipants.length === 0, kind: "button", variant: "secondary", size: "md", onClick: () => this.assignParticipantsRandomly(), class: "shuffle-button br-primary-btn" }, index$1.h("dyte-icon", { icon: this.iconPack.shuffle })))), this.selectedParticipants.length !== 0 && (index$1.h("div", { class: "participants-assign-actions" }, index$1.h("span", null, `${this.selectedParticipants.length} ${this.t('breakout_rooms.selected')}`), index$1.h("dyte-button", { disabled: this.roomConfig.mode === 'edit', kind: "button", variant: "ghost", size: "md", onClick: () => this.deselectAll(), class: "deselect-button color-danger" }, this.t('breakout_rooms.deselect'))))), index$1.h("div", { class: "assign-rooms" }, index$1.h("div", { class: "row" }, index$1.h("p", { class: "row-header" }, this.t('breakout_rooms.rooms'), " (", this.stateManager.allConnectedMeetings.length, ")"), !this.assigningParticipants && (index$1.h("div", { class: "cta-buttons" }, index$1.h("dyte-button", { kind: "button", variant: "secondary", class: "br-primary-btn" }, index$1.h("div", { onClick: this.onAddNewRoom }, index$1.h("dyte-icon", { icon: this.iconPack.add }), this.t('breakout_rooms.add_room'))), this.stateManager.allConnectedMeetings.flatMap((m) => m.participants)
            .length !== 0 && (index$1.h("dyte-button", { kind: "button", variant: "ghost", onClick: this.onUnassignAll }, this.t('breakout_rooms.unassign_all')))))), index$1.h("div", { class: "rooms", ref: (el) => (this.selectorRef = el) }, this.renderMainRoomMaybe(), this.getPermittedRooms().map((room, idx) => {
            return (index$1.h("dyte-breakout-room-manager", { key: room['id'], assigningParticipants: this.assigningParticipants, isDragMode: this.isDragMode, defaultExpanded: idx === 0, meeting: this.meeting, mode: this.roomConfig.mode, onDelete: () => this.onRoomDelete(room['id']), onParticipantsAdd: () => this.assignParticipantsToRoom(room['id']), onRoomJoin: () => this.joinRoom(room['id']), onUpdate: this.onRoomUpdate, states: this.states, room: Object.assign({}, room), iconPack: this.iconPack, t: this.t, allowDelete: this.stateManager.allConnectedMeetings.length > MIN_ROOMS }));
        }), index$1.h("dyte-button", { kind: "button", variant: "secondary", onClick: this.onAddNewRoom, class: "add-room-jumbo-btn br-secondary-btn" }, index$1.h("div", null, index$1.h("dyte-icon", { icon: this.iconPack.add }), index$1.h("span", null, this.t('breakout_rooms.add_room_brief'))))))), index$1.h("div", { class: "participant-config-actions" }, index$1.h("div", { class: { 'status-bar': true, 'ephemeral-status': this.ephemeralStatusText !== '' } }, this.ephemeralStatusText !== '' && index$1.h("dyte-icon", { icon: this.iconPack.checkmark }), this.getStatusText()), index$1.h("div", { class: "breakout-actions" }, this.roomConfig.mode === 'create' && this.permissions.canAlterConnectedMeetings && (index$1.h("dyte-button", { size: "md", class: "start-breakout-button", onClick: () => this.enableConfirmationModal('start-breakout') }, this.t('breakout_rooms.start_breakout'))), this.roomConfig.mode === 'edit' &&
            this.stateManager.hasLocalChanges &&
            this.permissions.canAlterConnectedMeetings && (index$1.h("dyte-button", { size: "md", class: "color-danger", variant: "ghost", onClick: () => this.discardChanges() }, this.t('breakout_rooms.discard_changes'))), this.roomConfig.mode === 'edit' &&
            this.stateManager.hasLocalChanges &&
            this.permissions.canAlterConnectedMeetings && (index$1.h("dyte-button", { size: "md", class: "update-breakout-button", onClick: this.applyChanges }, this.t('breakout_rooms.update_breakout'))), this.roomConfig.mode === 'edit' &&
            !this.stateManager.hasLocalChanges &&
            this.permissions.canAlterConnectedMeetings && (index$1.h("dyte-button", { size: "md", class: "close-breakout-button", onClick: () => this.enableConfirmationModal('close-breakout') }, this.t('breakout_rooms.close_breakout'))))))));
    }
    static get watchers() { return {
        "selectedParticipants": ["onSelectedParticipantsChanged"]
    }; }
};
__decorate$V([
    index.SyncWithStore()
], DyteBreakoutRoomsManager.prototype, "meeting", void 0);
__decorate$V([
    index.SyncWithStore()
], DyteBreakoutRoomsManager.prototype, "states", void 0);
__decorate$V([
    index.SyncWithStore()
], DyteBreakoutRoomsManager.prototype, "iconPack", void 0);
__decorate$V([
    index.SyncWithStore()
], DyteBreakoutRoomsManager.prototype, "t", void 0);
DyteBreakoutRoomsManager.style = DyteBreakoutRoomsManagerStyle0;

const dyteBroadcastMessageModalCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;border-radius:var(--dyte-border-radius-md, 8px);padding:var(--dyte-space-4, 16px);width:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));width:400px;max-width:80%}.content-col{display:flex;width:100%;flex-direction:column}h2{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-2, 8px)}.content-row{display:flex;width:100%;flex-direction:row}.content-row dyte-button{margin-top:var(--dyte-space-4, 16px);width:100%}textarea{margin-top:var(--dyte-space-3, 12px);resize:none;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;font-family:var(--dyte-font-family, sans-serif);outline:2px solid transparent;outline-offset:2px;height:var(--dyte-space-16, 64px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));padding:var(--dyte-space-2, 8px);color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}textarea::-moz-placeholder{color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}textarea::placeholder{color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}select{border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);outline:2px solid transparent;outline-offset:2px;border-right-width:var(--dyte-border-width-md, 2px);border-style:solid;border-color:transparent;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}p{margin:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-2, 8px);width:100%;text-align:center;font-size:14px;--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity));display:flex;flex-direction:row;align-items:center;justify-content:center}p dyte-icon{margin-left:var(--dyte-space-1, 4px);height:var(--dyte-space-5, 20px)}";
const DyteBroadcastMessageModalStyle0 = dyteBroadcastMessageModalCss;

var __decorate$U = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteBroadcastMessageModal = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Broadcast message state */
        this.messagePayload = {
            to: 'Everyone',
            message: '',
        };
        this.successMessage = false;
    }
    close() {
        var _a;
        (_a = this.stateUpdate) === null || _a === void 0 ? void 0 : _a.emit({ activeBroadcastMessageModal: false });
    }
    sendMessage() {
        // TODO:(ishita1805) Send this.messagePayload to webcore.
        this.successMessage = true;
        setTimeout(() => {
            this.close();
        }, 2000);
    }
    render() {
        return (index$1.h(index$1.Host, { key: '942c56592847886706d37d042922de10bc1d9ba2' }, index$1.h("div", { key: '870f1187ffaad036b5bf08d85a2a90c947fe3475', class: "content-col" }, index$1.h("h2", { key: '18764e77a37c5d4f2a8f6fdf7dd877e75d7e6cc1' }, "Broadcast message to"), index$1.h("select", { key: '4ee081d8cc2c06a43b0f3b19d4a65b99ec8a35e4', onChange: (e) => {
                this.messagePayload = Object.assign(Object.assign({}, this.messagePayload), { to: e.target.value });
            } }, index$1.h("option", { key: '37165f1fe83d97ca45a1c52393331601dab36f20' }, "Everyone"), index$1.h("option", { key: '5fb75c26d28b155bd6b410ece1e55552c9a14444' }, "List of rooms")), index$1.h("textarea", { key: '4173fc0b3f7811b99c15cdf4549ba18af8bf0f71', placeholder: "Type message here...", onInput: (e) => {
                this.messagePayload = Object.assign(Object.assign({}, this.messagePayload), { message: e.target.value });
            } }), this.successMessage ? (index$1.h("p", null, "Message sent to ", this.messagePayload.to, index$1.h("dyte-icon", { icon: this.iconPack.checkmark }))) : (index$1.h("div", { class: "content-row" }, index$1.h("dyte-button", { onClick: () => this.close(), variant: "secondary" }, "Cancel"), "\u2002", index$1.h("dyte-button", { variant: "primary", onClick: () => this.sendMessage() }, "Send"))))));
    }
};
__decorate$U([
    index.SyncWithStore()
], DyteBroadcastMessageModal.prototype, "meeting", void 0);
__decorate$U([
    index.SyncWithStore()
], DyteBroadcastMessageModal.prototype, "states", void 0);
__decorate$U([
    index.SyncWithStore()
], DyteBroadcastMessageModal.prototype, "iconPack", void 0);
__decorate$U([
    index.SyncWithStore()
], DyteBroadcastMessageModal.prototype, "t", void 0);
DyteBroadcastMessageModal.style = DyteBroadcastMessageModalStyle0;

const dyteButtonCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{--icon-size:var(--dyte-button-icon-size, var(--dyte-space-5, 20px));--transition-property:var(--dyte-transition-property, all);--transition-duration:100ms;display:inline-flex;height:var(--dyte-space-8, 32px);cursor:pointer;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));font-size:14px;-webkit-user-select:none;-moz-user-select:none;user-select:none;border-radius:var(--dyte-border-radius-sm, 4px);transition-property:var(--transition-property);transition-duration:var(--transition-duration)}button{box-sizing:border-box;background-color:transparent;color:inherit;border:var(--dyte-border-width-sm, 1px) solid transparent;padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);display:inline-flex;flex-grow:1;justify-content:center;vertical-align:baseline;gap:var(--dyte-space-1, 4px);transition-property:var(--transition-property);transition-duration:var(--transition-duration);outline:none;height:inherit;border-radius:inherit;fill:inherit;cursor:inherit;font-weight:inherit;font-family:inherit;font-size:inherit;line-height:inherit}.start,.content,.end{align-self:center}::slotted(dyte-icon),::slotted(dyte-spinner){height:var(--icon-size);width:var(--icon-size)}:host([variant='primary']){color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}:host(:hover){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-600, 13 81 253) / var(--tw-bg-opacity))}button:focus-visible{border-color:rgb(var(--dyte-colors-text-1000, 255 255 255))}:host(:active){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-700, 2 70 253) / var(--tw-bg-opacity))}:host([disabled]:not([disabled='false'])){cursor:not-allowed;opacity:0.6}:host([variant='secondary']){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}:host([variant='secondary']:hover){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}:host([variant='secondary']:active){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}:host([variant='danger']){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-bg-opacity))}:host([variant='danger']:hover){background-color:rgba(var(--dyte-colors-danger, 255 45 45) / 0.7)}:host([variant='danger']:active){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-bg-opacity))}:host([variant='ghost']){background-color:transparent;color:inherit}:host([variant='ghost'].active){--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity))}:host([variant='ghost']:hover){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}:host([variant='ghost']:active){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}:host([kind='icon']){--icon-size:var(--dyte-space-5, 20px);width:var(--dyte-space-8, 32px)}:host([kind='icon']) button{padding-left:var(--dyte-space-0, 0px);padding-right:var(--dyte-space-0, 0px)}:host([kind='wide']){width:100%}:host([size='lg']){--icon-size:var(--dyte-space-5, 20px);height:var(--dyte-space-10, 40px);font-size:16px}:host([size='lg'][kind='icon']){--icon-size:var(--dyte-space-6, 24px);height:var(--dyte-space-10, 40px);width:var(--dyte-space-10, 40px)}:host([size='sm']){--icon-size:var(--dyte-space-4, 16px);height:var(--dyte-space-6, 24px);font-size:12px}:host([size='sm'][kind='icon']){height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}";
const DyteButtonStyle0 = dyteButtonCss;

var __decorate$T = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteButton = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Button variant */
        this.variant = 'primary';
        /** Button type */
        this.kind = 'button';
        /** Whether to reverse order of children */
        this.reverse = false;
        /** Where the button is disabled or not */
        this.disabled = false;
        /** Button type */
        this.type = 'button';
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'b6b2dd78e9e260a8009f6936800e94cee2146826' }, index$1.h("button", { key: 'd607bc0d6e12ba1dcd050691ef7a23636b72ea17', part: "button", type: this.type, disabled: this.disabled }, index$1.h("span", { key: '26166623d5ce0d9f9f23a57ff3793fab736bc90b', class: "start" }, index$1.h("slot", { key: '2c3ee6d68ac313347e4acf8b05af72c492d56d85', name: "start" })), index$1.h("span", { key: 'db86595c8d5763d45301c4a883e9ba3d013ed982', class: "content", part: "content" }, index$1.h("slot", { key: '3b3b5541f807f71779195e9b0e559add82805e6b' })), index$1.h("span", { key: '689b910116fd34150302a05f97d54a02df05431f', class: "end" }, index$1.h("slot", { key: '296ea6a1eec98b235f8ebaaf096acfcac88ffc20', name: "end" })))));
    }
};
__decorate$T([
    index.SyncWithStore()
], DyteButton.prototype, "size", void 0);
DyteButton.style = DyteButtonStyle0;

const dyteCameraSelectorCss = ".dyte-select{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.dyte-select:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dyte-select{display:block;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:var(--dyte-space-3, 12px);font-size:16px;--icon-size:var(--dyte-select-chevron-size, var(--dyte-space-6, 24px));--icon-right-position:var(--dyte-select-chevron-right-position, var(--dyte-space-2, 8px));background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");background-position:right var(--icon-right-position) center;background-repeat:no-repeat;background-size:var(--icon-size) var(--icon-size);padding-right:calc(var(--icon-right-position) * 5);width:100%;max-width:100%;text-overflow:ellipsis}.inline .dyte-select{margin-top:var(--dyte-space-1, 4px);width:100%;padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-8, 32px);font-size:14px}.row{margin-bottom:var(--dyte-space-2, 8px);display:flex;width:100%;align-items:center;justify-content:space-between;gap:var(--dyte-space-3, 12px)}.group{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px)}.group>*{margin-bottom:var(--dyte-space-2, 8px)}.group>*:last-child{margin-bottom:var(--dyte-space-0, 0px)}.group select{flex:1 1 0%}.group{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0, 0px)}.group>*{margin-bottom:var(--dyte-space-0, 0px)}label{display:flex;-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center;gap:var(--dyte-space-1, 4px);font-size:14px}.inline.container{display:flex;align-items:center;justify-content:flex-start;gap:var(--dyte-space-2, 8px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}";
const DyteCameraSelectorStyle0 = dyteCameraSelectorCss;

var __decorate$S = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteCameraSelector = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** variant */
        this.variant = 'full';
        /** Language */
        this.t = uiStore.useLanguage();
        this.videoDevices = [];
        this.canProduceVideo = true;
        this.stageStateListener = () => {
            this.canProduceVideo = this.meeting.self.permissions.canProduceVideo === 'ALLOWED';
        };
        this.deviceListUpdateListener = ({ devices }) => {
            this.videoDevices = devices.filter((device) => device.kind === 'videoinput');
        };
        this.deviceUpdateListener = ({ device }) => {
            if (device.kind !== 'videoinput')
                return;
            this.currentDevice = device;
        };
        this.mediaPermissionUpdateListener = async ({ kind, message }) => {
            if (!this.meeting)
                return;
            if (kind === 'video' && message === 'ACCEPTED') {
                this.videoDevices = await this.meeting.self.getVideoDevices();
            }
        };
    }
    meetingChanged(meeting) {
        var _a, _b, _c;
        if (meeting == null)
            return;
        (_a = meeting.self) === null || _a === void 0 ? void 0 : _a.addListener('deviceListUpdate', this.deviceListUpdateListener);
        (_b = meeting.self) === null || _b === void 0 ? void 0 : _b.addListener('deviceUpdate', this.deviceUpdateListener);
        (_c = meeting.self) === null || _c === void 0 ? void 0 : _c.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
        index$1.writeTask(async () => {
            var _a, _b;
            const videoDevices = await meeting.self.getVideoDevices();
            const currentVideoDevice = (_a = meeting.self.getCurrentDevices()) === null || _a === void 0 ? void 0 : _a.video;
            //  NOTE(callmetarush): Setting current video device to show on top of list
            if (currentVideoDevice != undefined) {
                this.videoDevices = [
                    (_b = videoDevices.find((device) => device.deviceId === currentVideoDevice.deviceId)) !== null && _b !== void 0 ? _b : currentVideoDevice,
                    ...videoDevices.filter((device) => device.deviceId !== currentVideoDevice.deviceId),
                ];
            }
            else {
                this.videoDevices = videoDevices;
            }
        });
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a, _b, _c, _d, _e;
        (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.removeListener('stageStatusUpdate', this.stageStateListener);
        (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self.removeListener('deviceListUpdate', this.deviceListUpdateListener);
        (_d = this.meeting) === null || _d === void 0 ? void 0 : _d.self.removeListener('deviceUpdate', this.deviceUpdateListener);
        (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
    }
    async setDevice(deviceId) {
        var _a;
        const device = this.videoDevices.find((d) => d.deviceId === deviceId);
        this.currentDevice = device;
        if (device != null) {
            await ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.setDevice(device));
        }
    }
    render() {
        if (this.meeting == null)
            return null;
        let unnamedVideoCount = 0;
        return (index$1.h(index$1.Host, null, this.canProduceVideo && (index$1.h("div", { class: 'group container ' + this.variant, part: "camera-selection" }, index$1.h("label", null, this.variant !== 'inline' && this.t('camera'), index$1.h("dyte-icon", { icon: this.iconPack.video_on, size: "sm" })), index$1.h("div", { class: "row" }, index$1.h("select", { class: "dyte-select", onChange: (e) => this.setDevice(e.target.value) }, this.videoDevices.map(({ deviceId, label }) => {
            var _a;
            return (index$1.h("option", { selected: ((_a = this.currentDevice) === null || _a === void 0 ? void 0 : _a.deviceId) === deviceId, value: deviceId }, label || `Camera ${++unnamedVideoCount}`));
        })))))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$S([
    index.SyncWithStore()
], DyteCameraSelector.prototype, "meeting", void 0);
__decorate$S([
    index.SyncWithStore()
], DyteCameraSelector.prototype, "size", void 0);
__decorate$S([
    index.SyncWithStore()
], DyteCameraSelector.prototype, "iconPack", void 0);
__decorate$S([
    index.SyncWithStore()
], DyteCameraSelector.prototype, "t", void 0);
DyteCameraSelector.style = DyteCameraSelectorStyle0;

const dyteChannelCreatorCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));display:flex;flex-direction:column;width:var(--dyte-space-96, 384px);padding-left:var(--dyte-space-9, 36px);padding-right:var(--dyte-space-9, 36px);padding-top:var(--dyte-space-10, 40px);padding-bottom:var(--dyte-space-10, 40px)}header{margin-bottom:var(--dyte-space-8, 32px);display:flex;align-items:center;gap:var(--dyte-space-2, 8px);font-size:24px;font-weight:600}.channel-name-input{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;padding:var(--dyte-space-3, 12px);font-size:16px;-webkit-appearance:none;-moz-appearance:none;appearance:none;line-height:1.25;outline:2px solid transparent;outline-offset:2px}.channel-name-input:focus{outline-width:2px;outline-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / 0.5)}footer{margin-top:var(--dyte-space-5, 20px);display:flex;justify-content:flex-end}.member{display:flex;align-items:center;gap:var(--dyte-space-1, 4px);padding:var(--dyte-space-2, 8px)}.member dyte-avatar{height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);font-size:14px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.input-container{position:relative;-webkit-appearance:none;-moz-appearance:none;appearance:none;line-height:1.25;outline:2px solid transparent;outline-offset:2px;outline-width:2px;outline-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / 0.5);border-radius:var(--dyte-border-radius-sm, 4px)}.input-container .members{margin:var(--dyte-space-0, 0px);max-height:var(--dyte-space-28, 112px);border-radius:var(--dyte-border-radius-sm, 4px);padding:var(--dyte-space-2, 8px);list-style-type:none;display:flex;flex-wrap:wrap;gap:var(--dyte-space-1, 4px);cursor:text;font-size:16px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));overflow-y:auto;min-height:var(--dyte-space-7, 28px)}.input-container .pill{display:flex;align-items:center;gap:var(--dyte-space-1, 4px);border-radius:var(--dyte-border-radius-sm, 4px);padding:var(--dyte-space-2, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.input-container .pill dyte-avatar{height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);font-size:14px;color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.input-container .pill span{max-width:var(--dyte-space-32, 128px);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.input-container .pill dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);cursor:pointer}.input-container input{width:var(--dyte-space-24, 96px);border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;padding:var(--dyte-space-1, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));outline:2px solid transparent;outline-offset:2px;font-size:16px;line-height:1.25rem}.input-container input.wide-input{width:100%}.search-results{margin:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-1, 4px);max-height:var(--dyte-space-28, 112px);width:100%;padding:var(--dyte-space-0, 0px);position:absolute;list-style-type:none;overflow-y:auto;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));border-radius:var(--dyte-border-radius-md, 8px);--tw-border-spacing-x:var(--dyte-space-2, 8px);--tw-border-spacing-y:var(--dyte-space-2, 8px);border-spacing:var(--tw-border-spacing-x) var(--tw-border-spacing-y);border-style:solid;border-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / 0.5)}.search-results .member{cursor:pointer}.search-results .member dyte-avatar{color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.search-results .member:hover,.search-results .member.selected{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-700, 2 70 253) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}";
const DyteChannelCreatorStyle0 = dyteChannelCreatorCss;

var __decorate$R = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChannelCreator = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.switchChannel = index$1.createEvent(this, "switchChannel", 7);
        /** Language */
        this.t = uiStore.useLanguage();
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        this.channelName = '';
        this.searchQuery = '';
        this.step = 1;
        this.loading = false;
        this.selectedMemberIds = new Set();
        this.focusedMemberIndex = -1;
        this.showAllMembersList = false;
        this.allMembers = new Map();
        this.inputTextRef = null;
        this.searchInputTextRef = null;
        this.focusOnSearch = (selectText = false) => {
            this.focusedMemberIndex = -1;
            index$1.writeTask(() => {
                var _a, _b;
                (_a = this.searchInputTextRef) === null || _a === void 0 ? void 0 : _a.focus();
                if (selectText)
                    (_b = this.searchInputTextRef) === null || _b === void 0 ? void 0 : _b.select();
            });
        };
        this.onClickHandler = async () => {
            if (this.channelName.length === 0)
                return;
            if (this.step === 1) {
                const members = this.meeting.participants.all.toArray();
                const selfId = this.meeting.self.userId;
                const nonSelfMembers = members.filter((member) => member.userId !== selfId);
                nonSelfMembers.forEach((member) => this.allMembers.set(member.userId, member));
                this.step = 2;
                this.focusOnSearch();
                return;
            }
            // step 2 - add members and create channel
            await this.createChannel();
        };
        this.createChannel = async () => {
            const members = Array.from(this.selectedMemberIds);
            const newChannel = await this.meeting.chat.createChannel(this.channelName, members, {
                displayPictureUrl: '',
                visibility: 'public',
                isDirectMessage: false,
            });
            this.switchChannel.emit(newChannel.id);
            this.stateUpdate.emit({ activeChannelCreator: false });
        };
        this.onMemberAdd = (id) => {
            this.showAllMembersList = false;
            this.selectedMemberIds.add(id);
            this.searchQuery = '';
            this.focusOnSearch();
        };
        this.keyDownHandler = (e, filteredMembers) => {
            if (e.key === 'ArrowDown') {
                this.focusedMemberIndex = Math.min(this.focusedMemberIndex + 1, filteredMembers.length - 1);
            }
            else if (e.key === 'ArrowUp') {
                if (this.focusedMemberIndex === -1)
                    return;
                if (this.focusedMemberIndex === 0) {
                    this.focusOnSearch(true);
                    return;
                }
                this.focusedMemberIndex = Math.max(this.focusedMemberIndex - 1, 0);
            }
            else if (e.key === 'Enter') {
                this.onMemberAdd(filteredMembers[this.focusedMemberIndex].userId);
            }
            else if (e.key === 'Backspace') {
                if (this.searchQuery.length !== 0)
                    return;
                if (this.selectedMemberIds.size === 0)
                    return;
                const lastMemberId = Array.from(this.selectedMemberIds.values()).at(-1);
                this.selectedMemberIds.delete(lastMemberId);
                index$1.forceUpdate(this.$el);
            }
        };
        this.renderMemberSelector = () => {
            const filteredMembers = Array.from(this.allMembers.values()).filter((member) => !this.selectedMemberIds.has(member.userId) &&
                member.name.toLowerCase().includes(this.searchQuery.toLowerCase()));
            const selectedMembers = Array.from(this.selectedMemberIds.values()).map((id) => this.allMembers.get(id));
            const disableInput = this.selectedMemberIds.size === this.allMembers.size;
            return (index$1.h("div", { class: "input-container" }, index$1.h("ul", { class: "members scrollbar", onClick: () => {
                    var _a;
                    (_a = this.searchInputTextRef) === null || _a === void 0 ? void 0 : _a.focus();
                } }, selectedMembers.map((member) => (index$1.h("li", { class: "pill" }, index$1.h("dyte-avatar", { participant: {
                    name: member.name,
                    picture: member.picture,
                }, size: "sm" }), index$1.h("span", null, member.name), index$1.h("dyte-icon", { icon: this.iconPack.dismiss, onClick: () => {
                    this.selectedMemberIds.delete(member.userId);
                    index$1.forceUpdate(this.$el);
                    this.focusOnSearch();
                } })))), !disableInput && (index$1.h("input", { type: "text", ref: (el) => (this.searchInputTextRef = el), value: this.searchQuery, placeholder: this.selectedMemberIds.size === 0 ? this.t('chat.member_name') : '', class: {
                    'wide-input': this.selectedMemberIds.size === 0,
                }, onInput: (e) => {
                    this.searchQuery = e.target.value.trim();
                }, onClick: () => {
                    this.showAllMembersList = !this.showAllMembersList;
                }, onKeyDown: (e) => this.keyDownHandler(e, filteredMembers) }))), (this.searchQuery.length !== 0 || this.showAllMembersList) && (index$1.h("ul", { class: "search-results" }, filteredMembers.map((member, index) => (index$1.h("li", { class: { member: true, selected: index === this.focusedMemberIndex }, onClick: () => this.onMemberAdd(member.userId), ref: ($li) => {
                    if (index === this.focusedMemberIndex) {
                        index$1.writeTask(() => {
                            if ($li)
                                $li.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'nearest' });
                        });
                    }
                } }, index$1.h("dyte-avatar", { participant: {
                    name: member.name,
                    picture: member.picture,
                }, size: "sm" }), index$1.h("span", null, member.name)))), filteredMembers.length === 0 && (index$1.h("li", { class: "member" }, index$1.h("span", null, this.t('chat.error.empty_results'))))))));
        };
    }
    componentDidLoad() {
        var _a;
        (_a = this.inputTextRef) === null || _a === void 0 ? void 0 : _a.focus();
    }
    render() {
        return (index$1.h(index$1.Host, { key: '4c1ae6e4b774e23f4a594a8471975bc67978c5ed' }, index$1.h("header", { key: 'fc502cce45ea3d03814aadbf683b934866e2f1f0' }, this.step === 1 ? this.t('chat.new_channel') : this.t('chat.add_members')), this.step === 1 && (index$1.h("input", { key: '5ed3f19504ea6d2393a0ad9edb51d930a1a53c98', class: "channel-name-input", type: "text", placeholder: this.t('chat.channel_name'), ref: (el) => (this.inputTextRef = el), onInput: (e) => {
                this.channelName = e.target.value.trim();
            } })), this.step === 2 && this.renderMemberSelector(), index$1.h("footer", { key: '5d671033919ef077b067098abffb93ca41cc9736' }, index$1.h("dyte-button", { key: 'c9016f42e4ca922ca6dbd2f35ab10be972bdd0b5', kind: "button", size: "lg", disabled: this.channelName.length === 0, onClick: this.onClickHandler }, this.step === 1 ? this.t('chat.add_members') : this.t('create')))));
    }
    get $el() { return index$1.getElement(this); }
};
__decorate$R([
    index.SyncWithStore()
], DyteChannelCreator.prototype, "meeting", void 0);
__decorate$R([
    index.SyncWithStore()
], DyteChannelCreator.prototype, "t", void 0);
__decorate$R([
    index.SyncWithStore()
], DyteChannelCreator.prototype, "iconPack", void 0);
DyteChannelCreator.style = DyteChannelCreatorStyle0;

const dyteChannelDetailsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));display:flex;flex-direction:column;width:var(--dyte-space-72, 288px);padding-top:var(--dyte-space-5, 20px);padding-bottom:var(--dyte-space-5, 20px);padding-left:var(--dyte-space-8, 32px);padding-right:var(--dyte-space-8, 32px)}header{font-size:20px}dyte-spinner{margin-top:var(--dyte-space-10, 40px);margin-bottom:var(--dyte-space-10, 40px);margin-left:auto;margin-right:auto}ul{margin-left:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-6, 24px);margin-bottom:var(--dyte-space-4, 16px);height:var(--dyte-space-48, 192px);padding:var(--dyte-space-0, 0px);overflow-y:auto;list-style-type:none;display:flex;flex-direction:column;gap:var(--dyte-space-2, 8px)}ul li{margin-right:var(--dyte-space-2, 8px);display:flex;align-items:center;gap:var(--dyte-space-2, 8px);padding:var(--dyte-space-2, 8px);cursor:pointer;border-radius:var(--dyte-border-radius-sm, 4px)}ul li:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}ul li dyte-avatar{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px);font-size:14px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}";
const DyteChannelDetailsStyle0 = dyteChannelDetailsCss;

var __decorate$Q = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChannelDetails = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Language */
        this.t = uiStore.useLanguage();
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** List of channel members */
        this.members = [];
    }
    renderMembers() {
        return (index$1.h("ul", { class: "scrollbar" }, this.members.map((member) => {
            return (index$1.h("li", null, index$1.h("dyte-avatar", { participant: { name: member.name, picture: member.picture }, size: "sm" }), index$1.h("span", null, member.name)));
        })));
    }
    render() {
        return (index$1.h(index$1.Host, { key: '7dc9ef6f5d052016ccb53bf943ef1ca26dd36e62' }, index$1.h("header", { key: 'c113e7cd4271301e032d364954938e3f73f999dd' }, this.t('chat.channel_members')), this.renderMembers()));
    }
};
__decorate$Q([
    index.SyncWithStore()
], DyteChannelDetails.prototype, "t", void 0);
__decorate$Q([
    index.SyncWithStore()
], DyteChannelDetails.prototype, "iconPack", void 0);
DyteChannelDetails.style = DyteChannelDetailsStyle0;

const dyteChannelHeaderCss = "header{box-sizing:border-box;height:var(--dyte-space-16, 64px);width:100%;padding:var(--dyte-space-4, 16px);display:flex;justify-content:space-between;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));border-left-width:var(--dyte-border-width-none, 0);border-right-width:var(--dyte-border-width-none, 0);border-bottom-width:var(--dyte-border-width-sm, 1px);border-top-width:var(--dyte-border-width-none, 0);border-style:solid;--tw-border-opacity:1;border-bottom-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-border-opacity))}header.searching{justify-content:flex-end}header.searching .channel-details{display:none}header .channel-details{display:flex;flex-grow:1;flex-direction:column;justify-content:center;height:var(--dyte-space-9, 36px);width:var(--dyte-space-1, 4px)}header .channel-details .name{font-weight:500}header .channel-details .members{margin-top:var(--dyte-space-0\\.5, 2px);overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-size:12px;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}header .channel-tools{display:flex;flex-shrink:0;justify-content:flex-end;gap:var(--dyte-space-1, 4px);min-width:var(--dyte-space-24, 96px)}header .channel-tools dyte-tooltip{height:var(--dyte-space-8, 32px);width:var(--dyte-space-10, 40px);display:flex}header .search-input{height:var(--dyte-space-8, 32px);width:var(--dyte-space-48, 192px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);border-width:var(--dyte-border-width-none, 0);border-style:none;outline:2px solid transparent;outline-offset:2px;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}header .name{font-size:16px}header .br-primary-btn{background-color:transparent}header .br-primary-btn:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}@media (orientation: landscape) and (min-width: 400px){header.searching .channel-details{display:flex}}.back-btn{margin-right:var(--dyte-space-3, 12px)}";
const DyteChannelHeaderStyle0 = dyteChannelHeaderCss;

var __decorate$P = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChannelHeader = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.search = index$1.createEvent(this, "search", 7);
        this.searchDismissed = index$1.createEvent(this, "searchDismissed", 7);
        this.back = index$1.createEvent(this, "back", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.showChannelDetailsDialog = false;
        this.showSearchBar = false;
        this.members = [];
        /** Show back button */
        this.showBackButton = false;
    }
    onChannelChanged() {
        if (this.$searchInput)
            this.$searchInput.value = '';
        this.showSearchBar = false;
        if (!this.channel.isDirectMessage) {
            this.meeting.chat.getChannelMembers(this.channel.id).then((members) => {
                this.members = members;
            });
        }
    }
    connectedCallback() {
        this.onChannelChanged();
    }
    renderChannelDetails() {
        return (index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => {
                this.showChannelDetailsDialog = false;
            }, iconPack: this.iconPack, t: this.t }, index$1.h("dyte-channel-details", { members: this.members, channel: this.channel })));
    }
    render() {
        if (!this.channel) {
            return null;
        }
        return (index$1.h(index$1.Host, null, this.showChannelDetailsDialog && this.renderChannelDetails(), index$1.h("header", { class: {
                searching: this.showSearchBar,
            } }, this.showBackButton && (index$1.h("dyte-button", { kind: "icon", variant: "secondary", class: "back-btn", onClick: () => {
                this.back.emit();
            } }, index$1.h("dyte-icon", { icon: this.iconPack.chevron_left }))), index$1.h("div", { class: "channel-details" }, index$1.h("span", { class: "name" }, this.channel.displayName), !this.channel.isDirectMessage && (index$1.h("span", { class: "members" }, this.members.map((member) => member.name).join(', ')))), index$1.h("div", { class: "channel-tools" }, !this.channel.isDirectMessage && (index$1.h("dyte-tooltip", { label: this.t('chat.channel_members'), variant: "primary" }, index$1.h("dyte-button", { kind: "button", variant: "secondary", size: "md", onClick: () => {
                this.showChannelDetailsDialog = !this.showChannelDetailsDialog;
            }, class: "br-primary-btn" }, index$1.h("dyte-icon", { icon: this.iconPack.people }))))))));
    }
    static get watchers() { return {
        "channel": ["onChannelChanged"]
    }; }
};
__decorate$P([
    index.SyncWithStore()
], DyteChannelHeader.prototype, "meeting", void 0);
__decorate$P([
    index.SyncWithStore()
], DyteChannelHeader.prototype, "iconPack", void 0);
__decorate$P([
    index.SyncWithStore()
], DyteChannelHeader.prototype, "t", void 0);
DyteChannelHeader.style = DyteChannelHeaderStyle0;

const dyteChannelSelectorViewCss = ".scrollbar {\n  /* For Firefox */\n  scrollbar-width: thin;\n  scrollbar-color: var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent);\n}\n\n/* For WebKit */\n.scrollbar::-webkit-scrollbar {\n  height: var(--dyte-space-1\\.5, 6px);\n  width: var(--dyte-space-1\\.5, 6px);\n  border-radius: 9999px;\n  background-color: var(--dyte-scrollbar-background, transparent);\n}\n\n.scrollbar::-webkit-scrollbar-thumb {\n  border-radius: 9999px;\n  background-color: var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)));\n}\n\n\n:host {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));\n  position: relative;\n  z-index: 10;\n  height: var(--dyte-space-12, 48px);\n  min-height: 48px;\n}\n\n.dropdown-trigger {\n  height: 100%;\n  width: 100%;\n  border-width: var(--dyte-border-width-none, 0);\n  border-style: none;\n  padding: var(--dyte-space-4, 16px);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));\n  font-size: 14px;\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n  cursor: pointer;\n  position: absolute;\n  z-index: 20;\n}\n\n.dropdown-trigger span {\n  display: flex;\n  flex: 1 1 0%;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.dropdown-trigger dyte-icon {\n  margin-left: var(--dyte-space-1, 4px);\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  flex-shrink: 0;\n}\n\n@container chatcontainer (height < 360px) {\n  .dropdown-trigger {\n    padding: var(--dyte-space-2, 8px);\n  }\n  .dropdown {\n    top: var(--dyte-space-8, 32px) !important;\n  }\n  .search-container {\n    padding-left: var(--dyte-space-0, 0px) !important;\n    padding-right: var(--dyte-space-0, 0px) !important;\n    padding-top: var(--dyte-space-0, 0px) !important;\n    padding-bottom: var(--dyte-space-0, 0px) !important;\n  }\n  input {\n    height: var(--dyte-space-8, 32px) !important;\n    border-radius: var(--dyte-border-radius-none, 0) !important;\n  }\n  .channel {\n    height: var(--dyte-space-8, 32px) !important;\n    border-radius: var(--dyte-border-radius-sm, 4px) !important;\n  }\n  .avatar-icon {\n    height: var(--dyte-space-3, 12px) !important;\n    width: var(--dyte-space-3, 12px) !important;\n    padding: var(--dyte-space-1, 4px) !important;\n  }\n\n  dyte-avatar {\n    height: var(--dyte-space-5, 20px) !important;\n    width: var(--dyte-space-5, 20px) !important;\n  }\n}\n\n.dropdown {\n  position: absolute;\n  width: 100%;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));\n  top: var(--dyte-space-12, 48px);\n  z-index: 10;\n  animation: 0.3s slide-down ease;\n}\n\n.dropdown .channels-container {\n  max-height: var(--dyte-space-80, 320px);\n}\n\n.list {\n  display: flex;\n  flex-direction: column;\n}\n\n.list .channel .channel-data {\n  align-items: flex-start;\n}\n\n.unread-count {\n  display: flex;\n  justify-content: center;\n  height: var(--dyte-space-5, 20px);\n  min-width: var(--dyte-space-3, 12px);\n  border-radius: 9999px;\n  padding-left: var(--dyte-space-1, 4px);\n  padding-right: var(--dyte-space-1, 4px);\n  font-size: 12px;\n  line-height: 1.25rem;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));\n}\n\ninput {\n  height: var(--dyte-space-9, 36px);\n  width: 100%;\n  padding-left: var(--dyte-space-3, 12px);\n  padding-right: var(--dyte-space-3, 12px);\n  box-sizing: border-box;\n  border-width: var(--dyte-border-width-none, 0);\n  border-style: none;\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  border-radius: var(--dyte-border-radius-sm, 4px);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n}\n\n.search-container {\n  display: flex;\n  flex-shrink: 0;\n  flex-grow: 0;\n  flex-basis: auto;\n  align-items: center;\n  padding-top: var(--dyte-space-3, 12px);\n  padding-bottom: var(--dyte-space-3, 12px);\n  padding-left: var(--dyte-space-2, 8px);\n  padding-right: var(--dyte-space-2, 8px);\n  border-bottom: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-700, 44 44 44));\n}\n\n.search-container dyte-icon {\n  margin-left: calc(var(--dyte-space-8, 32px) * -1);\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  color: rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76));\n}\n\n.channels-container {\n  display: flex;\n  flex-direction: column;\n  gap: var(--dyte-space-1, 4px);\n  padding: var(--dyte-space-2, 8px);\n  flex: 1 1 auto;\n  overflow-y: auto;\n}\n\n.channel {\n  flex-shrink: 0;\n  box-sizing: border-box;\n  border-width: var(--dyte-border-width-none, 0);\n  border-style: none;\n  background-color: transparent;\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  cursor: pointer;\n  border-radius: var(--dyte-border-radius-md, 8px);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: var(--dyte-space-2, 8px);\n  height: var(--dyte-space-16, 64px);\n  width: 100%;\n  padding-left: var(--dyte-space-2, 8px);\n  padding-right: var(--dyte-space-3, 12px);\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n.channel:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));\n}\n\n.channel .channel-data {\n  flex: 1 1 0%;\n  align-items: center;\n  justify-content: space-between;\n  display: flex;\n  gap: var(--dyte-space-2, 8px);\n}\n\n.channel .name {\n  font-size: 16px;\n}\n\n.channel .name, \n  .channel .last-message {\n  max-width: var(--dyte-space-40, 160px);\n  text-align: left;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n\n.channel .no-message {\n  font-style: italic;\n}\n\n.channel dyte-avatar {\n  height: var(--dyte-space-12, 48px);\n  width: var(--dyte-space-12, 48px);\n  overflow: clip;\n  border-radius: 9999px;\n  font-size: 14px;\n}\n\n.channel .avatar-icon {\n  height: var(--dyte-space-6, 24px);\n  width: var(--dyte-space-6, 24px);\n  padding: var(--dyte-space-3, 12px);\n  color: rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));\n  overflow: clip;\n  border-radius: 9999px;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));\n}\n\n.channel time, \n  .channel .last-message {\n  font-size: 12px;\n  color: rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76));\n}\n\n.channel.active {\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));\n}\n\n.channel.active .unread-count {\n  background-color: rgb(var(--dyte-colors-text-on-brand-800, var(--dyte-colors-text-800, 255 255 255 / 0.76)));\n  --tw-text-opacity: 1;\n  color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity));\n}\n\n.channel.active time {\n  color: rgb(var(--dyte-colors-text-on-brand-800, var(--dyte-colors-text-800, 255 255 255 / 0.76)));\n}\n\n.channel.active .last-message {\n  color: rgb(var(--dyte-colors-text-on-brand-700, var(--dyte-colors-text-700, 255 255 255 / 0.64)));\n}\n\n.channel.active dyte-avatar {\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));\n}\n\n.col {\n  gap: var(--dyte-space-1, 4px);\n  display: flex;\n  flex-direction: column;\n}\n\n.channel-meta {\n  flex-shrink: 0;\n  align-items: flex-end;\n}\n\n@keyframes slide-down {\n  from {\n    transform: translateY(-50px);\n  }\n  to {\n    transform: translateY(0%);\n  }\n}\n";
const DyteChannelSelectorViewStyle0 = dyteChannelSelectorViewCss;

var __decorate$O = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChannelSelectorView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.channelChange = index$1.createEvent(this, "channelChange", 7);
        /** Disables search bar (default = false) */
        this.disableSearch = false;
        /** Hides avatar (default = false) */
        this.hideAvatar = false;
        /** Icon Pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Render as dropdown or list (default = list) */
        this.viewAs = 'list';
        this.searchQuery = '';
        this.showDropdown = false;
        this.calculateListHeight = debounce.debounce(() => {
            if (this.viewAs === 'list' && this.$listEl) {
                let height = 0;
                const slotEl = this.$el.shadowRoot.querySelector('slot[name="header"]');
                if (slotEl) {
                    slotEl.assignedElements().forEach((e) => (height += e.offsetHeight));
                }
                if (this.$searchEl) {
                    height += this.$searchEl.offsetHeight;
                }
                this.$listEl.style.height = `${window.innerHeight - height - 16}px`;
            }
        }, 60);
        this.getFilteredChannels = () => {
            if (this.searchQuery.trim() === '') {
                return this.channels;
            }
            return this.channels.filter((channel) => {
                return channel['name'].toLowerCase().includes(this.searchQuery.toLowerCase());
            });
        };
        this.toggleDropdown = () => {
            this.showDropdown = !this.showDropdown;
        };
        this.getChannelById = (id) => {
            return this.channels.find((channel) => channel.id === id);
        };
        this.getTotalUnreads = () => {
            return this.channels.reduce((acc, curr) => {
                return acc + curr.unreadCount;
            }, 0);
        };
        this.onChannelClickHandler = (channel) => {
            this.channelChange.emit(channel);
            if (this.viewAs === 'dropdown') {
                this.showDropdown = false;
            }
        };
    }
    connectedCallback() {
        this.resizeObserver = new ResizeObserver(this.calculateListHeight);
    }
    componentDidLoad() {
        this.resizeObserver.observe(this.$el);
        this.calculateListHeight();
    }
    disconnectedCallback() {
        var _a;
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        this.calculateListHeight.cancel();
    }
    getTimeLabel(messageDate) {
        const today = new Date();
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);
        const firstDayOfWeek = new Date(today);
        firstDayOfWeek.setDate(today.getDate() - today.getDay() - 1);
        if (messageDate.toDateString() === today.toDateString()) {
            return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }
        else if (messageDate.toDateString() === yesterday.toDateString()) {
            return this.t('date.yesteday');
        }
        else if (messageDate > firstDayOfWeek) {
            const weekdays = [
                'date.sunday',
                'date.monday',
                'date.tuesday',
                'date.wednesday',
                'date.thursday',
                'date.friday',
                'date.saturday',
            ];
            return this.t(weekdays[messageDate.getDay()]);
        }
        else {
            return Intl.DateTimeFormat([], {
                day: '2-digit',
                month: '2-digit',
                year: '2-digit',
            }).format(messageDate);
        }
    }
    render() {
        const filteredChannels = this.getFilteredChannels();
        const shouldShowDropdown = this.viewAs === 'list' || (this.viewAs === 'dropdown' && this.showDropdown);
        return (index$1.h(index$1.Host, { key: 'ade72de18b78275705bb0b39f9923977b8ef479e' }, this.viewAs === 'list' && index$1.h("slot", { key: '879f77f7f57896e2ef37ba1abfede94bbdd66b8c', name: "header" }), shouldShowDropdown && (index$1.h("div", { key: 'a0d9818c26533cf1a65ec70cb385d6ac33ad6c6f', class: {
                dropdown: this.viewAs === 'dropdown',
                scrollbar: this.viewAs === 'dropdown',
                list: this.viewAs === 'list',
            } }, !this.disableSearch && (index$1.h("div", { key: '428ca579360c29a390084c8f1969091c6b904a5a', class: "search-container", ref: (el) => (this.$searchEl = el) }, index$1.h("input", { key: '255cbcd3cda43fd2fd8bd3a65cda1f6271476fb9', type: "text", placeholder: this.t('chat.search_conversations'), value: this.searchQuery, onInput: (e) => (this.searchQuery = e.target.value) }), index$1.h("dyte-icon", { key: 'e85c4413dcd97df62fc96cf23aab4c0ef7276d79', icon: this.iconPack.search }))), index$1.h("div", { key: 'a09eb0f58d6341be68cfc52832e84048f11946be', class: "channels-container scrollbar", ref: (el) => (this.$listEl = el) }, filteredChannels.map((channel) => {
            return (index$1.h("button", { class: { channel: true, active: this.selectedChannelId === channel.id }, onClick: () => this.onChannelClickHandler(channel) }, !this.hideAvatar && (index$1.h("div", null, channel.icon ? (index$1.h("dyte-icon", { class: "avatar-icon", icon: this.iconPack[channel.icon] })) : (index$1.h("dyte-avatar", { participant: {
                    name: channel.name,
                    picture: channel.avatarUrl,
                } })))), index$1.h("div", { class: "channel-data" }, index$1.h("div", { class: "col" }, index$1.h("div", { class: "name" }, channel.name), channel.latestMessage && (index$1.h("div", { class: {
                    'last-message': true,
                    'no-message': !channel.latestMessage,
                } }, index$1.h("dyte-text-message-view", { isMarkdown: true, text: channel.latestMessage })))), index$1.h("div", { class: "col channel-meta" }, channel.latestMessageTime && (index$1.h("time", { class: "time" }, this.getTimeLabel(channel.latestMessageTime))), channel.unreadCount > 0 && (index$1.h("div", { class: "unread-count" }, channel.unreadCount))))));
        })))), this.viewAs === 'dropdown' && (index$1.h("button", { key: 'af78d56510b62beeee9e17162a0fbe5a75b0b1af', class: "dropdown-trigger", onClick: this.toggleDropdown }, index$1.h("span", { key: '10c170707e3c084d4a0a1a322128f6e685c075ed' }, this.selectedChannelId &&
            `${this.t('to')} ${this.getChannelById(this.selectedChannelId).name}`, this.getTotalUnreads() > 0 && (index$1.h("div", { key: 'b45263bedbb36f6b25cb595067a2418a110e9e45', class: "unread-count" }, this.getTotalUnreads()))), index$1.h("dyte-icon", { key: 'ca61473ab2f859378fea75468dbf194a137ceba0', icon: this.showDropdown ? this.iconPack.chevron_up : this.iconPack.chevron_down })))));
    }
    get $el() { return index$1.getElement(this); }
};
__decorate$O([
    index.SyncWithStore()
], DyteChannelSelectorView.prototype, "iconPack", void 0);
__decorate$O([
    index.SyncWithStore()
], DyteChannelSelectorView.prototype, "t", void 0);
DyteChannelSelectorView.style = DyteChannelSelectorViewStyle0;

const dyteChatCss = ":host {\n  line-height: initial;\n  font-family: var(--dyte-font-family, sans-serif);\n\n  font-feature-settings: normal;\n  font-variation-settings: normal;\n}\n\np {\n  margin: var(--dyte-space-0, 0px);\n  padding: var(--dyte-space-0, 0px);\n}\n\n.scrollbar {\n  /* For Firefox */\n  scrollbar-width: thin;\n  scrollbar-color: var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent);\n}\n\n/* For WebKit */\n.scrollbar::-webkit-scrollbar {\n  height: var(--dyte-space-1\\.5, 6px);\n  width: var(--dyte-space-1\\.5, 6px);\n  border-radius: 9999px;\n  background-color: var(--dyte-scrollbar-background, transparent);\n}\n\n.scrollbar::-webkit-scrollbar-thumb {\n  border-radius: 9999px;\n  background-color: var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)));\n}\n\n\n:host {\n  display: flex;\n  height: 100%;\n  width: 100%;\n  flex-direction: column;\n  font-size: 14px;\n  position: relative;\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n}\n\nh3 {\n  margin: var(--dyte-space-0, 0px);\n  display: flex;\n  height: var(--dyte-space-12, 48px);\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  font-weight: 400;\n  color: rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));\n  text-align: center;\n}\n\n#dropzone {\n  position: absolute;\n  top: var(--dyte-space-0, 0px);\n  right: var(--dyte-space-0, 0px);\n  bottom: var(--dyte-space-0, 0px);\n  left: var(--dyte-space-0, 0px);\n  z-index: 10;\n  display: none;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));\n}\n\n#dropzone.active {\n  display: flex;\n  animation: 0.2s slide-up ease-in;\n}\n\ndyte-chat-messages-ui,\ndyte-chat-messages-ui-paginated {\n  flex: 1 0 0;\n}\n\ndyte-chat-composer-view {\n  margin: var(--dyte-space-2, 8px);\n}\n\n.chat-container {\n  display: flex;\n  height: 100%;\n  width: 100%;\n  flex-direction: row;\n  container-type: size;\n  container-name: chatcontainer;\n}\n\n@container chatcontainer (height < 360px) {\n  dyte-channel-selector-view {\n    height: var(--dyte-space-8, 32px);\n    min-height: 24px;\n  }\n}\n\n.chat {\n  display: flex;\n  flex: 1 1 0%;\n  flex-direction: column;\n}\n\n.banner {\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.banner .welcome-new-channel {\n  width: var(--dyte-space-48, 192px);\n}\n\n.banner .create-channel-illustration {\n  height: var(--dyte-space-40, 160px);\n  width: var(--dyte-space-40, 160px);\n}\n\n.channel-selector-header {\n  box-sizing: border-box;\n  height: var(--dyte-space-16, 64px);\n  padding: var(--dyte-space-4, 16px);\n  display: flex;\n  justify-content: space-between;\n  border-bottom: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-700, 44 44 44));\n}\n\n.channel-selector-header .channel-create-btn {\n  width: var(--dyte-space-8, 32px);\n  justify-content: center;\n}\n\n.channel-selector-header .channel-create-btn:hover {\n  --tw-text-opacity: 1;\n  color: rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity));\n}\n\n.view-chats-btn {\n  margin-top: var(--dyte-space-4, 16px);\n}\n\n.selector-container {\n  z-index: 50;\n  width: 100%;\n  max-width: var(--dyte-space-80, 320px);\n  border-right: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n}\n\n.selector-container.hide {\n  display: none;\n}\n\n.mobile-close-btn {\n  display: none;\n}\n\n.selector-container.mobile {\n  height: 100%;\n  width: 100%;\n  max-width: 100%;\n  position: absolute;\n  top: var(--dyte-space-0, 0px);\n  right: var(--dyte-space-0, 0px);\n  bottom: var(--dyte-space-0, 0px);\n  left: var(--dyte-space-0, 0px);\n  background-color: rgba(var(--dyte-colors-background-1000, 8 8 8) / 0.6);\n  display: flex;\n}\n\n.selector-container.mobile dyte-channel-selector-view {\n  max-width: var(--dyte-space-96, 384px);\n    animation: 0.3s swipe-in;\n}\n\n.selector-container.mobile .mobile-close-btn {\n  margin-top: var(--dyte-space-4, 16px);\n  margin-bottom: var(--dyte-space-4, 16px);\n  margin-left: var(--dyte-space-6, 24px);\n  margin-right: var(--dyte-space-6, 24px);\n  display: block;\n}\n\n.pinned-messages-header {\n  display: flex;\n  align-items: center;\n  gap: var(--dyte-space-2, 8px);\n  padding: var(--dyte-space-2, 8px);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.pinned-messages-header dyte-icon {\n  height: var(--dyte-space-3, 12px);\n  width: var(--dyte-space-3, 12px);\n}\n\n.pinned-messages-header:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));\n}\n\n.pinned-messages-header.active {\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));\n}\n\n@keyframes swipe-in {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n";
const DyteChatStyle0 = dyteChatCss;

var __decorate$N = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChat = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.chatUpdateListener = ({ message }) => {
            if (message.channelId)
                return;
            if (!this.displayFilter || this.displayFilter(message)) {
                this.addToChatGroup(message);
                // shallow copy to trigger render
                this.chatGroups = Object.assign({}, this.chatGroups);
            }
        };
        this.chatPermissionUpdateListener = () => {
            this.canSend = this.meeting.self.permissions.chatPublic.canSend;
            this.canSendTextMessage = this.meeting.self.permissions.chatPublic.text;
            this.canSendFiles = this.meeting.self.permissions.chatPublic.files;
        };
        /** Config */
        this.config = uiStore.defaultConfig;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** disables private chat */
        this.disablePrivateChat = false;
        /** Can current user pin/unpin messages */
        this.canPinMessages = false;
        /**
         * @deprecated
         * Beta API, will change in future
         * List of target presets allowed as private chat recipient
         */
        this.privatePresetFilter = [];
        /**
         * @deprecated
         * Beta API, will change in future
         * A filter function for messages to be displayed
         */
        this.displayFilter = undefined;
        this.unreadCountGroups = {};
        this.chatGroups = { everyone: [] };
        this.selectedGroup = 'everyone';
        this.now = new Date();
        this.dropzoneActivated = false;
        this.showLatestMessageButton = false;
        this.canSend = false;
        this.canSendTextMessage = false;
        this.canSendFiles = false;
        this.canPrivateMessage = false;
        this.canSendPrivateTexts = false;
        this.canSendPrivateFiles = false;
        this.emojiPickerEnabled = false;
        this.chatRecipientId = 'everyone';
        this.participants = [];
        this.channels = [];
        this.editingMessage = null;
        this.replyMessage = null;
        this.searchQuery = '';
        this.selectorState = 'hide';
        this.creatingChannel = false;
        this.showPinnedMessages = false;
        this.channelMap = new Map();
        this.onDragOver = (e) => {
            e.preventDefault();
            this.dropzoneActivated = true;
        };
        this.onDragLeave = () => {
            this.dropzoneActivated = false;
        };
        this.onDrop = (e) => {
            e.preventDefault();
            this.dropzoneActivated = false;
            chat.handleFilesDataTransfer(e.dataTransfer.items, (type, file) => {
                var _a, _b, _c, _d;
                switch (type) {
                    case 'image':
                        if (this.isFileMessagingAllowed()) {
                            (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.chat) === null || _b === void 0 ? void 0 : _b.sendImageMessage(file, this.getRecipientPeerIds());
                        }
                        break;
                    case 'file':
                        if (this.isFileMessagingAllowed()) {
                            (_d = (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.chat) === null || _d === void 0 ? void 0 : _d.sendFileMessage(file, this.getRecipientPeerIds());
                        }
                        break;
                }
            });
        };
        this.disconnectMeeting = (meeting) => {
            var _a, _b, _c, _d, _e, _f;
            if (this.isPrivateChatSupported()) {
                meeting === null || meeting === void 0 ? void 0 : meeting.participants.joined.removeListener('participantJoined', this.onParticipantUpdate);
                meeting === null || meeting === void 0 ? void 0 : meeting.participants.joined.removeListener('participantLeft', this.onParticipantUpdate);
            }
            (_a = meeting === null || meeting === void 0 ? void 0 : meeting.chat) === null || _a === void 0 ? void 0 : _a.removeListener('chatUpdate', this.chatUpdateListener);
            (_b = meeting === null || meeting === void 0 ? void 0 : meeting.chat) === null || _b === void 0 ? void 0 : _b.removeListener('channelCreate', this.onChannelCreateOrUpdate);
            (_c = meeting === null || meeting === void 0 ? void 0 : meeting.chat) === null || _c === void 0 ? void 0 : _c.removeListener('channelUpdate', this.onChannelCreateOrUpdate);
            (_d = meeting === null || meeting === void 0 ? void 0 : meeting.chat) === null || _d === void 0 ? void 0 : _d.removeListener('channelMessageUpdate', this.onChannelCreateOrUpdate);
            (_f = (_e = meeting === null || meeting === void 0 ? void 0 : meeting.participants) === null || _e === void 0 ? void 0 : _e.all) === null || _f === void 0 ? void 0 : _f.removeListener('participantsUpdate', this.onChannelCreateOrUpdate);
            meeting.self.permissions.removeListener('*', this.chatPermissionUpdateListener);
        };
        this.getFilteredParticipants = () => {
            if (this.privatePresetFilter.length === 0)
                return this.participants;
            return this.participants.filter((p) => this.privatePresetFilter.includes(p.presetName));
        };
        this.onParticipantUpdate = () => {
            this.participants = this.meeting.participants.joined
                .toArray()
                .filter((p) => this.privatePresetFilter.length === 0 || this.privatePresetFilter.includes(p.presetName));
            // if selected participant leaves, reset state to everyone
            if (this.selectedParticipant && !this.participants.includes(this.selectedParticipant)) {
                this.selectedParticipant = null;
                this.chatRecipientId = this.selectedGroup = 'everyone';
            }
        };
        this.usePaginatedChat = () => {
            if (this.isGroupCall && this.showPinnedMessages)
                return false;
            return this.selectedGroup === 'everyone' && uiStore.usePaginatedChat(this.meeting);
        };
        this.updateUnreadCountGroups = (obj) => {
            this.unreadCountGroups = Object.assign(Object.assign({}, this.unreadCountGroups), obj);
        };
        this.isPrivateChatSupported = () => {
            return this.canPrivateMessage && !this.disablePrivateChat;
        };
        this.updateRecipients = (event) => {
            const { id } = event.detail;
            this.chatRecipientId = id;
            this.selectedParticipant = this.participants.find((p) => p.userId === id);
            if (this.chatRecipientId !== 'everyone') {
                const allParticipants = [this.chatRecipientId, this.meeting.self.userId];
                const targetKey = chat.generateChatGroupKey(allParticipants);
                this.selectedGroup = targetKey;
            }
            else {
                this.selectedGroup = 'everyone';
            }
            this.updateUnreadCountGroups({ [this.selectedGroup]: 0 });
        };
        this.isTextMessagingAllowed = () => {
            if (this.chatRecipientId === 'everyone') {
                // public chat
                return this.canSend && this.canSendTextMessage;
            }
            // private chat
            return this.canPrivateMessage && this.canSendPrivateTexts;
        };
        this.isFileMessagingAllowed = () => {
            if (this.chatRecipientId === 'everyone') {
                // public chat
                return this.canSend && this.canSendFiles;
            }
            // private chat
            return this.canPrivateMessage && this.canSendPrivateFiles;
        };
        this.onChannelChanged = (e) => {
            const channel = e.detail;
            if (channel.id.includes(chat.TEMPORARY_CHANNEL_PREFIX)) {
                this.createDMChannel(channel.id.replace(chat.TEMPORARY_CHANNEL_PREFIX, ''));
            }
            else {
                this.selectedChannelId = channel.id;
            }
            this.cleanup();
            if (this.selectorState !== 'desktop') {
                this.selectorState = 'hide';
            }
        };
        this.createDMChannel = async (memberId) => {
            this.creatingChannel = true;
            const newChannel = await this.meeting.chat.createChannel('Direct Message', [memberId], {
                visibility: 'private',
                isDirectMessage: true,
            });
            this.creatingChannel = false;
            this.selectedChannelId = newChannel.id;
        };
        this.cleanup = () => {
            this.editingMessage = null;
            this.replyMessage = null;
            this.searchQuery = '';
        };
        this.onQuotedMessageDismiss = () => {
            this.replyMessage = null;
        };
        this.onChannelCreateOrUpdate = (channel) => {
            if (channel) {
                this.channelMap.set(channel.id, channel);
            }
            else {
                this.meeting.chat.channels.forEach((chan) => this.channelMap.set(chan.id, chan));
            }
            const allChannels = Array.from(this.channelMap.values());
            const channels = allChannels
                .filter((channel) => !chat.isDirectMessageChannel(channel))
                .sort((a, b) => chat.alphabeticalSorter(a.displayName, b.displayName));
            const membersWithChannel = allChannels.filter(chat.isDirectMessageChannel).map((channel) => {
                return Object.assign(Object.assign({}, channel), { displayName: this.getMemberDisplayName(channel) });
            });
            const membersWithoutChannel = this.meeting.participants.all
                .toArray()
                .filter((member) => {
                if (member.userId === this.meeting.self.userId)
                    return false;
                const matcher = chat.getDMComparator([this.meeting.self.userId, member.userId]);
                return membersWithChannel.every((channel) => chat.getDMComparator(channel.memberIds) !== matcher);
            })
                .map((member) => {
                return {
                    id: `${chat.TEMPORARY_CHANNEL_PREFIX}${member.userId}`,
                    displayName: member.name,
                    displayPictureUrl: member.picture,
                    isDirectMessage: true,
                    unreadCount: 0,
                };
            });
            const dms = [...membersWithChannel, ...membersWithoutChannel].sort((a, b) => chat.alphabeticalSorter(a.displayName, b.displayName));
            this.channels = [...channels, ...dms];
            // select channel only if it is created in db
            const nonTemporaryChannel = [...channels, ...membersWithChannel];
            if (!this.selectedChannelId && nonTemporaryChannel.length !== 0) {
                this.selectedChannelId = nonTemporaryChannel[0].id;
            }
        };
        this.getMemberDisplayName = (channel) => {
            var _a;
            let id;
            if (channel.memberIds.length === 1) {
                // channel with self
                id = channel.memberIds[0];
            }
            else {
                id =
                    channel.memberIds[0] === this.meeting.self.userId
                        ? channel.memberIds[1]
                        : channel.memberIds[0];
            }
            const member = this.meeting.participants.all.toArray().find((member) => member.userId === id);
            return (_a = member === null || member === void 0 ? void 0 : member.name) !== null && _a !== void 0 ? _a : id;
        };
        this.onNewMessageHandler = async (e) => {
            const message = e.detail;
            if (this.isChatViewType) {
                await this.meeting.chat.sendMessageToChannel(message, this.selectedChannelId, this.replyMessage
                    ? {
                        replyTo: this.replyMessage,
                    }
                    : {});
                this.replyMessage = null;
            }
            else {
                this.meeting.chat.sendMessage(message, this.getRecipientPeerIds());
            }
        };
        this.onEditMessageHandler = async (e) => {
            var _a, _b;
            await ((_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.chat) === null || _b === void 0 ? void 0 : _b.editTextMessage(this.editingMessage.id, e.detail, this.editingMessage.channelId));
            this.editingMessage = null;
        };
        this.onEditCancel = () => {
            this.editingMessage = null;
        };
        this.onSearchHandler = async (e) => {
            this.searchQuery = e.detail;
        };
        this.onSearchDismissed = () => {
            this.searchQuery = '';
        };
        this.onChannelCreateClicked = () => {
            this.stateUpdate.emit({ activeChannelCreator: true });
        };
        this.onPinMessage = (event) => {
            const message = event.detail;
            if (message.pinned) {
                this.meeting.chat.unpin(message.id);
            }
            else {
                this.meeting.chat.pin(message.id);
            }
        };
        this.onDeleteMessage = (event) => {
            const message = event.detail;
            this.meeting.chat.deleteMessage(message.id);
        };
        this.getChannelItems = () => {
            return this.channels.map((channel) => {
                const result = {
                    id: channel.id,
                    name: channel.displayName,
                    avatarUrl: channel.displayPictureUrl,
                };
                if (channel.latestMessage) {
                    result.latestMessage =
                        channel.latestMessage.type === 'text'
                            ? chat.stripOutReplyBlock(channel.latestMessage.message)
                            : '';
                    result.latestMessageTime = channel.latestMessage.time;
                }
                return result;
            });
        };
        this.getPrivateChatRecipients = () => {
            const participants = this.getFilteredParticipants().map((participant) => {
                const key = chat.generateChatGroupKey([participant.userId, this.meeting.self.userId]);
                const result = {
                    id: participant.userId,
                    name: participant.name,
                    avatarUrl: participant.picture,
                    unreadCount: this.unreadCountGroups[key],
                };
                return result;
            });
            const everyone = {
                id: 'everyone',
                name: this.t('chat.everyone'),
                icon: 'participants',
                unreadCount: this.unreadCountGroups['everyone'],
            };
            return [everyone, ...participants];
        };
        this.onTogglePinnedMessages = () => {
            this.showPinnedMessages = !this.showPinnedMessages;
        };
        this.renderPinnedMessagesHeader = () => {
            if (this.meeting.chat.pinned.length === 0)
                return null;
            return (index$1.h("dyte-tooltip", { label: this.t('chat.toggle_pinned_msgs') }, index$1.h("div", { class: { 'pinned-messages-header': true, active: this.showPinnedMessages }, onClick: this.onTogglePinnedMessages }, index$1.h("dyte-icon", { icon: this.iconPack.pin }), this.t('chat.pinned_msgs'), ` (${this.meeting.chat.pinned.length})`)));
        };
    }
    connectedCallback() {
        if (!this.meeting)
            return;
        this.meetingChanged(this.meeting);
        if (this.meeting && !this.meeting.chat) {
            return;
        }
        if (this.isFileMessagingAllowed()) {
            this.host.addEventListener('dragover', this.onDragOver);
            this.host.addEventListener('dragleave', this.onDragLeave);
            this.host.addEventListener('drop', this.onDrop);
        }
    }
    onEditMessageInit(event) {
        if (event.detail.flags.isReply) {
            this.replyMessage = event.detail.payload;
        }
        else if (event.detail.flags.isEdit) {
            this.editingMessage = event.detail.payload;
        }
    }
    disconnectedCallback() {
        var _a;
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        this.disconnectMeeting(this.meeting);
        this.host.removeEventListener('dragover', this.onDragOver);
        this.host.removeEventListener('dragleave', this.onDragLeave);
        this.host.removeEventListener('drop', this.onDrop);
    }
    meetingChanged(meeting, oldMeeting) {
        var _a, _b, _c, _d, _e, _f;
        if (oldMeeting != undefined)
            this.disconnectMeeting(oldMeeting);
        if (meeting && !meeting.chat)
            return;
        if (meeting != null) {
            this.canSend = meeting.self.permissions.chatPublic.canSend;
            this.canSendTextMessage = meeting.self.permissions.chatPublic.text;
            this.canSendFiles = meeting.self.permissions.chatPublic.files;
            this.canPrivateMessage = !!(((_a = meeting.self.permissions.chatPrivate) === null || _a === void 0 ? void 0 : _a.canSend) ||
                ((_b = meeting.self.permissions.chatPrivate) === null || _b === void 0 ? void 0 : _b.canReceive));
            this.canSendPrivateTexts = !!((_c = meeting.self.permissions.chatPrivate) === null || _c === void 0 ? void 0 : _c.text);
            this.canSendPrivateFiles = !!((_d = meeting.self.permissions.chatPrivate) === null || _d === void 0 ? void 0 : _d.files);
            this.canPinMessages =
                ((_e = meeting === null || meeting === void 0 ? void 0 : meeting.__internals__) === null || _e === void 0 ? void 0 : _e.features.hasFeature(uiStore.FlagsmithFeatureFlags.PINNED_MESSAGES)) &&
                    meeting.self.permissions.pinParticipant;
            this.isGroupCall = meeting.meta.viewType === 'GROUP_CALL';
            this.isChatViewType = meeting.meta.viewType === 'CHAT';
            if (this.isChatViewType) {
                this.onChannelCreateOrUpdate();
                const validChannels = this.channels.filter((channel) => !channel.id.includes(chat.TEMPORARY_CHANNEL_PREFIX));
                if (validChannels.length) {
                    this.selectedChannelId = this.channels[0].id;
                }
                if (this.resizeObserver) {
                    this.resizeObserver.disconnect();
                }
                this.resizeObserver = new ResizeObserver((entries) => {
                    for (const entry of entries) {
                        if (entry.contentBoxSize[0].inlineSize < 758) {
                            this.selectorState = 'hide';
                        }
                        else {
                            this.selectorState = 'desktop';
                        }
                    }
                });
                if (this.isChatViewType) {
                    this.resizeObserver.observe(this.host);
                }
            }
            this.initializeChatGroups();
            // shallow copy to trigger render
            this.chatGroups = Object.assign({}, this.chatGroups);
            meeting.self.permissions.on('*', this.chatPermissionUpdateListener);
            this.onParticipantUpdate();
            (_f = meeting.chat) === null || _f === void 0 ? void 0 : _f.addListener('chatUpdate', this.chatUpdateListener);
            if (this.isPrivateChatSupported()) {
                meeting.participants.joined.addListener('participantJoined', this.onParticipantUpdate);
                meeting.participants.joined.addListener('participantLeft', this.onParticipantUpdate);
            }
            if (this.isChatViewType) {
                meeting.chat.addListener('channelCreate', this.onChannelCreateOrUpdate);
                meeting.chat.addListener('channelUpdate', this.onChannelCreateOrUpdate);
                meeting.chat.addListener('channelMessageUpdate', this.onChannelCreateOrUpdate);
                meeting.participants.all.addListener('participantsUpdate', this.onChannelCreateOrUpdate);
            }
        }
    }
    chatGroupsChanged(chatGroups) {
        var _a, _b;
        if (!this.isPrivateChatSupported()) {
            return;
        }
        const unreadCounts = {};
        for (const key in chatGroups) {
            const lastReadTimestamp = (_a = uiStore.chatUnreadTimestamps[key]) !== null && _a !== void 0 ? _a : 0;
            unreadCounts[key] = chatGroups[key].filter((c) => c.type == 'chat' &&
                c.message.time > lastReadTimestamp &&
                c.message.userId !== this.meeting.self.userId).length;
            if (key ===
                chat.generateChatGroupKey([this.meeting.self.userId, (_b = this.selectedParticipant) === null || _b === void 0 ? void 0 : _b.userId]) ||
                (key === 'everyone' && this.selectedParticipant === null)) {
                unreadCounts[key] = 0;
                uiStore.chatUnreadTimestamps[key] = new Date();
            }
        }
        this.updateUnreadCountGroups(unreadCounts);
    }
    initializeChatGroups() {
        var _a;
        (_a = this.meeting.chat) === null || _a === void 0 ? void 0 : _a.messages.forEach((message) => {
            if (!this.displayFilter || this.displayFilter(message)) {
                this.addToChatGroup(message);
            }
        });
    }
    onDisplayFilterChanged(newFilter, oldFilter) {
        if (newFilter !== oldFilter) {
            this.chatGroups = {};
            this.initializeChatGroups();
        }
    }
    addToChatGroup(message) {
        var _a;
        const parsedMessage = chat.parseMessageForTarget(message);
        let key = 'everyone';
        if (((_a = parsedMessage.targetUserIds) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            const allParticipants = new Set([
                parsedMessage.userId,
                ...parsedMessage.targetUserIds,
            ]);
            key = chat.generateChatGroupKey(Array.from(allParticipants));
        }
        if (this.chatGroups[key] === undefined)
            this.chatGroups[key] = [];
        let isEditedMessage = false;
        let messages = [];
        this.chatGroups[key].forEach((chat) => {
            if (chat.type === 'chat' && chat.message.id === message.id) {
                isEditedMessage = true;
                messages.push({ type: 'chat', message: parsedMessage });
            }
            else {
                messages.push(chat);
            }
        });
        if (!isEditedMessage) {
            messages.push({ type: 'chat', message: parsedMessage });
        }
        this.chatGroups[key] = messages;
    }
    getRecipientPeerIds() {
        let peerIds = [];
        if (this.chatRecipientId !== 'everyone') {
            peerIds = [this.selectedParticipant.id];
        }
        return peerIds;
    }
    channelSwitchListener(e) {
        this.onChannelChanged(e);
    }
    renderHeadlessComponents() {
        return (index$1.h(index$1.Fragment, null, index$1.h("dyte-dialog-manager", { meeting: this.meeting }), index$1.h("dyte-notifications", { meeting: this.meeting })));
    }
    renderComposerUI() {
        var _a, _b, _c;
        if (this.isChatViewType && this.channels.length === 0)
            return null;
        if (this.isChatViewType && this.searchQuery !== '')
            return null;
        if (this.isChatViewType && !this.selectedChannelId)
            return null;
        if (this.chatRecipientId === 'everyone') {
            if (!this.canSendTextMessage && !this.canSendFiles)
                return null;
        }
        else {
            if (!this.canSendPrivateTexts && !this.canSendPrivateFiles)
                return null;
        }
        const uiProps = { iconPack: this.iconPack, t: this.t, size: this.size };
        const message = this.editingMessage ? this.editingMessage.message : '';
        const quotedMessage = this.replyMessage ? this.replyMessage.message : '';
        return (index$1.h("dyte-chat-composer-view", Object.assign({ message: message, storageKey: (_a = this.selectedChannelId) !== null && _a !== void 0 ? _a : `draft-${this.selectedChannelId}`, quotedMessage: quotedMessage, isEditing: !!this.editingMessage, canSendTextMessage: this.isTextMessagingAllowed(), canSendFiles: this.isFileMessagingAllowed(), disableEmojiPicker: !!((_c = (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.__internals__) === null || _c === void 0 ? void 0 : _c.features.hasFeature(uiStore.FlagsmithFeatureFlags.DISABLE_EMOJI_PICKER)), maxLength: this.meeting.chat.maxTextLimit, rateLimits: this.meeting.chat.rateLimits, inputTextPlaceholder: this.t('chat.message_placeholder'), onNewMessage: this.onNewMessageHandler, onEditMessage: this.onEditMessageHandler, onEditCancel: this.onEditCancel, onQuotedMessageDismiss: this.onQuotedMessageDismiss }, uiProps), index$1.h("slot", { name: "chat-addon", slot: "chat-addon" })));
    }
    renderFullChat() {
        if (this.creatingChannel) {
            return (index$1.h("div", { class: "banner" }, index$1.h("dyte-spinner", { size: "lg" })));
        }
        if (this.channels.length === 0 || !this.selectedChannelId) {
            return (index$1.h("div", { class: "banner" }, index$1.h("dyte-icon", { icon: this.iconPack.create_channel_illustration, slot: "start", class: 'create-channel-illustration' }), index$1.h("dyte-button", { kind: "wide", variant: "primary", size: "md", onClick: this.onChannelCreateClicked, class: "welcome-new-channel" }, index$1.h("dyte-icon", { icon: this.iconPack.add, slot: "start" }), index$1.h("span", null, this.t('chat.new_channel'))), (this.selectorState === 'mobile' || this.selectorState === 'hide') && (index$1.h("dyte-button", { kind: "button", variant: "secondary", size: "md", class: "view-chats-btn", onClick: () => {
                    this.selectorState = 'mobile';
                } }, index$1.h("dyte-icon", { icon: this.iconPack.chat, slot: "start" }), index$1.h("span", null, this.t('chat.view_chats'))))));
        }
        const selectedChannel = this.channels.find((channel) => channel.id === this.selectedChannelId);
        return (index$1.h("div", { class: "chat" }, index$1.h("dyte-channel-header", { slot: "header", meeting: this.meeting, channel: selectedChannel, onSearch: this.onSearchHandler, onSearchDismissed: this.onSearchDismissed, showBackButton: this.selectorState === 'mobile' || this.selectorState === 'hide', onBack: () => {
                this.selectorState = 'mobile';
            } }), this.searchQuery !== '' && (index$1.h("dyte-chat-search-results", { meeting: this.meeting, query: this.searchQuery, channelId: this.selectedChannelId })), this.searchQuery === '' && (index$1.h("dyte-chat-messages-ui-paginated", { meeting: this.meeting, size: this.size, iconPack: this.iconPack, t: this.t, selectedChannelId: this.selectedChannelId, selectedChannel: selectedChannel }))));
    }
    render() {
        var _a, _b;
        if (!this.meeting)
            return null;
        const uiProps = { iconPack: this.iconPack, t: this.t, size: this.size };
        const selfUserId = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.userId;
        let chatMessages = this.chatGroups[this.selectedGroup] || [];
        if (this.showPinnedMessages && this.meeting.chat.pinned.length !== 0) {
            chatMessages = chatMessages.filter((chat) => chat.type === 'chat' && chat.message.pinned);
        }
        return (index$1.h(index$1.Host, null, this.isChatViewType && this.renderHeadlessComponents(), index$1.h("div", { class: "chat-container" }, this.isChatViewType && (index$1.h("div", { class: { 'selector-container': true, [this.selectorState]: true } }, index$1.h("dyte-channel-selector-view", { channels: this.getChannelItems(), selectedChannelId: this.selectedChannelId, onChannelChange: this.onChannelChanged, t: this.t }, index$1.h("div", { class: "channel-selector-header", slot: "header" }, index$1.h("dyte-logo", { meeting: this.meeting, config: this.config, t: this.t }), index$1.h("dyte-tooltip", { label: this.t('chat.new_channel') }, index$1.h("dyte-button", { kind: "button", variant: "ghost", size: "md", onClick: this.onChannelCreateClicked, class: "channel-create-btn" }, index$1.h("dyte-icon", { icon: this.iconPack.add }))))), index$1.h("dyte-button", { kind: "icon", variant: "ghost", class: "mobile-close-btn", onClick: () => (this.selectorState = 'hide') }, index$1.h("dyte-icon", { icon: this.iconPack.dismiss })))), index$1.h("div", { class: "chat" }, this.isFileMessagingAllowed() && (index$1.h("div", { id: "dropzone", class: { active: this.dropzoneActivated }, part: "dropzone" }, index$1.h("dyte-icon", { icon: this.iconPack.attach }), index$1.h("p", null, this.t('chat.send_attachment')))), this.renderPinnedMessagesHeader(), this.isPrivateChatSupported() && (index$1.h("dyte-channel-selector-view", { channels: this.getPrivateChatRecipients(), selectedChannelId: ((_b = this.selectedParticipant) === null || _b === void 0 ? void 0 : _b.userId) || 'everyone', onChannelChange: this.updateRecipients, t: this.t, viewAs: "dropdown" })), this.isChatViewType ? (this.renderFullChat()) : this.usePaginatedChat() ? (index$1.h("dyte-chat-messages-ui-paginated", { meeting: this.meeting, onPinMessage: this.onPinMessage, onDeleteMessage: this.onDeleteMessage, size: this.size, iconPack: this.iconPack, t: this.t })) : (index$1.h("dyte-chat-messages-ui", Object.assign({ messages: chatMessages, selfUserId: selfUserId, selectedGroup: this.selectedGroup, onPinMessage: this.onPinMessage, canPinMessages: this.canPinMessages }, uiProps))), this.renderComposerUI()))));
    }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "chatGroups": ["chatGroupsChanged"],
        "displayFilter": ["onDisplayFilterChanged"]
    }; }
};
__decorate$N([
    index.SyncWithStore()
], DyteChat.prototype, "meeting", void 0);
__decorate$N([
    index.SyncWithStore()
], DyteChat.prototype, "size", void 0);
__decorate$N([
    index.SyncWithStore()
], DyteChat.prototype, "iconPack", void 0);
__decorate$N([
    index.SyncWithStore()
], DyteChat.prototype, "t", void 0);
DyteChat.style = DyteChatStyle0;

const dyteChatComposerViewCss = ":host {\n  display: flex;\n  flex-direction: column;\n  font-family: var(--dyte-font-family, sans-serif);\n  font-size: 14px;\n  position: relative;\n}\n\n.quoted-message-container {\n  margin-bottom: var(--dyte-space-2, 8px);\n  display: flex;\n  justify-content: space-between;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n  border-radius: var(--dyte-border-radius-md, 8px);\n  border: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n}\n\n.quoted-message-container .quoted-message {\n  flex: 1 1 0%;\n  padding: var(--dyte-space-2, 8px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  max-height: var(--dyte-space-24, 96px);\n  overflow-y: auto;\n  word-break: break-all;\n}\n\n.quoted-message-container .quoted-message blockquote {\n  display: none;\n}\n\n.quoted-message-container dyte-icon.dismiss {\n  margin-left: auto;\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  padding: var(--dyte-space-2, 8px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  color: rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52));\n}\n\n.quoted-message-container dyte-icon.dismiss:hover {\n  cursor: pointer;\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n}\n\n.quoted-message-container dyte-icon.dismiss {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n.composer-container {\n  position: relative;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  border-radius: var(--dyte-border-radius-md, 8px);\n  overflow: hidden;\n  border: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n}\n\n.composer-container > .composers {\n    min-height: 60px;\n  }\n\n@container chatcontainer (height < 360px) {\n    .composer-container > .composers {\n      min-height: 30px;\n    }\n}\n\n.chat-buttons {\n  padding: var(--dyte-space-3, 12px);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n}\n\n.chat-buttons .right {\n  z-index: 10;\n}\n\n.chat-buttons .right .edit-buttons {\n  display: flex;\n  gap: var(--dyte-space-2, 8px);\n}\n\n.chat-buttons > div {\n  display: flex;\n  align-items: center;\n}\n\ndyte-emoji-picker {\n  z-index: 20;\n  position: absolute;\n  top: calc(var(--dyte-space-72, 288px) * -1);\n  border-top: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n  animation: 0.3s slide-up ease;\n}\n\n@keyframes slide-up {\n  from {\n    transform: translateY(100%);\n  }\n  to {\n    transform: translateY(0%);\n  }\n}\n";
const DyteChatComposerViewStyle0 = dyteChatComposerViewCss;

var __decorate$M = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const messageLimits = {
    messagesSent: 0,
    startTime: 0,
};
const DyteChatComposerView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onNewMessage = index$1.createEvent(this, "newMessage", 7);
        this.onEditMessage = index$1.createEvent(this, "editMessage", 7);
        this.onEditCancel = index$1.createEvent(this, "editCancel", 7);
        this.onQuotedMessageDismiss = index$1.createEvent(this, "quotedMessageDismiss", 7);
        /** Whether user can send text messages */
        this.canSendTextMessage = true;
        /** Whether user can send file messages */
        this.canSendFiles = true;
        /** Message to be pre-populated */
        this.message = '';
        /** Quote message to be displayed */
        this.quotedMessage = '';
        /** Key for storing message in localStorage */
        this.storageKey = 'dyte-text-message';
        /** Placeholder for text input */
        this.inputTextPlaceholder = 'Enter your message';
        /** Sets composer to edit mode */
        this.isEditing = false;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Whether to show emoji picker */
        this.disableEmojiPicker = false;
        /** Rate limits */
        this.rateLimits = {
            period: 60,
            maxInvocations: 60,
        };
        this.fileToUpload = null;
        this.isEmojiPickerOpen = false;
        this.disableSendButton = false;
        this.rateLimitsBreached = false;
        this.textMessage = '';
        this.sendFile = () => {
            if (!this.canSendFiles) {
                return;
            }
            if (this.fileToUpload.type === 'image') {
                this.onNewMessage.emit({
                    type: 'image',
                    image: this.fileToUpload.file,
                });
            }
            else {
                this.onNewMessage.emit({ type: 'file', file: this.fileToUpload.file });
            }
            this.fileToUpload = null;
        };
        this.handleSendMessage = () => {
            if (!this.canSendTextMessage || this.rateLimitsBreached) {
                return;
            }
            if (this.fileToUpload !== null) {
                this.sendFile();
                return;
            }
            const message = this.textMessage;
            const currentTime = Date.now();
            if (currentTime - messageLimits.startTime > this.rateLimits.period * 1000) {
                messageLimits.startTime = currentTime;
                messageLimits.messagesSent = 0;
            }
            messageLimits.messagesSent += 1;
            this.checkRateLimitBreached(currentTime);
            if (message.length > 0) {
                if (this.quotedMessage.length !== 0) {
                    this.onNewMessage.emit({
                        type: 'text',
                        message,
                    });
                }
                else {
                    this.onNewMessage.emit({ type: 'text', message });
                }
                this.cleanup();
            }
        };
        this.handleEditMessage = () => {
            this.onEditMessage.emit(this.textMessage);
            this.cleanup();
        };
        this.handleEditCancel = () => {
            this.onEditCancel.emit();
            this.cleanup();
        };
        this.onTextChangeHandler = (event) => {
            var _a;
            this.textMessage = event.detail;
            if (this.textMessage.length >= ((_a = this.maxLength) !== null && _a !== void 0 ? _a : chat.MAX_TEXT_LENGTH)) {
                this.disableSendButton = true;
            }
            else if (this.disableSendButton) {
                this.disableSendButton = false;
            }
            uiStore.gracefulStorage.setItem(this.storageKey, event.detail);
        };
        this.onKeyDownHandler = (event) => {
            if (event.key === 'Enter' && event.shiftKey) {
                return;
            }
            if (this.disableSendButton) {
                return;
            }
            if (event.key === 'Enter') {
                event.preventDefault();
                if (this.isEditing) {
                    this.handleEditMessage();
                }
                else {
                    this.handleSendMessage();
                }
            }
        };
        this.onFileUploadHandler = (type, file) => {
            this.fileToUpload = { type, file };
        };
        this.onQuotedMessageDismissHandler = () => {
            this.onQuotedMessageDismiss.emit();
        };
        this.cleanup = () => {
            this.textMessage = '';
            this.fileToUpload = null;
            uiStore.gracefulStorage.setItem(this.storageKey, '');
            this.$textComposer.setText('', true);
            this.isEmojiPickerOpen = false;
        };
        this.onKeyDownHandler = this.onKeyDownHandler.bind(this);
    }
    connectedCallback() {
        this.textMessage = this.message || uiStore.gracefulStorage.getItem(this.storageKey) || '';
        this.checkRateLimitBreached(Date.now());
    }
    componentWillUpdate() {
        this.textMessage = this.message || uiStore.gracefulStorage.getItem(this.storageKey) || '';
    }
    componentDidLoad() {
        if (this.message) {
            index$1.writeTask(() => this.$textComposer.setText(this.message, true));
        }
    }
    checkRateLimitBreached(currentTime) {
        // Check if the function call is within limits
        if (messageLimits.messagesSent >= this.rateLimits.maxInvocations) {
            this.disableSendButton = true;
            this.rateLimitsBreached = true;
            const timeRemainingForReset = currentTime - messageLimits.startTime + this.rateLimits.period * 1000;
            setTimeout(() => {
                messageLimits.messagesSent = 0;
                messageLimits.startTime = Date.now();
                this.disableSendButton = false;
                this.rateLimitsBreached = false;
            }, timeRemainingForReset);
        }
    }
    render() {
        var _a;
        const uiProps = { iconPack: this.iconPack, t: this.t };
        return (index$1.h(index$1.Host, { key: 'd0cb57c1d3b74db36e3ddfa5453a960de7968a1b' }, this.canSendTextMessage && this.isEmojiPickerOpen && (index$1.h("dyte-emoji-picker", Object.assign({ key: 'd26c303b8d1e460eabe0fdbadb4f1ab3381b16cc', part: "emoji-picker", onPickerClose: () => {
                this.isEmojiPickerOpen = false;
            }, onDyteEmojiClicked: (e) => {
                this.textMessage += e.detail;
                this.$textComposer.setText(this.textMessage, true);
            } }, uiProps))), index$1.h("slot", { key: '93a6e0c49183a080be84172ce0a69b0d0a9b274a', name: "chat-addon" }), this.quotedMessage && this.quotedMessage.length !== 0 && (index$1.h("div", { key: '9b235c2f65766cc80f40091b6d4e01f614f910f3', class: "quoted-message-container", part: "quoted-message-container" }, index$1.h("div", { key: '3e2582d7ccc9747be95f140ea0f3c9151b5fc365', class: "quoted-message scrollbar" }, index$1.h("dyte-text-message-view", { key: 'd5ef25a57bf0f2a026c5fd92b202e0d337a3e52a', text: this.quotedMessage, isMarkdown: true })), index$1.h("div", { key: 'c0d69d22711c6dd7e9a84f18f3bdb2f4e0b60a20' }, index$1.h("dyte-icon", { key: '9a9b6cd5df08157b411cbcbfb628a714f04cd291', "aria-label": this.t('dismiss'), class: "dismiss", icon: this.iconPack.dismiss, onClick: this.onQuotedMessageDismissHandler })))), index$1.h("div", { key: '9dc15207103dceeded2a03c69a75bfa7919b98eb', class: "composer-container" }, index$1.h("div", { key: 'f456c8bd28ee60155b3735458aa172aa55b574f8', class: "composers" }, this.fileToUpload && (index$1.h("dyte-draft-attachment-view", Object.assign({ key: '0417d1e33ac0e4fc0df52bdc0a04661701c4efcf' }, uiProps, { attachment: this.fileToUpload, onDeleteAttachment: () => (this.fileToUpload = null) }))), !this.fileToUpload && (index$1.h("dyte-text-composer-view", { key: '83b68d635390774b5f931f5e00e0caa8f8b739d9', value: this.textMessage, placeholder: this.inputTextPlaceholder, onTextChange: this.onTextChangeHandler, keyDownHandler: this.onKeyDownHandler, maxLength: (_a = this.maxLength) !== null && _a !== void 0 ? _a : chat.MAX_TEXT_LENGTH, rateLimitBreached: this.rateLimitsBreached, t: this.t, iconPack: this.iconPack, ref: (el) => (this.$textComposer = el) }))), index$1.h("div", { key: '033cfe3365464c83af8d0ef0b590c0ffa900c146', class: "chat-buttons", part: "chat-buttons" }, index$1.h("div", { key: 'fcc9ae557a0f31c15611694a6073486fa6b22986', class: "left", part: "chat-buttons-left" }, !this.fileToUpload && !this.isEditing && (index$1.h("div", { key: 'd9b9f602c036d8dec831daec2065097a987fa213' }, this.canSendFiles && [
            index$1.h("dyte-file-picker-button", Object.assign({ key: '31270adc1fb72d8817e3218d596823cbffd0b032' }, uiProps, { onFileChange: (event) => this.onFileUploadHandler('file', event.detail) })),
            index$1.h("dyte-file-picker-button", Object.assign({ key: '1168afc0827bc2b63463c1eaf1e805abea7388d7', filter: "image/*", label: this.t('chat.send_img'), icon: "image", onFileChange: (event) => this.onFileUploadHandler('image', event.detail) }, uiProps)),
        ], this.canSendTextMessage && !this.disableEmojiPicker && (index$1.h("dyte-emoji-picker-button", Object.assign({ key: 'ef781c8e02daadede1ddc1eab5ef52598484b6d0', isActive: this.isEmojiPickerOpen, onClick: () => {
                this.isEmojiPickerOpen = !this.isEmojiPickerOpen;
            } }, uiProps))), index$1.h("slot", { key: 'e80c453df4dcd546e804ea68ad9e5a783048662d', name: "chat-buttons" })))), index$1.h("div", { key: 'e76f5c295316bc20e52d150f3a005cd91c90e210', class: "right", part: "chat-buttons-right" }, !this.isEditing && (index$1.h("dyte-tooltip", { key: 'd26dee018b74152225a19258165534ed7f793066', variant: "primary", label: this.t('chat.send_msg'), delay: 2000 }, index$1.h("dyte-button", { key: '5ad58b3709f82d11006bbc05a80c9c74134fe598', kind: "icon", disabled: this.disableSendButton, onClick: () => this.handleSendMessage(), title: this.t('chat.send_msg') }, index$1.h("dyte-icon", { key: '785be312a087790413e75151d352085585f8be31', icon: this.iconPack.send })))), this.isEditing && (index$1.h("div", { key: '5ee9a079da42dd6ef58d39dd611a170d324d1783', class: "edit-buttons" }, index$1.h("dyte-tooltip", { key: '35ed375683386ff3a411e84b0bff663fd2d9cdfd', variant: "secondary", label: this.t('cancel'), delay: 2000 }, index$1.h("dyte-button", { key: '80b21a18537664018306abf9b8b099d2b1ec354f', kind: "icon", variant: "secondary", onClick: () => this.handleEditCancel(), title: this.t('cancel') }, index$1.h("dyte-icon", { key: 'd65f2a1c97cd5c36effcfa78fcd7ebe42b095be8', icon: this.iconPack.dismiss }))), index$1.h("dyte-tooltip", { key: '56ff8d5fd854720ec93f65d5bdcb88b4e2621e12', variant: "primary", label: this.t('chat.update_msg'), delay: 2000 }, index$1.h("dyte-button", { key: '81eb4a8f97baa957bfe718720fedbb8504010dae', kind: "icon", onClick: () => this.handleEditMessage(), title: this.t('chat.send_msg') }, index$1.h("dyte-icon", { key: '3fc29bac3ee52f825de73e81b19c49d92981dd4a', icon: this.iconPack.checkmark }))))))))));
    }
};
__decorate$M([
    index.SyncWithStore()
], DyteChatComposerView.prototype, "iconPack", void 0);
__decorate$M([
    index.SyncWithStore()
], DyteChatComposerView.prototype, "t", void 0);
DyteChatComposerView.style = DyteChatComposerViewStyle0;

const dyteChatMessageCss = ".message-wrapper{display:flex;gap:var(--dyte-space-2, 8px);margin-left:var(--dyte-space-4, 16px);margin-right:var(--dyte-space-4, 16px);margin-top:var(--dyte-space-4, 16px)}[is-continued] .message-wrapper{margin-top:var(--dyte-space-0, 0px)}.message-wrapper.align-right{flex-direction:row-reverse}.file-picker{display:none}.message{position:relative;display:flex}.show-on-hover dyte-menu{visibility:hidden}.show-on-hover:hover dyte-menu{visibility:visible}.align-right .message{justify-content:flex-end;margin-left:auto}.align-right .message .head{margin-right:var(--dyte-space-1, 4px);margin-left:var(--dyte-space-0, 0px);flex-direction:row-reverse;gap:var(--dyte-space-4, 16px)}.align-right .message dyte-text-message .bubble,.align-right .message dyte-image-message .bubble,.align-right .message dyte-file-message .bubble{padding-right:var(--dyte-space-5, 20px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.align-right .message .actions dyte-icon{color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.align-right dyte-menu{left:auto;right:var(--dyte-space-0, 0px)}.head{margin-bottom:var(--dyte-space-2, 8px);margin-left:var(--dyte-space-1, 4px);display:flex;align-items:center;gap:var(--dyte-space-2, 8px)}.head .name{font-size:14px;font-weight:600}.head .time{font-size:12px;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}dyte-menu{position:absolute;left:var(--dyte-space-0, 0px);top:var(--dyte-space-6, 24px);border-radius:var(--dyte-border-radius-lg, 12px)}dyte-menu dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);cursor:pointer}[is-continued] dyte-menu{top:var(--dyte-space-2, 8px)}.actions{display:flex;align-items:center;justify-content:center;padding:var(--dyte-space-0\\.5, 2px);border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent}.actions dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.body{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);overflow-wrap:break-word;font-size:14px;line-height:1.375}.body .emoji{font-size:24px}.body.bubble{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-1, 4px);max-width:var(--dyte-space-96, 384px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);padding-left:var(--dyte-space-5, 20px);padding-right:var(--dyte-space-5, 20px);overflow-wrap:break-word;font-size:14px;line-height:1.375;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.body.bubble p{margin:var(--dyte-space-0, 0px);word-break:break-word}p{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px)}dyte-text-message,dyte-image-message,dyte-file-message{display:block;font-family:var(--dyte-font-family, sans-serif);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));box-sizing:border-box}*[is-continued]{margin-top:var(--dyte-space-0, 0px)}.image{position:relative;height:var(--dyte-space-40, 160px);max-width:var(--dyte-space-64, 256px);cursor:pointer}.image img{display:none;height:100%;width:100%;border-radius:var(--dyte-border-radius-sm, 4px);-o-object-fit:cover;object-fit:cover}.image .image-spinner{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.image .image-spinner dyte-spinner{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity))}.image .image-errored{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-sm, 4px);background-color:rgba(var(--dyte-colors-danger, 255 45 45) / 0.1);--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}.image .actions{display:none;height:var(--dyte-space-8, 32px);align-items:center;position:absolute;top:var(--dyte-space-2, 8px);right:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden;--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.image .actions .action{height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);border-radius:var(--dyte-border-radius-none, 0);border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.image .actions .action:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.image.loaded img{display:block}.image.loaded .image-spinner{display:none}.image:hover .actions,.image:focus .actions{display:flex}.file{display:flex;align-items:center;gap:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);padding-top:var(--dyte-space-1\\.5, 6px);padding-bottom:var(--dyte-space-1\\.5, 6px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.file .file-data{flex:1 1 0%}.file .file-data .name{word-break:break-all;color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}.file .file-data .file-data-split{margin-top:var(--dyte-space-0\\.5, 2px);display:flex;align-items:center;font-size:12px}.file .file-data .file-data-split .ext{margin-right:var(--dyte-space-2, 8px);text-transform:uppercase;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}.file .file-data .file-data-split .divider{height:var(--dyte-space-4, 16px);width:var(--dyte-space-0\\.5, 2px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.file .file-data .file-data-split .size{margin-left:var(--dyte-space-2, 8px)}a{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity));text-decoration-line:none}a:hover{text-decoration-line:underline}.new-chat-marker{display:flex;width:100%;align-items:center;gap:var(--dyte-space-2, 8px);--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity))}.new-chat-marker::before{content:'';height:1px;flex:1 1 0%;background-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / 0.5)}.show-new-messages-ctr{pointer-events:none;display:flex;justify-content:flex-end;padding:var(--dyte-space-3, 12px);z-index:0;margin-top:calc(var(--dyte-space-14, 56px) * -1)}.show-new-messages{pointer-events:auto;--tw-translate-y:calc(var(--dyte-space-6, 24px) * -1);transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));opacity:0;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.show-new-messages.active{--tw-translate-y:var(--dyte-space-0, 0px);transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));opacity:1}blockquote{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px);background-color:transparent}.block-quote,blockquote{--tw-border-spacing-x:1px;--tw-border-spacing-y:1px;border-spacing:var(--tw-border-spacing-x) var(--tw-border-spacing-y);border-top-width:var(--dyte-border-width-none, 0);border-bottom-width:var(--dyte-border-width-none, 0);border-left-width:var(--dyte-border-width-md, 2px);border-right-width:var(--dyte-border-width-none, 0);border-style:solid;border-left-color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));padding:var(--dyte-space-0\\.5, 2px);padding-left:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px) !important;border-radius:var(--dyte-border-radius-sm, 4px);border-top-left-radius:var(--dyte-border-radius-none, 0);border-bottom-left-radius:var(--dyte-border-radius-none, 0)}.link{color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.align-right .block-quote{border-color:rgb(var(--dyte-colors-text-on-brand-600, var(--dyte-colors-text-600, 255 255 255 / 0.52)));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-bg-opacity))}.align-right .link{color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.align-right .image .actions dyte-icon{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity))}.avatar{display:flex;width:var(--dyte-space-6, 24px)}.avatar dyte-avatar{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px);font-size:10px}.message{width:75%}.left-align .body{margin-top:var(--dyte-space-4, 16px)}.left-align [is-continued] .body{margin-top:var(--dyte-space-0, 0px)}.left-align .body{--tw-translate-x:calc(var(--dyte-space-8, 32px) * -1);transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}";
const DyteChatMessageStyle0 = dyteChatMessageCss;

var __decorate$L = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChatMessage = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.edit = index$1.createEvent(this, "edit", 7);
        this.reply = index$1.createEvent(this, "reply", 7);
        this.pin = index$1.createEvent(this, "pin", 7);
        this.delete = index$1.createEvent(this, "delete", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** if sender is self */
        this.isSelf = false;
        /** can edit message */
        this.canEdit = false;
        /** can delete message */
        this.canDelete = false;
        /** can quote reply this message */
        this.canReply = false;
        /** can pin this message */
        this.canPin = false;
        /** disables controls */
        this.disableControls = false;
        /** aligns message to right */
        this.alignRight = false;
        /** hides avatar */
        this.hideAvatar = false;
        this.now = new Date();
        /** Whether to left align the chat bubbles */
        this.leftAlign = false;
        this.renderMessage = () => {
            switch (this.message.type) {
                case 'text':
                    return (index$1.h("div", { "is-continued": this.isContinued, key: this.message.id }, this.isUnread && (index$1.h("div", { class: "new-chat-marker", part: "new-chat-marker" }, this.t('chat.new'))), index$1.h("dyte-text-message", { message: this.message, now: this.now, isContinued: this.isContinued, "data-timestamp": this.message.time.getTime(), iconPack: this.iconPack, t: this.t, showBubble: true })));
                case 'image':
                    return (index$1.h("div", { "is-continued": this.isContinued, key: this.message.id }, this.isUnread && (index$1.h("div", { class: "new-chat-marker", part: "new-chat-marker" }, this.t('chat.new'))), index$1.h("dyte-image-message", { message: this.message, now: this.now, isContinued: this.isContinued, iconPack: this.iconPack, "data-timestamp": this.message.time.getTime(), t: this.t, showBubble: true })));
                case 'file':
                    return (index$1.h("div", { "is-continued": this.isContinued, key: this.message.id }, this.isUnread && (index$1.h("div", { class: "new-chat-marker", part: "new-chat-marker" }, this.t('chat.new'))), index$1.h("dyte-file-message", { message: this.message, now: this.now, isContinued: this.isContinued, iconPack: this.iconPack, t: this.t, "data-timestamp": this.message.time.getTime(), showBubble: true })));
                case 'custom':
                    this.child.setAttribute('message', JSON.stringify(this.message));
                    const node = this.child.cloneNode(true);
                    return (index$1.h("div", { "is-continued": this.isContinued, key: this.message.id, ref: (el) => el.appendChild(node) }));
            }
        };
        this.onReply = () => {
            this.reply.emit(this.message);
        };
        this.onPinned = () => {
            this.pin.emit(this.message);
        };
        this.onDelete = () => {
            this.delete.emit(this.message);
        };
        this.onEdit = async () => {
            this.edit.emit(this.message);
        };
        this.isTouchDevice = () => {
            return 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        };
    }
    renderControls() {
        if (this.disableControls)
            return;
        return (index$1.h("dyte-menu", { placement: this.alignRight ? 'bottom-end' : 'bottom-start' }, index$1.h("button", { slot: "trigger", class: "actions" }, index$1.h("dyte-icon", { icon: this.iconPack.chevron_down })), index$1.h("dyte-menu-list", null, this.canReply && (index$1.h("dyte-menu-item", { onClick: this.onReply }, index$1.h("dyte-icon", { icon: this.iconPack.back, slot: "start" }), this.t('chat.reply'))), this.canPin && (index$1.h("dyte-menu-item", { onClick: this.onPinned }, index$1.h("dyte-icon", { icon: this.iconPack.pin, slot: "start" }), this.t('pin'))), this.canEdit && (index$1.h("dyte-menu-item", { onClick: this.onEdit }, index$1.h("dyte-icon", { icon: this.iconPack.edit, slot: "start" }), this.t('chat.edit_msg'))), this.canDelete && (index$1.h("dyte-menu-item", { onClick: this.onDelete }, index$1.h("dyte-icon", { icon: this.iconPack.delete, slot: "start" }), this.t('chat.delete_msg'))))));
    }
    renderAvatar() {
        if (this.hideAvatar)
            return;
        if (this.isContinued) {
            return index$1.h("div", { class: "avatar" });
        }
        return (index$1.h("div", { class: "avatar" }, index$1.h("dyte-avatar", { size: "sm", participant: {
                name: this.message.displayName,
                picture: this.senderDisplayPicture,
            } })));
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'e9019b771308fb2ccbd6b42066db30ff9afac88f' }, index$1.h("div", { key: '2b7364203c9f2f20db564fe2d98e787b2e7879d0', class: {
                'message-wrapper': true,
                'align-right': this.alignRight,
                'left-align': this.leftAlign,
            }, "is-continued": this.isContinued }, this.renderAvatar(), index$1.h("div", { key: 'b98ffba657e3699b3011682dff7b87724b044ade', class: {
                message: true,
                'show-on-hover': !this.isTouchDevice(),
            }, "is-continued": this.isContinued }, this.renderMessage(), this.renderControls()))));
    }
    get $el() { return index$1.getElement(this); }
};
__decorate$L([
    index.SyncWithStore()
], DyteChatMessage.prototype, "size", void 0);
__decorate$L([
    index.SyncWithStore()
], DyteChatMessage.prototype, "iconPack", void 0);
__decorate$L([
    index.SyncWithStore()
], DyteChatMessage.prototype, "t", void 0);
DyteChatMessage.style = DyteChatMessageStyle0;

const dyteChatMessagesUiCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));word-break:break-word}.chat-container{box-sizing:border-box;display:flex;flex-direction:column;padding-top:var(--dyte-space-4, 16px);padding-bottom:var(--dyte-space-4, 16px);flex:1 0 0px;overflow-y:scroll}.chat-container .spacer{flex:1 1 auto}.chat-container .chat{flex:0 0 auto}.file-picker{display:none}.chat .head{display:flex;align-items:center}.chat .head .name{margin-right:var(--dyte-space-4, 16px);font-size:12px;font-weight:700}.chat .head .time{font-size:12px;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.chat .body{margin-top:var(--dyte-space-2, 8px);overflow-wrap:break-word;line-height:1.375}.chat .body .emoji{font-size:24px}p{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px)}dyte-message-view{margin-top:var(--dyte-space-4, 16px);display:block;padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));box-sizing:border-box}dyte-message-view::part(message){flex-grow:1}*[is-continued] dyte-message-view{margin-top:var(--dyte-space-1, 4px)}.pinned .message-wrapper{position:relative}.pinned .pin-button{position:absolute;right:var(--dyte-space-4, 16px);top:calc(var(--dyte-space-4, 16px) * -1);display:flex;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.pinned .pin-button:hover dyte-button{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-600, 13 81 253) / var(--tw-bg-opacity))}.pinned dyte-message-view{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px)}a{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity));text-decoration-line:none}a:hover{text-decoration-line:underline}.new-chat-marker{display:flex;width:100%;align-items:center;gap:var(--dyte-space-2, 8px);--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity))}.new-chat-marker::before{content:'';height:1px;flex:1 1 0%;background-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / 0.5)}.show-new-messages-ctr{pointer-events:none;display:flex;justify-content:flex-end;padding:var(--dyte-space-3, 12px);z-index:0;margin-top:calc(var(--dyte-space-14, 56px) * -1)}.show-new-messages{pointer-events:auto;--tw-translate-y:var(--dyte-space-16, 64px);transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));opacity:0;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.show-new-messages.active{--tw-translate-y:var(--dyte-space-0, 0px);transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));opacity:1}";
const DyteChatMessagesUiStyle0 = dyteChatMessagesUiCss;

var __decorate$K = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChatMessagesUi = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onPinMessage = index$1.createEvent(this, "pinMessage", 7);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.observingEl = [];
        this.autoScrollEnabled = true;
        /** Chat Messages */
        this.messages = [];
        /** Can current user pin/unpin messages */
        this.canPinMessages = false;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.now = new Date();
        this.showLatestMessageButton = false;
        this.onScroll = (e) => {
            const target = e.target;
            index$1.writeTask(() => {
                const { scrollTop, clientHeight, scrollHeight } = target;
                const fromTop = scrollTop + clientHeight;
                if (fromTop + 10 >= scrollHeight) {
                    // at bottom
                    this.autoScrollEnabled = true;
                    this.showLatestMessageButton = false;
                }
                else {
                    // not at bottom
                    this.autoScrollEnabled = false;
                }
            });
        };
        this.scrollToBottom = () => {
            scroll.smoothScrollToBottom(this.$chat);
        };
        this.observeMessage = (el) => {
            if (el) {
                this.observingEl.push(el);
            }
            try {
                this.intersectionObserver.observe(el);
            }
            catch (_a) { }
        };
        this.getMessageActions = (message) => {
            const actions = [];
            if (!message.pinned && this.canPinMessages) {
                actions.push({
                    id: 'pin_message',
                    label: this.t('pin'),
                    icon: this.iconPack.pin,
                });
            }
            return actions;
        };
        this.onMessageActionHandler = (actionId, message) => {
            switch (actionId) {
                case 'pin_message':
                    this.onPinMessage.emit(message);
                    break;
            }
        };
    }
    connectedCallback() {
        var _a;
        this.lastReadTimestamp = (_a = uiStore.chatUnreadTimestamps['everyone']) !== null && _a !== void 0 ? _a : new Date('0001-01-01T00:00:00Z');
        this.intersectionObserver = new IntersectionObserver((entries) => {
            if (!document.hasFocus())
                return;
            index$1.writeTask(() => {
                for (const entry of entries) {
                    if (entry.isIntersecting) {
                        const currTimestamp = parseInt(entry.target.getAttribute('data-timestamp'));
                        if (currTimestamp > this.lastReadTimestamp.getTime()) {
                            // this.lastReadTimestamp = new Date();
                            uiStore.chatUnreadTimestamps[this.selectedGroup] = new Date();
                        }
                    }
                }
            });
        });
        // update current time every minute
        const updateNow = () => {
            this.now = new Date();
            this.timeout = setTimeout(() => {
                if (this.request != null) {
                    this.request = requestAnimationFrame(updateNow);
                }
            }, 60 * 1000);
        };
        this.request = requestAnimationFrame(updateNow);
        this.chatChanged(this.messages);
    }
    componentDidLoad() {
        this.$chat.addEventListener('scroll', this.onScroll);
        this.$chat.scrollTop = this.$chat.scrollHeight;
    }
    componentDidRender() {
        if (this.autoScrollEnabled) {
            scroll.smoothScrollToBottom(this.$chat);
        }
        else if (this.autoScrollEnabled == null) {
            // scroll to bottom on first render
            scroll.smoothScrollToBottom(this.$chat, false);
        }
    }
    chatChanged(messages) {
        if (this.$chat == null)
            return;
        if (this.autoScrollEnabled || this.$chat.clientHeight === this.$chat.scrollHeight)
            return;
        for (let i = messages.length - 1; i >= 0; i--) {
            if (messages[i].message.time > this.lastReadTimestamp &&
                messages[i].message.userId !== this.selfUserId) {
                // show latest message button when you have new messages
                // and chat container is scrollable and autoscroll is not enabled
                this.showLatestMessageButton = true;
                break;
            }
        }
    }
    selectedBucketChanged() {
        this.autoScrollEnabled = undefined;
        this.observingEl.forEach((el) => {
            this.intersectionObserver.unobserve(el);
        });
        this.observingEl = [];
    }
    disconnectedCallback() {
        this.$chat.removeEventListener('scroll', this.onScroll);
        this.intersectionObserver.disconnect();
        clearTimeout(this.timeout);
        cancelAnimationFrame(this.request);
    }
    render() {
        var _a;
        let prevMessage = null;
        let reachedFirstUnread = false;
        return (index$1.h(index$1.Host, { key: '01c61fd2a60ca11df413406967eb80af92d07de0' }, index$1.h("div", { key: 'b1a6ad7904236a7fdb50034f33de979faa080ef6', class: "chat-container scrollbar", ref: (el) => (this.$chat = el), part: "container" }, index$1.h("div", { key: '95664e4f9b8faae0c31c128abc6f54cf5bcd6acf', class: "spacer", part: "spacer" }), index$1.h("div", { key: 'e0c40200e05026bb748e608ba6abb6f02b5a701c', class: "chat", part: "chat" }, (_a = this.messages) === null || _a === void 0 ? void 0 : _a.map((item) => {
            if (item.type === 'chat') {
                const { message } = item;
                const isSelfMessage = message.userId === this.selfUserId;
                const isUnread = !isSelfMessage &&
                    !this.autoScrollEnabled &&
                    !reachedFirstUnread &&
                    message.time > this.lastReadTimestamp;
                if (isUnread)
                    reachedFirstUnread = isUnread;
                const isContinued = !isUnread &&
                    message.userId === (prevMessage === null || prevMessage === void 0 ? void 0 : prevMessage.userId) &&
                    ChatHead.differenceInMinutes(message.time, prevMessage === null || prevMessage === void 0 ? void 0 : prevMessage.time) < 2;
                prevMessage = message;
                return (index$1.h("div", { "is-continued": isContinued, key: item.message.id, ref: this.observeMessage, "data-timestamp": message.time.getTime(), class: message.pinned ? 'pinned' : '' }, isUnread && (index$1.h("div", { class: "new-chat-marker", part: "new-chat-marker" }, this.t('chat.new'))), index$1.h("div", { class: "message-wrapper" }, index$1.h("dyte-message-view", { time: message.time, actions: this.getMessageActions(message), authorName: message.displayName, hideAuthorName: true, hideAvatar: true, hideMetadata: true, viewType: 'incoming', variant: "bubble", onAction: (event) => this.onMessageActionHandler(event.detail, message) }, index$1.h("div", null, !isContinued && (index$1.h("div", { class: "head" }, index$1.h("div", { class: "name" }, message.displayName), !!message.time && (index$1.h("div", { class: "time", title: ChatHead.formatDateTime(message.time) }, ChatHead.elapsedDuration(message.time, new Date(Date.now())))))), index$1.h("div", { class: "body" }, message.type === 'text' && (index$1.h("dyte-text-message-view", { text: message.message, isMarkdown: true })), message.type === 'file' && (index$1.h("dyte-file-message-view", { name: message.name, url: message.link, size: message.size })), message.type === 'image' && (index$1.h("dyte-image-message-view", { url: message.link, onPreview: () => {
                        this.stateUpdate.emit({ image: message });
                    } }))))), message.pinned && (index$1.h("div", { class: "pin-button", part: "pin-button" }, index$1.h("dyte-tooltip", { label: this.t('unpin') }, index$1.h("dyte-button", { kind: "icon", variant: "ghost", onClick: () => this.onMessageActionHandler('pin_message', message), disabled: !this.canPinMessages }, index$1.h("dyte-icon", { icon: this.iconPack.pin, size: "sm" }))))))));
            }
            return null;
        }))), index$1.h("div", { key: '518df977aebf5ecfc26a3f93904e24f92f607fc4', class: "show-new-messages-ctr" }, index$1.h("dyte-button", { key: '7b6f0a1461957ec5947e4976d6457125e1096f16', class: {
                'show-new-messages': true,
                active: this.showLatestMessageButton,
            }, kind: "icon", part: "show-new-messages", onClick: this.scrollToBottom }, index$1.h("dyte-icon", { key: '0af3acc46412913b7555d8e2256ad2840c6f6226', icon: this.iconPack.chevron_down })))));
    }
    static get watchers() { return {
        "messages": ["chatChanged"],
        "selectedGroup": ["selectedBucketChanged"]
    }; }
};
__decorate$K([
    index.SyncWithStore()
], DyteChatMessagesUi.prototype, "size", void 0);
__decorate$K([
    index.SyncWithStore()
], DyteChatMessagesUi.prototype, "iconPack", void 0);
__decorate$K([
    index.SyncWithStore()
], DyteChatMessagesUi.prototype, "t", void 0);
DyteChatMessagesUi.style = DyteChatMessagesUiStyle0;

const dyteChatMessagesUiPaginatedCss = ":host{display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));flex:1 0 0px}";
const DyteChatMessagesUiPaginatedStyle0 = dyteChatMessagesUiPaginatedCss;

var __decorate$J = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChatMessagesUiPaginated = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.editMessageInit = index$1.createEvent(this, "editMessageInit", 7);
        this.onPinMessage = index$1.createEvent(this, "pinMessage", 7);
        this.onDeleteMessage = index$1.createEvent(this, "deleteMessage", 7);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Whether to align chat bubbles to the left */
        this.leftAlign = false;
        this.permissionsChanged = false;
        this.pageSize = 25;
        this.lastReadMessageIndex = -1;
        this.permissionsUpdateListener = () => {
            this.permissionsChanged = !this.permissionsChanged;
        };
        this.maybeMarkChannelAsRead = (messages) => {
            if (!this.selectedChannelId)
                return;
            if (messages.length === 0)
                return;
            if (this.lastReadMessageIndex !== -1)
                return;
            const latestMsg = messages.at(0).time > messages.at(-1).time ? messages.at(0) : messages.at(-1);
            if (!latestMsg.channelIndex)
                return;
            this.lastReadMessageIndex = parseInt(latestMsg.channelIndex, 10);
            this.meeting.chat.markLastReadMessage(this.selectedChannelId, latestMsg);
        };
        this.getChatMessages = async (timestamp, size, reversed) => {
            const { messages } = await this.meeting.chat.getMessages(timestamp, size, reversed, undefined, this.selectedChannelId);
            this.maybeMarkChannelAsRead(messages);
            return messages;
        };
        this.createChatNodes = (data) => {
            /**
             * NOTE(callmetarush): When between pages the message's isContinued
             * will fail in current implementation
             */
            return data.map((message, idx) => {
                var _a;
                const isContinued = message.userId === ((_a = data[idx - 1]) === null || _a === void 0 ? void 0 : _a.userId);
                return this.createChatNode(message, isContinued);
            });
        };
        this.disconnectMeeting = (meeting) => {
            var _a, _b;
            (_a = meeting === null || meeting === void 0 ? void 0 : meeting.chat) === null || _a === void 0 ? void 0 : _a.removeListener('chatUpdate', this.chatUpdateListener);
            (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self.permissions.removeListener('permissionsUpdate', this.permissionsUpdateListener);
        };
        this.getMessageActions = (message) => {
            const actions = [];
            // const isSelf = this.meeting.self.userId === message.userId;
            // const chatMessagePermissions = this.meeting.self.permissions?.chatMessage;
            // const canEdit =
            //   chatMessagePermissions === undefined
            //     ? isSelf
            //     : chatMessagePermissions.canEdit === 'ALL' ||
            //       (chatMessagePermissions.canEdit === 'SELF' && isSelf);
            // const canDelete =
            //   chatMessagePermissions === undefined
            //     ? isSelf
            //     : chatMessagePermissions.canDelete === 'ALL' ||
            //       (chatMessagePermissions.canDelete === 'SELF' && isSelf);
            if (this.meeting.self.permissions.pinParticipant) {
                actions.push({
                    id: 'pin_message',
                    label: message.pinned ? this.t('unpin') : this.t('pin'),
                    icon: this.iconPack.pin,
                });
            }
            // if (canDelete) {
            //   actions.push({
            //     id: 'delete_message',
            //     label: this.t('chat.delete_msg'),
            //     icon: this.iconPack.delete,
            //   });
            // }
            return actions;
        };
        this.onMessageActionHandler = (actionId, message) => {
            switch (actionId) {
                case 'pin_message':
                    this.onPinMessage.emit(message);
                    break;
                case 'delete_message':
                    this.onDeleteMessage.emit(message);
                    break;
            }
        };
        this.createChatNode = (message, isContinued) => {
            var _a, _b, _c, _d;
            if (message.targetUserIds.length !== 0)
                return null; // don't render private messages
            let displayPicture;
            if (this.meeting.meta.viewType === 'CHAT') {
                displayPicture = (_a = this.meeting.participants.all
                    .toArray()
                    .find((p) => p.userId === message.userId)) === null || _a === void 0 ? void 0 : _a.picture;
            }
            else {
                if (this.meeting.self.userId === message.userId) {
                    displayPicture = this.meeting.self.picture;
                }
                else {
                    displayPicture =
                        (_c = (_b = this.meeting.participants.joined
                            .toArray()
                            .find((member) => member.userId === message.userId)) === null || _b === void 0 ? void 0 : _b.picture) !== null && _c !== void 0 ? _c : (_d = this.meeting.participants.waitlisted.toArray().find((p) => p.userId === message.userId)) === null || _d === void 0 ? void 0 : _d.picture;
                }
            }
            return (index$1.h("div", { class: { pinned: message.pinned } }, index$1.h("div", { class: "message-wrapper" }, index$1.h("dyte-message-view", { time: message.time, actions: this.getMessageActions(message), authorName: message.displayName, avatarUrl: displayPicture, hideAuthorName: isContinued, viewType: 'incoming', variant: "bubble", onAction: (event) => this.onMessageActionHandler(event.detail, message) }, index$1.h("div", null, index$1.h("div", { class: "body" }, message.type === 'text' && (index$1.h("dyte-text-message-view", { text: message.message, isMarkdown: true })), message.type === 'file' && (index$1.h("dyte-file-message-view", { name: message.name, url: message.link, size: message.size })), message.type === 'image' && (index$1.h("dyte-image-message-view", { url: message.link, onPreview: () => {
                    this.stateUpdate.emit({ image: message });
                } }))), message.pinned && (index$1.h("div", { class: "pin-icon", part: "pin-icon" }, index$1.h("dyte-icon", { icon: this.iconPack.pin, size: "sm" }))))))));
        };
        this.chatUpdateListener = (data) => {
            if (this.selectedChannelId && data.message.channelId !== this.selectedChannelId)
                return;
            if (data.action === 'add') {
                this.$paginatedListRef.onNewNode(data.message);
                this.lastReadMessageIndex = -1;
                this.maybeMarkChannelAsRead([data.message]);
            }
            else if (data.action === 'delete') {
                this.$paginatedListRef.onNodeDelete(data.message.id);
            }
            else if (data.action === 'edit') {
                this.$paginatedListRef.onNodeUpdate(data.message.id, data.message);
            }
        };
    }
    componentDidLoad() {
        const slotted = this.host.shadowRoot.querySelector('slot');
        if (!slotted)
            return;
        this.children = slotted.assignedElements()[0];
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        this.disconnectMeeting(this.meeting);
    }
    meetingChanged(meeting, oldMeeting) {
        var _a;
        if (oldMeeting != undefined)
            this.disconnectMeeting(oldMeeting);
        if (meeting && !meeting.chat)
            return;
        if (meeting != null) {
            (_a = meeting.chat) === null || _a === void 0 ? void 0 : _a.addListener('chatUpdate', this.chatUpdateListener);
            meeting.self.permissions.addListener('permissionsUpdate', this.permissionsUpdateListener);
        }
        this.permissionsUpdateListener();
    }
    channelChanged() {
        this.lastReadMessageIndex = -1;
    }
    render() {
        return (index$1.h(index$1.Host, { key: '0f87ae87443f5ebcb771924591c9b9d30af425f6' }, index$1.h("dyte-paginated-list", { key: 'f3a82fc12cf42265eb838da5d3bd36e2e3402fae', ref: (el) => (this.$paginatedListRef = el), pageSize: this.pageSize, pagesAllowed: 3, fetchData: this.getChatMessages, createNodes: this.createChatNodes, selectedItemId: this.selectedChannelId, emptyListLabel: this.t('chat.empty_channel') }, index$1.h("slot", { key: '89d54672424cfff5fe73d8ece157cdcf5534fa30' }))));
    }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "selectedChannelId": ["channelChanged"]
    }; }
};
__decorate$J([
    index.SyncWithStore()
], DyteChatMessagesUiPaginated.prototype, "meeting", void 0);
__decorate$J([
    index.SyncWithStore()
], DyteChatMessagesUiPaginated.prototype, "size", void 0);
__decorate$J([
    index.SyncWithStore()
], DyteChatMessagesUiPaginated.prototype, "iconPack", void 0);
__decorate$J([
    index.SyncWithStore()
], DyteChatMessagesUiPaginated.prototype, "t", void 0);
DyteChatMessagesUiPaginated.style = DyteChatMessagesUiPaginatedStyle0;

const dyteChatSearchResultsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;flex-direction:column;position:relative;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}";
const DyteChatSearchResultsStyle0 = dyteChatSearchResultsCss;

var __decorate$I = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteChatSearchResults = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.pageSize = 50;
        this.searchMessages = async (timestamp, size, reversed) => {
            return this.meeting.chat.searchMessages(this.query, {
                channelId: this.channelId,
                timestamp,
                size,
                reversed,
            });
        };
        this.nodeRenderer = (messages) => {
            return messages.map((message) => (index$1.h("dyte-chat-message", { key: message.id, message: message, disableControls: true })));
        };
    }
    render() {
        return (index$1.h(index$1.Host, { key: '984a388e6c194e27c5cb7918806bd9f156220ec7' }, index$1.h("dyte-paginated-list", { key: '444fa000de6428b4c0c6e0c829eb4ef944d2a211', pageSize: this.pageSize, pagesAllowed: 3, fetchData: this.searchMessages, createNodes: this.nodeRenderer, selectedItemId: this.query })));
    }
};
__decorate$I([
    index.SyncWithStore()
], DyteChatSearchResults.prototype, "meeting", void 0);
__decorate$I([
    index.SyncWithStore()
], DyteChatSearchResults.prototype, "iconPack", void 0);
__decorate$I([
    index.SyncWithStore()
], DyteChatSearchResults.prototype, "t", void 0);
DyteChatSearchResults.style = DyteChatSearchResultsStyle0;

const dyteConfirmationModalCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;border-radius:var(--dyte-border-radius-md, 8px);padding:var(--dyte-space-8, 32px);width:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));width:400px;max-width:80%}.leave-modal{width:100%;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.leave-modal .header h2{margin:var(--dyte-space-0, 0px)}.leave-modal .content{font-size:14px}.leave-message p{margin-top:var(--dyte-space-3, 12px);margin-bottom:var(--dyte-space-3, 12px)}.leave-meeting{display:flex;flex-direction:row;justify-content:space-between;gap:var(--dyte-space-4, 16px)}.leave-meeting dyte-button{color:rgb(var(--dyte-colors-text-1000, 255 255 255));flex:1 1 0%}.end-meeting{margin-top:var(--dyte-space-2, 8px)}.br-secondary-btn{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.br-secondary-btn:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}";
const DyteConfirmationModalStyle0 = dyteConfirmationModalCss;

var __decorate$H = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteConfirmationModal = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.keyPressListener = (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        };
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.close = () => {
            this.states.activeConfirmationModal.onClose(this.stateUpdate, this.states, this.meeting);
            this.stateUpdate.emit({ activeConfirmationModal: { active: false } });
            this.states.activeConfirmationModal = { active: false };
        };
        this.onConfirmation = async () => {
            this.states.activeConfirmationModal.onClick(this.stateUpdate, this.states, this.meeting);
            this.stateUpdate.emit({ activeConfirmationModal: { active: false } });
            this.states.activeConfirmationModal = { active: false };
        };
    }
    connectedCallback() {
        document.addEventListener('keydown', this.keyPressListener);
    }
    componentDidLoad() { }
    disconnectedCallback() {
        document.removeEventListener('keydown', this.keyPressListener);
    }
    render() {
        var _a, _b;
        const state = this.states.activeConfirmationModal;
        return (index$1.h(index$1.Host, { key: 'bfb08e8cf23236412b9aa1a03ef0ea59e57fcc8f' }, index$1.h("div", { key: '19031e843eeae492331dc2b70cb53ed7e34b7e1c', class: "leave-modal" }, index$1.h("div", { key: 'b06ee1276a63a09327f91ee94923b58e5e13dff7', class: "header" }, index$1.h("h2", { key: 'fe549a012577be074c4aeae7daf5f2b1d6431090', class: "title" }, state.header ? this.t(state.header) : this.t('cta.confirmation'))), index$1.h("p", { key: '142ba47a0723cd6f8e3826ba0ea50a343eb3c4c0', class: "message" }, state.content ? this.t(state.content) : ''), index$1.h("div", { key: '695140e0148911b611c4e9ca85961059e78e5279', class: "content" }, index$1.h("div", { key: 'a5cfbf4dcf926dad8bbba83a0af1843605641a59', class: "leave-meeting" }, index$1.h("dyte-button", { key: '42e5022b094fe7f8a7138975b7a987e3ba8357cb', variant: "secondary", title: state.cancelText ? this.t(state.cancelText) : this.t('cancel'), onClick: this.close, class: "br-secondary-btn" }, state.cancelText ? this.t(state.cancelText) : this.t('cancel')), index$1.h("dyte-button", { key: '1e53176e5e5bfb774cd7169784823340b383c740', onClick: () => this.onConfirmation(), variant: (_b = (_a = this.states.activeConfirmationModal) === null || _a === void 0 ? void 0 : _a.variant) !== null && _b !== void 0 ? _b : 'danger', title: state.ctaText ? this.t(state.ctaText) : this.t('yes') }, state.ctaText ? this.t(state.ctaText) : this.t('yes')))))));
    }
};
__decorate$H([
    index.SyncWithStore()
], DyteConfirmationModal.prototype, "meeting", void 0);
__decorate$H([
    index.SyncWithStore()
], DyteConfirmationModal.prototype, "states", void 0);
__decorate$H([
    index.SyncWithStore()
], DyteConfirmationModal.prototype, "iconPack", void 0);
__decorate$H([
    index.SyncWithStore()
], DyteConfirmationModal.prototype, "t", void 0);
DyteConfirmationModal.style = DyteConfirmationModalStyle0;

const dyteCounterCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;flex-direction:row;align-items:center;justify-content:center;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));width:-moz-fit-content;width:fit-content;border-radius:var(--dyte-border-radius-sm, 4px);padding:var(--dyte-space-1, 4px)}p{margin:var(--dyte-space-0, 0px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}input{margin:var(--dyte-space-0, 0px);width:var(--dyte-space-6, 24px);padding:var(--dyte-space-2, 8px);border-width:var(--dyte-border-width-sm, 1px);border-style:solid;border-color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));text-align:center;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));border-radius:var(--dyte-border-radius-sm, 4px);font-size:16px;outline:2px solid transparent;outline-offset:2px;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{margin:var(--dyte-space-0, 0px);appearance:none;-webkit-appearance:none}input[type='number']{-moz-appearance:textfield}";
const DyteCounterStyle0 = dyteCounterCss;

var __decorate$G = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteCounter = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onChange = index$1.createEvent(this, "valueChange", 7);
        /** Input */
        this.input = '1';
        /** Minimum value */
        this.minValue = 0;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
    }
    connectedCallback() {
        this.watchStateHandler(this.input);
        this.input = this.value.toString();
    }
    watchStateHandler(input) {
        this.onChange.emit(input);
    }
    increment() {
        this.input = Math.max(parseInt(this.input) + 1, this.minValue).toString();
    }
    decrement() {
        this.input = Math.max(this.minValue, parseInt(this.input) - 1).toString();
    }
    render() {
        return (index$1.h(index$1.Host, { key: '001a8ab33d9ce321c040396bdb8de97399c72644' }, index$1.h("dyte-button", { key: '90bc0534d63d549d34da72bdc98a260922905dd4', kind: "icon", variant: "ghost", onClick: () => this.decrement() }, index$1.h("dyte-icon", { key: '08efdbb92413cc53c280c24aa4c0b0267326f423', icon: this.iconPack.subtract })), index$1.h("input", { key: '71fb967f4f8896ec0f6435dd4011f7735bf53dd1', type: "number", value: this.input, min: this.minValue, onInput: (e) => {
                const val = parseInt(e.target.value, 10);
                if (isNaN(val) || val < this.minValue) {
                    this.input = this.minValue.toString();
                }
                else {
                    this.input = val.toString();
                }
            } }), index$1.h("dyte-button", { key: 'bb5df90fb048044238c7427903f455d870446539', kind: "icon", variant: "ghost", onClick: () => this.increment() }, index$1.h("dyte-icon", { key: '5ae0a6e2f3acec1e13cab00d1ec15c9b2f66363a', icon: this.iconPack.add }))));
    }
    static get watchers() { return {
        "input": ["watchStateHandler"]
    }; }
};
__decorate$G([
    index.SyncWithStore()
], DyteCounter.prototype, "size", void 0);
__decorate$G([
    index.SyncWithStore()
], DyteCounter.prototype, "iconPack", void 0);
__decorate$G([
    index.SyncWithStore()
], DyteCounter.prototype, "t", void 0);
DyteCounter.style = DyteCounterStyle0;

const dyteDebuggerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;overflow:hidden;border-radius:var(--dyte-border-radius-md, 8px);width:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}header{margin-right:var(--dyte-space-2, 8px);display:flex;align-items:center;justify-content:space-between;padding-top:var(--dyte-space-0, 0px);padding-bottom:var(--dyte-space-0, 0px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}header h3{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px)}.back-btn{border-radius:var(--dyte-border-radius-sm, 4px);background-color:transparent;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.back-btn:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}aside{box-sizing:border-box;display:flex;max-width:var(--dyte-space-56, 224px) !important;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));padding-left:var(--dyte-space-2, 8px)}aside button{margin-top:var(--dyte-space-4, 16px);box-sizing:border-box;display:flex;width:100%;align-items:center;justify-content:space-between;border-top-left-radius:var(--dyte-border-radius-sm, 4px);border-bottom-left-radius:var(--dyte-border-radius-sm, 4px);padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);background-color:transparent;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));cursor:default;font-size:14px;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);border-width:var(--dyte-border-width-none, 0);border-style:none;outline:2px solid transparent;outline-offset:2px}aside button .right{display:flex;align-items:center}aside button .right dyte-icon{height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px)}aside button .right dyte-icon:last-child{margin-left:var(--dyte-space-4, 16px)}aside button[type='button']{cursor:pointer;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}aside button[type='button']:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}aside button[type='button']{border-right:var(--dyte-border-width-md, 2px) solid transparent}aside button.active{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-border-opacity));background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}aside button.active:hover{background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}aside button.hidden{display:none}main{position:relative;box-sizing:border-box;display:flex;height:100%;width:100%;flex-direction:column}:host([size='sm']) aside{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));width:100% !important;max-width:100% !important;padding-left:var(--dyte-space-0, 0px)}:host([size='sm']) aside button{border-radius:var(--dyte-border-radius-none, 0)}:host([size='sm']) aside button.active{border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent}:host([size='sm']) aside button.active:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}:host([size='sm']) aside button.hidden{display:none}:host([size='sm']) aside.hide{display:none}aside button:host([size='sm']) aside.hide{display:none}:host([size='sm']) aside button:host([size='sm']) aside.hide{display:none}:host([size='sm']) main{display:none;height:100%;width:100%;padding:var(--dyte-space-0, 0px)}aside button:host([size='sm']) main{display:none}:host([size='sm']) aside button:host([size='sm']) main{display:none}:host([size='sm']) main.active{display:block}:host([size='sm']) header{margin:var(--dyte-space-0, 0px);justify-content:center}:host([size='sm']) header dyte-button{position:absolute;left:var(--dyte-space-4, 16px)}::-webkit-scrollbar{width:8px}::-webkit-scrollbar-track{border-radius:var(--dyte-border-radius-lg, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-lg, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}::-webkit-scrollbar-thumb:hover{border-radius:var(--dyte-border-radius-lg, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}.progress-bar{height:var(--dyte-space-1, 4px);width:100%;overflow:hidden;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.progress-indicator{height:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}";
const DyteDebuggerStyle0 = dyteDebuggerCss;

var __decorate$F = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDebugger = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.keyPressListener = (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        };
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.activeTab = 'audio';
        this.isMobileMainVisible = false;
        this.progress = 0;
    }
    connectedCallback() {
        document.addEventListener('keydown', this.keyPressListener);
    }
    disconnectedCallback() {
        this.keyPressListener && document.removeEventListener('keydown', this.keyPressListener);
    }
    progressUpdate(event) {
        this.progress = event.detail;
    }
    changeTab(tab) {
        this.activeTab = tab;
        if (this.size === 'sm') {
            if (!this.isMobileMainVisible) {
                this.isMobileMainVisible = true;
            }
        }
    }
    close() {
        this.stateUpdate.emit({ activeDebugger: false });
    }
    getActiveTab() {
        switch (this.activeTab) {
            case 'audio':
                return this.t('debugger.audio.troubleshooting.label');
            case 'screenshare':
                return this.t('debugger.screenshare.troubleshooting.label');
            case 'video':
                return this.t('debugger.video.troubleshooting.label');
            case 'system':
                return this.t('debugger.system.troubleshooting.label');
            default:
                return this.t('debugger.troubleshooting.label');
        }
    }
    render() {
        if (this.meeting == null)
            return null;
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            iconPack: this.iconPack,
            t: this.t,
            size: this.size,
        };
        const tab = this.getActiveTab();
        const showSystemsTab = typeof navigator.getBattery !== 'undefined';
        return (index$1.h(index$1.Host, null, index$1.h("aside", { class: { hide: this.isMobileMainVisible }, part: "menu" }, index$1.h("header", null, index$1.h("h3", null, this.t('debugger.troubleshooting.label'))), index$1.h("button", { type: "button", class: { active: this.activeTab === 'audio' }, onClick: () => this.changeTab('audio') }, this.t('debugger.audio.label'), index$1.h("div", { class: "right" }, index$1.h("dyte-icon", { icon: this.iconPack.mic_on }), this.size === 'sm' && index$1.h("dyte-icon", { icon: this.iconPack.chevron_right }))), index$1.h("button", { type: "button", class: { active: this.activeTab === 'video' }, onClick: () => this.changeTab('video') }, this.t('debugger.video.label'), index$1.h("div", { class: "right" }, index$1.h("dyte-icon", { icon: this.iconPack.video_on }), this.size === 'sm' && index$1.h("dyte-icon", { icon: this.iconPack.chevron_right }))), index$1.h("button", { type: "button", class: { active: this.activeTab === 'screenshare' }, onClick: () => this.changeTab('screenshare') }, this.t('debugger.screenshare.label'), index$1.h("div", { class: "right" }, index$1.h("dyte-icon", { icon: this.iconPack.share_screen_start }), this.size === 'sm' && index$1.h("dyte-icon", { icon: this.iconPack.chevron_right }))), index$1.h("button", { type: "button", class: { active: this.activeTab === 'system', hidden: !showSystemsTab }, onClick: () => this.changeTab('system') }, this.t('debugger.system.label'), index$1.h("div", { class: "right" }, index$1.h("dyte-icon", { icon: this.iconPack.settings }), this.size === 'sm' && index$1.h("dyte-icon", { icon: this.iconPack.chevron_right })))), index$1.h("main", { class: { active: this.isMobileMainVisible }, part: "main-content" }, this.size === 'sm' && (index$1.h("header", null, index$1.h("dyte-button", { kind: "icon", class: "back-btn", onClick: () => (this.isMobileMainVisible = false) }, index$1.h("dyte-icon", { icon: this.iconPack.chevron_left })), index$1.h("h4", null, tab))), this.activeTab === 'audio' && index$1.h("dyte-debugger-audio", Object.assign({}, defaults)), this.activeTab === 'video' && index$1.h("dyte-debugger-video", Object.assign({}, defaults)), this.activeTab === 'screenshare' && (index$1.h("dyte-debugger-screenshare", Object.assign({}, defaults))), this.activeTab === 'system' && showSystemsTab && (index$1.h("dyte-debugger-system", Object.assign({}, defaults))))));
    }
};
__decorate$F([
    index.SyncWithStore()
], DyteDebugger.prototype, "meeting", void 0);
__decorate$F([
    index.SyncWithStore()
], DyteDebugger.prototype, "states", void 0);
__decorate$F([
    index.SyncWithStore()
], DyteDebugger.prototype, "size", void 0);
__decorate$F([
    index.SyncWithStore()
], DyteDebugger.prototype, "iconPack", void 0);
__decorate$F([
    index.SyncWithStore()
], DyteDebugger.prototype, "t", void 0);
DyteDebugger.style = DyteDebuggerStyle0;

/** Method to return media health based on the media & network stats */
function getNetworkBasedMediaHealth({ stats, }) {
    if (!stats || !stats.length) {
        return null;
    }
    let networkHealth = 'Good';
    const allStatsHealths = stats.map((statsObj) => statsObj.verdict);
    if (allStatsHealths.includes('Poor')) {
        networkHealth = 'Poor';
    }
    else if (allStatsHealths.includes('Average')) {
        networkHealth = 'Average';
    }
    return networkHealth;
}
/** Gives verdict based on the packet loss */
function getPacketLossVerdict({ packetLossPercentage, }) {
    let verdict = 'Good';
    if (packetLossPercentage > 4) {
        verdict = 'Poor';
    }
    else if (packetLossPercentage >= 1 && packetLossPercentage <= 4) {
        verdict = 'Average';
    }
    return verdict;
}
/** Gives verdict based on the jitter */
function getJitterVerdict({ jitterInMS }) {
    let verdict = 'Good';
    if (jitterInMS > 100) {
        verdict = 'Poor';
    }
    else if (jitterInMS >= 50 && jitterInMS <= 100) {
        verdict = 'Average';
    }
    return verdict;
}
/** Gives verdict based on the jitter */
function getBitrateVerdict({ bitrate, }) {
    let verdict = 'Good';
    const bitrateInKbps = Math.round(bitrate / 1024); // it is Kilo bits
    if (bitrateInKbps === 0) {
        verdict = 'Poor';
    }
    return verdict;
}
function getOverallBatteryVerdict({ stats }) {
    if (!stats || !stats.length) {
        return null;
    }
    let networkHealth = 'Good';
    const allStatsHealths = stats.map((statsObj) => statsObj.verdict);
    if (allStatsHealths.includes('Poor')) {
        networkHealth = 'Poor';
    }
    else if (allStatsHealths.includes('Average')) {
        networkHealth = 'Average';
    }
    return networkHealth;
}
function getBatteryLevelVerdict({ batteryLevelPercentage, }) {
    let batteryLevelVerdict = 'Good';
    if (batteryLevelPercentage < 20) {
        batteryLevelVerdict = 'Poor';
    }
    else if (batteryLevelPercentage < 50) {
        batteryLevelVerdict = 'Average';
    }
    return batteryLevelVerdict;
}
function getBatteryChargingVerdict({ charging, dischargingTimeInSeconds, batteryLevelPercentage, }) {
    const MINS_30 = 30 * 60;
    if (batteryLevelPercentage < 20) {
        return 'Poor';
    }
    if (charging) {
        return 'Good';
    }
    if (dischargingTimeInSeconds < MINS_30) {
        return 'Poor';
    }
    return 'Average';
}

const dyteDebuggerAudioCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;height:100%;width:100%;color:rgb(var(--dyte-colors-text-1000, 255 255 255));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.tab-body::-webkit-scrollbar{width:var(--dyte-space-1\\.5, 6px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}.tab-body::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}h3{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:600}#header{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-5, 20px);display:flex;align-items:center;justify-content:space-evenly}.tab-body{margin:var(--dyte-space-4, 16px);display:flex;height:100%;flex-direction:column;justify-content:space-between;overflow-y:auto}.status-container{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));border-radius:8px;padding:16px}.status-section{margin-bottom:12px}.section-header{display:flex;justify-content:space-between;align-items:center;font-weight:bold;padding:8px 0}.section-header.only-child{justify-content:center}.section-body.missing-stats{display:flex;text-align:center;justify-content:center}.section-header .status{color:rgba(var(--dyte-colors-success));font-weight:bold}.section-header .arrow{font-size:14px}.network-table{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));border-radius:8px;margin-top:8px;overflow:hidden}.network-row{display:flex;justify-content:space-between;padding:12px;border-bottom:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}.network-row:last-child{border-bottom:none}.network-cell{display:flex;flex-direction:column}.network-cell.label strong{font-size:14px}.network-cell.label .description{font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));margin-top:4px}.network-cell.value{text-align:right}.status.good{color:rgba(var(--dyte-colors-success))}.status.average{color:rgba(var(--dyte-colors-warning))}.status.poor{color:rgba(var(--dyte-colors-danger))}.value{font-size:14px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));margin-top:4px}dyte-settings-audio{display:flex;flex-direction:column}";
const DyteDebuggerAudioStyle0 = dyteDebuggerAudioCss;

var __decorate$E = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDebuggerAudio = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Is Network section expanded */
        this.isNetworkOpen = true;
        /** Is Devices section expanded */
        this.isDevicesOpen = false;
        /** Stats as formatted array to display */
        this.audioProducerFormattedStats = [];
        /** Last raw audio score stats obj */
        this.audioProducerScoreStats = null;
        /** Summarised health of network stats */
        this.networkBasedMediaHealth = null;
        /** Summarised health of devices */
        this.devicesHealth = null;
        // private toggleSection(section: string) {
        //   if (section === 'network') this.isNetworkOpen = !this.isNetworkOpen;
        //   else if (section === 'devices') this.isDevicesOpen = !this.isDevicesOpen;
        // }
        this.mediaScoreUpdateListener = ({ kind, isScreenshare, scoreStats, }) => {
            if (kind === 'audio' && !isScreenshare) {
                this.audioProducerScoreStats = scoreStats;
            }
        };
        this.deviceListUpdateListener = async () => {
            const audioDevices = await this.meeting.self.getAudioDevices();
            this.devicesHealth = (audioDevices === null || audioDevices === void 0 ? void 0 : audioDevices.length) > 0 ? 'Good' : 'Poor';
        };
        this.audioUpdateListener = () => {
            if (!this.meeting.self.audioEnabled) {
                this.audioProducerScoreStats = null;
            }
        };
    }
    async audioProducerScoreStatsChanged(newAudioProducerScoreStats) {
        if (!newAudioProducerScoreStats) {
            this.audioProducerFormattedStats = [];
            return;
        }
        const statsObj = newAudioProducerScoreStats;
        const newStatsList = [];
        newStatsList.push({
            name: this.t('debugger.stats.bitrate.label'),
            value: `${Math.round(statsObj.bitrate / 1024)} kbps`,
            description: this.t('debugger.stats.bitrate.description'),
            verdict: getBitrateVerdict({
                bitrate: statsObj.bitrate,
                kind: 'audio',
                isScreenshare: false,
            }),
        });
        newStatsList.push({
            name: this.t('debugger.stats.packet_loss.label'),
            value: `${statsObj.packetsLostPercentage}%`,
            description: this.t('debugger.stats.packet_loss.description'),
            verdict: getPacketLossVerdict({ packetLossPercentage: statsObj.packetsLostPercentage }),
        });
        newStatsList.push({
            name: this.t('debugger.stats.jitter.label'),
            value: `${Math.round(statsObj.jitter * 1000)} ms`,
            description: this.t('debugger.stats.jitter.description'),
            verdict: getJitterVerdict({ jitterInMS: statsObj.jitter * 1000 }),
        });
        this.audioProducerFormattedStats = newStatsList;
        this.networkBasedMediaHealth = getNetworkBasedMediaHealth({
            kind: 'audio',
            isScreenshare: false,
            stats: newStatsList,
        });
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        if (!this.meeting) {
            return;
        }
        this.meeting.self.off('mediaScoreUpdate', this.mediaScoreUpdateListener);
        this.meeting.self.off('audioUpdate', this.audioUpdateListener);
        this.meeting.self.off('deviceListUpdate', this.deviceListUpdateListener);
    }
    async meetingChanged(meeting) {
        if (!meeting)
            return;
        meeting.self.on('mediaScoreUpdate', this.mediaScoreUpdateListener);
        meeting.self.on('audioUpdate', this.audioUpdateListener);
        meeting.self.on('deviceListUpdate', this.deviceListUpdateListener);
        await this.deviceListUpdateListener();
    }
    render() {
        var _a, _b;
        if (!this.meeting) {
            return;
        }
        // const defaults = {
        //   meeting: this.meeting,
        //   states: this.states || storeState,
        //   iconPack: this.iconPack,
        //   t: this.t,
        // };
        return (index$1.h(index$1.Host, null, index$1.h("div", { id: "header" }), index$1.h("div", { class: "tab-body" }, index$1.h("div", { class: "status-container" }, index$1.h("div", { class: "status-section" }, index$1.h("div", { class: `section-header ${!this.networkBasedMediaHealth ? 'only-child' : ''}` }, index$1.h("span", null, this.t('debugger.audio.sections.network_media')), this.networkBasedMediaHealth && (index$1.h("span", { class: `status ${(_a = this.networkBasedMediaHealth) === null || _a === void 0 ? void 0 : _a.toLowerCase()}` }, this.t(`debugger.quality.${(_b = this.networkBasedMediaHealth) === null || _b === void 0 ? void 0 : _b.toLowerCase()}`)))), this.isNetworkOpen && !this.audioProducerFormattedStats.length && (index$1.h("div", { class: "section-body missing-stats" }, this.meeting.self.audioEnabled ? (index$1.h("span", null, this.t('debugger.audio.messages.generating_report'))) : (index$1.h("span", null, this.t('debugger.audio.messages.enable_media'))))), this.isNetworkOpen && !!this.audioProducerFormattedStats.length && (index$1.h("div", { class: "section-body network-table" }, this.audioProducerFormattedStats.map((formattedStatsObj) => {
            var _a, _b;
            return (index$1.h("div", { class: "network-row" }, index$1.h("div", { class: "network-cell label" }, index$1.h("strong", null, formattedStatsObj.name), index$1.h("span", { class: "description" }, formattedStatsObj.description)), index$1.h("div", { class: "network-cell value" }, index$1.h("span", { class: `status ${(_a = formattedStatsObj.verdict) === null || _a === void 0 ? void 0 : _a.toLowerCase()}` }, this.t(`debugger.quality.${(_b = formattedStatsObj.verdict) === null || _b === void 0 ? void 0 : _b.toLowerCase()}`)), index$1.h("span", { class: "value" }, formattedStatsObj.value))));
        }))))))));
    }
    static get watchers() { return {
        "audioProducerScoreStats": ["audioProducerScoreStatsChanged"],
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$E([
    index.SyncWithStore()
], DyteDebuggerAudio.prototype, "meeting", void 0);
__decorate$E([
    index.SyncWithStore()
], DyteDebuggerAudio.prototype, "states", void 0);
__decorate$E([
    index.SyncWithStore()
], DyteDebuggerAudio.prototype, "size", void 0);
__decorate$E([
    index.SyncWithStore()
], DyteDebuggerAudio.prototype, "iconPack", void 0);
__decorate$E([
    index.SyncWithStore()
], DyteDebuggerAudio.prototype, "t", void 0);
DyteDebuggerAudio.style = DyteDebuggerAudioStyle0;

const dyteDebuggerScreenshareCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;height:100%;width:100%;color:rgb(var(--dyte-colors-text-1000, 255 255 255));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.tab-body::-webkit-scrollbar{width:var(--dyte-space-1\\.5, 6px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}.tab-body::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}h3{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:600}#header{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-5, 20px);display:flex;align-items:center;justify-content:space-evenly}.tab-body{margin:var(--dyte-space-4, 16px);display:flex;height:100%;flex-direction:column;justify-content:space-between;overflow-y:auto}.status-container{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));border-radius:8px;padding:16px}.status-section{margin-bottom:12px}.section-header{display:flex;justify-content:space-between;align-items:center;font-weight:bold;padding:8px 0}.section-header.only-child{justify-content:center}.section-body.missing-stats{display:flex;text-align:center;justify-content:center}.section-header .status{color:rgba(var(--dyte-colors-success));font-weight:bold}.section-header .arrow{font-size:14px}.network-table{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));border-radius:8px;margin-top:8px;overflow:hidden}.network-row{display:flex;justify-content:space-between;padding:12px;border-bottom:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}.network-row:last-child{border-bottom:none}.network-cell{display:flex;flex-direction:column}.network-cell.label strong{font-size:14px}.network-cell.label .description{font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));margin-top:4px}.network-cell.value{text-align:right}.status.good{color:rgba(var(--dyte-colors-success))}.status.average{color:rgba(var(--dyte-colors-warning))}.status.poor{color:rgba(var(--dyte-colors-danger))}.value{font-size:14px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));margin-top:4px}";
const DyteDebuggerScreenshareStyle0 = dyteDebuggerScreenshareCss;

var __decorate$D = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDebuggerScreenShare = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Is Network section expanded */
        this.isNetworkOpen = true;
        /** Is Devices section expanded */
        this.isDevicesOpen = false;
        /** Stats as formatted array to display */
        this.videoProducerFormattedStats = [];
        /** Last raw video score stats obj */
        this.videoProducerScoreStats = null;
        /** Stats as formatted array to display */
        this.audioProducerFormattedStats = [];
        /** Last raw video score stats obj */
        this.audioProducerScoreStats = null;
        /** Summarised health of network stats */
        this.networkBasedMediaHealth = null;
        // private toggleSection(section: string) {
        //   if (section === 'network') this.isNetworkOpen = !this.isNetworkOpen;
        //   else if (section === 'devices') this.isDevicesOpen = !this.isDevicesOpen;
        // }
        this.mediaScoreUpdateListener = ({ kind, isScreenshare, scoreStats, }) => {
            if (kind === 'video' && isScreenshare) {
                this.videoProducerScoreStats = scoreStats;
            }
            if (kind === 'audio' && isScreenshare) {
                this.audioProducerScoreStats = scoreStats;
            }
        };
        this.screenShareUpdateListener = () => {
            if (!this.meeting.self.screenShareEnabled) {
                this.videoProducerScoreStats = null;
                this.audioProducerScoreStats = null;
            }
        };
    }
    async videoProducerScoreStatsChanged(newVideoProducerScoreStats) {
        if (!newVideoProducerScoreStats) {
            this.videoProducerFormattedStats = [];
            return;
        }
        const statsObj = newVideoProducerScoreStats;
        const newStatsList = [];
        newStatsList.push({
            name: this.t('debugger.stats.cpu_limitations.label'),
            value: statsObj.cpuLimitations ? 'Yes' : 'No',
            description: this.t('debugger.stats.cpu_limitations.description'),
            verdict: statsObj.cpuLimitations ? 'Poor' : 'Good',
        });
        newStatsList.push({
            name: this.t('debugger.stats.bandwidth_limitations.label'),
            value: statsObj.bandwidthLimitations ? 'Yes' : 'No',
            description: this.t('debugger.stats.bandwidth_limitations.description'),
            verdict: statsObj.bandwidthLimitations ? 'Poor' : 'Good',
        });
        newStatsList.push({
            name: this.t('debugger.stats.bitrate.label'),
            value: `${Math.round(statsObj.bitrate / 1024)} kbps`,
            description: this.t('debugger.stats.bitrate.description'),
            verdict: getBitrateVerdict({
                bitrate: statsObj.bitrate,
                kind: 'video',
                isScreenshare: false,
            }),
        });
        newStatsList.push({
            name: this.t('debugger.stats.packet_loss.label'),
            value: `${statsObj.packetsLostPercentage}%`,
            description: this.t('debugger.stats.packet_loss.description'),
            verdict: getPacketLossVerdict({ packetLossPercentage: statsObj.packetsLostPercentage }),
        });
        newStatsList.push({
            name: this.t('debugger.stats.jitter.label'),
            value: `${Math.round(statsObj.jitter * 1000)} ms`,
            description: this.t('debugger.stats.jitter.description'),
            verdict: getJitterVerdict({ jitterInMS: statsObj.jitter * 1000 }),
        });
        this.videoProducerFormattedStats = newStatsList;
        this.networkBasedMediaHealth = getNetworkBasedMediaHealth({
            kind: 'video',
            isScreenshare: false,
            stats: newStatsList,
        });
    }
    async audioProducerScoreStatsChanged(newAudioProducerScoreStats) {
        if (!newAudioProducerScoreStats) {
            this.audioProducerFormattedStats = [];
            return;
        }
        const statsObj = newAudioProducerScoreStats;
        const newStatsList = [];
        newStatsList.push({
            name: this.t('debugger.stats.bitrate.label'),
            value: `${Math.round(statsObj.bitrate / 1024)} kbps`,
            description: this.t('debugger.stats.bitrate.description'),
            verdict: getBitrateVerdict({
                bitrate: statsObj.bitrate,
                kind: 'audio',
                isScreenshare: true,
            }),
        });
        newStatsList.push({
            name: this.t('debugger.stats.packet_loss.label'),
            value: `${statsObj.packetsLostPercentage}%`,
            description: this.t('debugger.stats.packet_loss.description'),
            verdict: getPacketLossVerdict({ packetLossPercentage: statsObj.packetsLostPercentage }),
        });
        newStatsList.push({
            name: this.t('debugger.stats.jitter.label'),
            value: `${Math.round(statsObj.jitter * 1000)} ms`,
            description: this.t('debugger.stats.jitter.description'),
            verdict: getJitterVerdict({ jitterInMS: statsObj.jitter * 1000 }),
        });
        this.audioProducerFormattedStats = newStatsList;
        /** Only screenshare video is deciding the media health currently */
        // this.networkBasedMediaHealth = getNetworkBasedMediaHealth({
        //   kind: 'audio',
        //   isScreenshare: true,
        //   stats: newStatsList,
        // });
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        if (!this.meeting) {
            return;
        }
        this.meeting.self.off('mediaScoreUpdate', this.mediaScoreUpdateListener);
        this.meeting.self.off('screenShareUpdate', this.screenShareUpdateListener);
    }
    async meetingChanged(meeting) {
        if (!meeting)
            return;
        meeting.self.on('mediaScoreUpdate', this.mediaScoreUpdateListener);
        meeting.self.on('screenShareUpdate', this.screenShareUpdateListener);
    }
    render() {
        var _a, _b;
        if (!this.meeting) {
            return;
        }
        return (index$1.h(index$1.Host, null, index$1.h("div", { id: "header" }), index$1.h("div", { class: "tab-body" }, index$1.h("div", { class: "status-container" }, index$1.h("div", { class: "status-section" }, index$1.h("div", { class: `section-header ${!this.networkBasedMediaHealth ? 'only-child' : ''}` }, index$1.h("span", null, this.t('debugger.screenshare.sections.network_media')), this.networkBasedMediaHealth && (index$1.h("span", { class: `status ${(_a = this.networkBasedMediaHealth) === null || _a === void 0 ? void 0 : _a.toLowerCase()}` }, this.t(`debugger.quality.${(_b = this.networkBasedMediaHealth) === null || _b === void 0 ? void 0 : _b.toLowerCase()}`)))), this.isNetworkOpen && !this.videoProducerFormattedStats.length && (index$1.h("div", { class: "section-body missing-stats" }, this.meeting.self.screenShareEnabled ? (index$1.h("span", null, this.t('debugger.screenshare.messages.generating_report'))) : (index$1.h("span", null, this.t('debugger.screenshare.messages.enable_media'))))), this.isNetworkOpen && !!this.videoProducerFormattedStats.length && (index$1.h("div", { class: "section-body network-table" }, this.videoProducerFormattedStats.map((formattedStatsObj) => {
            var _a, _b;
            return (index$1.h("div", { class: "network-row" }, index$1.h("div", { class: "network-cell label" }, index$1.h("strong", null, formattedStatsObj.name), index$1.h("span", { class: "description" }, formattedStatsObj.description)), index$1.h("div", { class: "network-cell value" }, index$1.h("span", { class: `status ${(_a = formattedStatsObj.verdict) === null || _a === void 0 ? void 0 : _a.toLowerCase()}` }, this.t(`debugger.quality.${(_b = formattedStatsObj.verdict) === null || _b === void 0 ? void 0 : _b.toLowerCase()}`)), index$1.h("span", { class: "value" }, formattedStatsObj.value))));
        }))))))));
    }
    static get watchers() { return {
        "videoProducerScoreStats": ["videoProducerScoreStatsChanged"],
        "audioProducerScoreStats": ["audioProducerScoreStatsChanged"],
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$D([
    index.SyncWithStore()
], DyteDebuggerScreenShare.prototype, "meeting", void 0);
__decorate$D([
    index.SyncWithStore()
], DyteDebuggerScreenShare.prototype, "states", void 0);
__decorate$D([
    index.SyncWithStore()
], DyteDebuggerScreenShare.prototype, "size", void 0);
__decorate$D([
    index.SyncWithStore()
], DyteDebuggerScreenShare.prototype, "iconPack", void 0);
__decorate$D([
    index.SyncWithStore()
], DyteDebuggerScreenShare.prototype, "t", void 0);
DyteDebuggerScreenShare.style = DyteDebuggerScreenshareStyle0;

const dyteDebuggerSystemCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;height:100%;width:100%;color:rgb(var(--dyte-colors-text-1000, 255 255 255));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.tab-body::-webkit-scrollbar{width:var(--dyte-space-1\\.5, 6px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}.tab-body::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}h3{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:600}#header{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-5, 20px);display:flex;align-items:center;justify-content:space-evenly}.tab-body{margin:var(--dyte-space-4, 16px);display:flex;height:100%;flex-direction:column;justify-content:space-between;overflow-y:auto}.status-container{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));border-radius:8px;padding:16px}.status-section{margin-bottom:12px}.section-header{display:flex;justify-content:space-between;align-items:center;font-weight:bold;padding:8px 0}.section-body.missing-stats{display:flex;text-align:center;justify-content:center}.section-header .status{color:rgba(var(--dyte-colors-success));font-weight:bold}.section-header .arrow{font-size:14px}.battery-table{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));border-radius:8px;margin-top:8px;overflow:hidden}.battery-row{display:flex;justify-content:space-between;padding:12px;border-bottom:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}.battery-row:last-child{border-bottom:none}.battery-cell{display:flex;flex-direction:column}.battery-cell.label strong{font-size:14px}.battery-cell.label .description{font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));margin-top:4px}.battery-cell.value{text-align:right}.status.good{color:rgba(var(--dyte-colors-success))}.status.average{color:rgba(var(--dyte-colors-warning))}.status.poor{color:rgba(var(--dyte-colors-danger))}.value{font-size:14px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));margin-top:4px}dyte-settings-video{display:flex;flex-direction:column}";
const DyteDebuggerSystemStyle0 = dyteDebuggerSystemCss;

var __decorate$C = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDebuggerSystem = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Is Network section expanded */
        this.isBatterySectionOpen = true;
        /** Summarised health of network stats */
        this.batterySectionHealth = null;
        /** Battery manager */
        this.battery = null;
        /** Stats as formatted array to display */
        this.batteryFormattedStats = [];
        this.batteryUpdateListener = () => {
            const batteryLevelPercentage = Math.round(this.battery.level * 100);
            const newBatteryStats = [];
            newBatteryStats.push({
                name: this.t('debugger.system.battery.level.label'),
                value: `${batteryLevelPercentage}%`,
                description: this.t('debugger.system.battery.level.description'),
                verdict: getBatteryLevelVerdict({
                    batteryLevelPercentage,
                }),
            });
            newBatteryStats.push({
                name: this.t('debugger.system.battery.charging.label'),
                value: `${this.battery.charging
                    ? this.t('debugger.system.battery.charging.is_charging')
                    : this.t('debugger.system.battery.charging.is_not_charging')}`,
                description: this.t('debugger.system.battery.charging.description'),
                verdict: getBatteryChargingVerdict({
                    batteryLevelPercentage,
                    chargingTimeInSeconds: this.battery.chargingTime,
                    dischargingTimeInSeconds: this.battery.dischargingTime,
                    charging: this.battery.charging,
                }),
            });
            this.batterySectionHealth = getOverallBatteryVerdict({
                stats: newBatteryStats,
            });
            this.batteryFormattedStats = newBatteryStats;
        };
    }
    toggleSection(section) {
        if (section === 'battery')
            this.isBatterySectionOpen = !this.isBatterySectionOpen;
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        if (!this.meeting) {
            return;
        }
        if (this.battery) {
            this.battery.removeEventListener('levelchange', this.batteryUpdateListener);
            this.battery.removeEventListener('chargingchange', this.batteryUpdateListener);
        }
    }
    async meetingChanged(meeting) {
        if (!meeting)
            return;
        if (typeof navigator.getBattery !== 'undefined') {
            this.battery = await navigator.getBattery();
            this.battery.addEventListener('levelchange', this.batteryUpdateListener);
            this.battery.addEventListener('chargingchange', this.batteryUpdateListener);
            this.batteryUpdateListener();
        }
    }
    render() {
        var _a, _b;
        if (!this.meeting) {
            return;
        }
        return (index$1.h(index$1.Host, null, index$1.h("div", { id: "header" }), index$1.h("div", { class: "tab-body" }, index$1.h("div", { class: "status-container" }, index$1.h("div", { class: "status-section" }, index$1.h("div", { class: "section-header", onClick: () => this.toggleSection('battery') }, index$1.h("span", null, this.t('debugger.system.sections.battery')), this.batterySectionHealth && (index$1.h("span", { class: `status ${(_a = this.batterySectionHealth) === null || _a === void 0 ? void 0 : _a.toLowerCase()}` }, this.t(`debugger.quality.${(_b = this.batterySectionHealth) === null || _b === void 0 ? void 0 : _b.toLowerCase()}`)))), this.isBatterySectionOpen && !!this.batteryFormattedStats.length && (index$1.h("div", { class: "section-body battery-table" }, this.batteryFormattedStats.map((formattedStatsObj) => {
            var _a, _b;
            return (index$1.h("div", { class: "battery-row" }, index$1.h("div", { class: "battery-cell label" }, index$1.h("strong", null, formattedStatsObj.name), index$1.h("span", { class: "description" }, formattedStatsObj.description)), index$1.h("div", { class: "battery-cell value" }, index$1.h("span", { class: `status ${(_a = formattedStatsObj.verdict) === null || _a === void 0 ? void 0 : _a.toLowerCase()}` }, this.t(`debugger.quality.${(_b = formattedStatsObj.verdict) === null || _b === void 0 ? void 0 : _b.toLowerCase()}`)), index$1.h("span", { class: "value" }, formattedStatsObj.value))));
        }))))))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$C([
    index.SyncWithStore()
], DyteDebuggerSystem.prototype, "meeting", void 0);
__decorate$C([
    index.SyncWithStore()
], DyteDebuggerSystem.prototype, "states", void 0);
__decorate$C([
    index.SyncWithStore()
], DyteDebuggerSystem.prototype, "size", void 0);
__decorate$C([
    index.SyncWithStore()
], DyteDebuggerSystem.prototype, "iconPack", void 0);
__decorate$C([
    index.SyncWithStore()
], DyteDebuggerSystem.prototype, "t", void 0);
DyteDebuggerSystem.style = DyteDebuggerSystemStyle0;

const dyteDebuggerVideoCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;height:100%;width:100%;color:rgb(var(--dyte-colors-text-1000, 255 255 255));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.tab-body::-webkit-scrollbar{width:var(--dyte-space-1\\.5, 6px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}.tab-body::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}h3{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:600}#header{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-5, 20px);display:flex;align-items:center;justify-content:space-evenly}.tab-body{margin:var(--dyte-space-4, 16px);display:flex;height:100%;flex-direction:column;justify-content:space-between;overflow-y:auto}.status-container{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));border-radius:8px;padding:16px}.status-section{margin-bottom:12px}.section-header{display:flex;justify-content:space-between;align-items:center;font-weight:bold;padding:8px 0}.section-header.only-child{justify-content:center}.section-body.missing-stats{display:flex;text-align:center;justify-content:center}.section-header .status{color:rgba(var(--dyte-colors-success));font-weight:bold}.section-header .arrow{font-size:14px}.network-table{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));border-radius:8px;margin-top:8px;overflow:hidden}.network-row{display:flex;justify-content:space-between;padding:12px;border-bottom:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}.network-row:last-child{border-bottom:none}.network-cell{display:flex;flex-direction:column}.network-cell.label strong{font-size:14px}.network-cell.label .description{font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));margin-top:4px}.network-cell.value{text-align:right}.status.good{color:rgba(var(--dyte-colors-success))}.status.average{color:rgba(var(--dyte-colors-warning))}.status.poor{color:rgba(var(--dyte-colors-danger))}.value{font-size:14px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));margin-top:4px}dyte-settings-video{display:flex;flex-direction:column}";
const DyteDebuggerVideoStyle0 = dyteDebuggerVideoCss;

var __decorate$B = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDebuggerVideo = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Is Network section expanded */
        this.isNetworkOpen = true;
        /** Is Devices section expanded */
        this.isDevicesOpen = false;
        /** Stats as formatted array to display */
        this.videoProducerFormattedStats = [];
        /** Last raw video score stats obj */
        this.videoProducerScoreStats = null;
        /** Summarised health of network stats */
        this.networkBasedMediaHealth = null;
        /** Summarised health of devices */
        this.devicesHealth = null;
        // private toggleSection(section: string) {
        //   if (section === 'network') this.isNetworkOpen = !this.isNetworkOpen;
        //   else if (section === 'devices') this.isDevicesOpen = !this.isDevicesOpen;
        // }
        this.mediaScoreUpdateListener = ({ kind, isScreenshare, scoreStats, }) => {
            if (kind === 'video' && !isScreenshare) {
                this.videoProducerScoreStats = scoreStats;
            }
        };
        this.deviceListUpdateListener = async () => {
            const videoDevices = await this.meeting.self.getVideoDevices();
            this.devicesHealth = (videoDevices === null || videoDevices === void 0 ? void 0 : videoDevices.length) > 0 ? 'Good' : 'Poor';
        };
        this.videoUpdateListener = () => {
            if (!this.meeting.self.videoEnabled) {
                this.videoProducerScoreStats = null;
            }
        };
    }
    async videoProducerScoreStatsChanged(newVideoProducerScoreStats) {
        if (!newVideoProducerScoreStats) {
            this.videoProducerFormattedStats = [];
            return;
        }
        const statsObj = newVideoProducerScoreStats;
        const newStatsList = [];
        newStatsList.push({
            name: this.t('debugger.stats.cpu_limitations.label'),
            value: statsObj.cpuLimitations ? 'Yes' : 'No',
            description: this.t('debugger.stats.cpu_limitations.description'),
            verdict: statsObj.cpuLimitations ? 'Poor' : 'Good',
        });
        newStatsList.push({
            name: this.t('debugger.stats.bandwidth_limitations.label'),
            value: statsObj.bandwidthLimitations ? 'Yes' : 'No',
            description: this.t('debugger.stats.bandwidth_limitations.description'),
            verdict: statsObj.bandwidthLimitations ? 'Poor' : 'Good',
        });
        newStatsList.push({
            name: this.t('debugger.stats.bitrate.label'),
            value: `${Math.round(statsObj.bitrate / 1024)} kbps`,
            description: this.t('debugger.stats.bitrate.description'),
            verdict: getBitrateVerdict({
                bitrate: statsObj.bitrate,
                kind: 'video',
                isScreenshare: false,
            }),
        });
        newStatsList.push({
            name: this.t('debugger.stats.packet_loss.label'),
            value: `${statsObj.packetsLostPercentage}%`,
            description: this.t('debugger.stats.packet_loss.description'),
            verdict: getPacketLossVerdict({ packetLossPercentage: statsObj.packetsLostPercentage }),
        });
        newStatsList.push({
            name: this.t('debugger.stats.jitter.label'),
            value: `${Math.round(statsObj.jitter * 1000)} ms`,
            description: this.t('debugger.stats.jitter.description'),
            verdict: getJitterVerdict({ jitterInMS: statsObj.jitter * 1000 }),
        });
        this.videoProducerFormattedStats = newStatsList;
        this.networkBasedMediaHealth = getNetworkBasedMediaHealth({
            kind: 'video',
            isScreenshare: false,
            stats: newStatsList,
        });
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        if (!this.meeting) {
            return;
        }
        this.meeting.self.off('mediaScoreUpdate', this.mediaScoreUpdateListener);
        this.meeting.self.off('videoUpdate', this.videoUpdateListener);
        this.meeting.self.off('deviceListUpdate', this.deviceListUpdateListener);
    }
    async meetingChanged(meeting) {
        if (!meeting)
            return;
        meeting.self.on('mediaScoreUpdate', this.mediaScoreUpdateListener);
        meeting.self.on('videoUpdate', this.videoUpdateListener);
        meeting.self.on('deviceListUpdate', this.deviceListUpdateListener);
        await this.deviceListUpdateListener();
    }
    render() {
        var _a, _b;
        if (!this.meeting) {
            return;
        }
        // const defaults = {
        //   meeting: this.meeting,
        //   states: this.states || storeState,
        //   iconPack: this.iconPack,
        //   t: this.t,
        // };
        return (index$1.h(index$1.Host, null, index$1.h("div", { id: "header" }), index$1.h("div", { class: "tab-body" }, index$1.h("div", { class: "status-container" }, index$1.h("div", { class: "status-section" }, index$1.h("div", { class: `section-header ${!this.networkBasedMediaHealth ? 'only-child' : ''}` }, index$1.h("span", null, this.t('debugger.video.sections.network_media')), this.networkBasedMediaHealth && (index$1.h("span", { class: `status ${(_a = this.networkBasedMediaHealth) === null || _a === void 0 ? void 0 : _a.toLowerCase()}` }, this.t(`debugger.quality.${(_b = this.networkBasedMediaHealth) === null || _b === void 0 ? void 0 : _b.toLowerCase()}`)))), this.isNetworkOpen && !this.videoProducerFormattedStats.length && (index$1.h("div", { class: "section-body missing-stats" }, this.meeting.self.videoEnabled ? (index$1.h("span", null, this.t('debugger.video.messages.generating_report'))) : (index$1.h("span", null, this.t('debugger.video.messages.enable_media'))))), this.isNetworkOpen && !!this.videoProducerFormattedStats.length && (index$1.h("div", { class: "section-body network-table" }, this.videoProducerFormattedStats.map((formattedStatsObj) => {
            var _a, _b;
            return (index$1.h("div", { class: "network-row" }, index$1.h("div", { class: "network-cell label" }, index$1.h("strong", null, formattedStatsObj.name), index$1.h("span", { class: "description" }, formattedStatsObj.description)), index$1.h("div", { class: "network-cell value" }, index$1.h("span", { class: `status ${(_a = formattedStatsObj.verdict) === null || _a === void 0 ? void 0 : _a.toLowerCase()}` }, this.t(`debugger.quality.${(_b = formattedStatsObj.verdict) === null || _b === void 0 ? void 0 : _b.toLowerCase()}`)), index$1.h("span", { class: "value" }, formattedStatsObj.value))));
        }))))))));
    }
    static get watchers() { return {
        "videoProducerScoreStats": ["videoProducerScoreStatsChanged"],
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$B([
    index.SyncWithStore()
], DyteDebuggerVideo.prototype, "meeting", void 0);
__decorate$B([
    index.SyncWithStore()
], DyteDebuggerVideo.prototype, "states", void 0);
__decorate$B([
    index.SyncWithStore()
], DyteDebuggerVideo.prototype, "size", void 0);
__decorate$B([
    index.SyncWithStore()
], DyteDebuggerVideo.prototype, "iconPack", void 0);
__decorate$B([
    index.SyncWithStore()
], DyteDebuggerVideo.prototype, "t", void 0);
DyteDebuggerVideo.style = DyteDebuggerVideoStyle0;

const dyteDialogCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:fixed;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);box-sizing:border-box;padding:var(--dyte-space-4, 16px);flex-direction:column;align-items:center;justify-content:center;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / 0.5);color:rgb(var(--dyte-colors-text-1000, 255 255 255));visibility:hidden;display:none;overflow-wrap:break-word;word-wrap:break-word;z-index:60;-webkit-backdrop-filter:blur(12px) saturate(180%);backdrop-filter:blur(12px) saturate(180%)}#dialog{position:relative;max-height:100%;max-width:100%}#dismiss-btn{position:absolute;top:var(--dyte-space-3, 12px);right:var(--dyte-space-3, 12px);z-index:50}::slotted(*){max-height:100%;max-width:100%}:host([open]){visibility:visible;display:flex}:host([open='false']){visibility:hidden;display:none}";
const DyteDialogStyle0 = dyteDialogCss;

var __decorate$A = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDialog = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onClose = index$1.createEvent(this, "dyteDialogClose", 7);
        /** Whether to show the close button */
        this.hideCloseButton = false;
        /** Whether Escape key can close the modal */
        this.disableEscapeKey = false;
        /** UI Config */
        this.config = uiStore.defaultConfig;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Whether a dialog is open or not */
        this.open = true;
        this.close = () => {
            this.open = false;
            this.onClose.emit();
        };
        this.keydownListener = (e) => {
            if (!this.disableEscapeKey && e.key === 'Escape' && this.open) {
                this.close();
            }
        };
    }
    connectedCallback() {
        document.addEventListener('keydown', this.keydownListener);
    }
    disconnectedCallback() {
        document.removeEventListener('keydown', this.keydownListener);
    }
    render() {
        if (!this.open) {
            return null;
        }
        return (index$1.h(index$1.Host, null, index$1.h("div", { id: "dialog", part: "container", role: "dialog", "aria-modal": "true" }, index$1.h("slot", null), !this.hideCloseButton && (index$1.h("dyte-button", { part: "close-button", id: "dismiss-btn", kind: "icon", variant: "ghost", onClick: () => this.close(), type: "button", "aria-label": this.t('dialog.close'), role: "button" }, index$1.h("dyte-icon", { icon: this.iconPack.dismiss }))))));
    }
};
__decorate$A([
    index.SyncWithStore()
], DyteDialog.prototype, "meeting", void 0);
__decorate$A([
    index.SyncWithStore()
], DyteDialog.prototype, "states", void 0);
__decorate$A([
    index.SyncWithStore()
], DyteDialog.prototype, "size", void 0);
__decorate$A([
    index.SyncWithStore()
], DyteDialog.prototype, "iconPack", void 0);
__decorate$A([
    index.SyncWithStore()
], DyteDialog.prototype, "t", void 0);
DyteDialog.style = DyteDialogStyle0;

const dyteDialogManagerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";
const DyteDialogManagerStyle0 = dyteDialogManagerCss;

var __decorate$z = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDialogManager = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** UI Config */
        this.config = uiStore.defaultConfig;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.updateStoreState = (state, value) => {
            this.stateUpdate.emit({ [state]: value });
        };
        this.cancelJoinStage = async () => {
            var _a, _b, _c;
            if (((_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.status) === 'ACCEPTED_TO_JOIN_STAGE') {
                await ((_c = (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.stage) === null || _c === void 0 ? void 0 : _c.leave());
            }
            this.updateStoreState('activeJoinStage', false);
        };
        this.joinStage = async () => {
            await this.meeting.stage.join();
            /** NOTE(ishita1805): We close the modal once the status has changed */
        };
        this.stageStatusUpdateListener = (status) => {
            var _a;
            if (!((_a = this.states) === null || _a === void 0 ? void 0 : _a.activeJoinStage))
                return;
            if (status === 'ON_STAGE')
                this.updateStoreState('activeJoinStage', false);
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a;
        (_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.removeListener('stageStatusUpdate', this.stageStatusUpdateListener);
    }
    meetingChanged(meeting) {
        if (meeting == undefined)
            return;
        const { stage } = meeting;
        stage === null || stage === void 0 ? void 0 : stage.addListener('stageStatusUpdate', this.stageStatusUpdateListener);
    }
    render() {
        var _a, _b, _c, _d;
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            config: this.config,
            size: this.size,
            iconPack: this.iconPack,
            t: this.t,
        };
        const states = this.states;
        if ((states === null || states === void 0 ? void 0 : states.image) != null) {
            const image = states.image;
            const onImageClose = () => {
                this.stateUpdate.emit({ image: null });
            };
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: onImageClose, hideCloseButton: true, iconPack: this.iconPack, t: this.t }, index$1.h("dyte-image-viewer", Object.assign({}, defaults, { image: image, onClose: onImageClose })))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeSettings) === true) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeSettings', false), iconPack: this.iconPack, t: this.t }, index$1.h("dyte-settings", Object.assign({}, defaults)))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeDebugger) === true) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeDebugger', false), iconPack: this.iconPack, t: this.t }, index$1.h("dyte-debugger", Object.assign({}, defaults)))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeLeaveConfirmation) === true) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeLeaveConfirmation', false), iconPack: this.iconPack, t: this.t }, index$1.h("dyte-leave-meeting", Object.assign({}, defaults)))));
        }
        else if (((_a = states === null || states === void 0 ? void 0 : states.activePermissionsMessage) === null || _a === void 0 ? void 0 : _a.enabled) === true) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, hideCloseButton: true, iconPack: this.iconPack, t: this.t }, index$1.h("dyte-permissions-message", Object.assign({}, defaults)))));
        }
        else if (((_b = states === null || states === void 0 ? void 0 : states.activeBreakoutRoomsManager) === null || _b === void 0 ? void 0 : _b.active) === true) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeBreakoutRoomsManager', {
                    active: false,
                    data: undefined,
                }), iconPack: this.iconPack, t: this.t }, index$1.h("dyte-breakout-rooms-manager", Object.assign({}, defaults)))));
        }
        else if (((_c = states === null || states === void 0 ? void 0 : states.activeConfirmationModal) === null || _c === void 0 ? void 0 : _c.active) === true) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeConfirmationModal', false), iconPack: this.iconPack, t: this.t }, index$1.h("dyte-confirmation-modal", Object.assign({}, defaults)))));
        }
        else if (((_d = states === null || states === void 0 ? void 0 : states.activeOverlayModal) === null || _d === void 0 ? void 0 : _d.active) === true) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-overlay-modal", { meeting: this.meeting, states: this.states, iconPack: this.iconPack, t: this.t })));
        }
        else if (states === null || states === void 0 ? void 0 : states.activeBroadcastMessageModal) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeBroadcastMessageModal', false), iconPack: this.iconPack, t: this.t }, index$1.h("dyte-broadcast-message-modal", Object.assign({}, defaults)))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeJoinStage) === true) {
            const dataState = {
                title: this.t('stage.join_title'),
                label: {
                    accept: this.t('stage.join_confirm'),
                    reject: this.t('stage.join_cancel'),
                },
                description: this.t('stage.join_summary'),
            };
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: this.cancelJoinStage, iconPack: this.iconPack, t: this.t }, index$1.h("dyte-join-stage", Object.assign({ dataConfig: dataState, onDyteJoinStage: this.joinStage, onDyteLeaveStage: this.cancelJoinStage }, defaults)))));
        }
        else if ((states === null || states === void 0 ? void 0 : states.activeMuteAllConfirmation) === true) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => {
                    this.updateStoreState('activeMuteAllConfirmation', false);
                }, iconPack: this.iconPack, t: this.t }, index$1.h("dyte-mute-all-confirmation", Object.assign({}, defaults)))));
        }
        else if (states === null || states === void 0 ? void 0 : states.activeChannelCreator) {
            return (index$1.h(index$1.Host, null, index$1.h("dyte-dialog", { open: true, onDyteDialogClose: () => {
                    this.updateStoreState('activeChannelCreator', false);
                }, iconPack: this.iconPack, t: this.t }, index$1.h("dyte-channel-creator", Object.assign({}, defaults)))));
        }
        return null;
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$z([
    index.SyncWithStore()
], DyteDialogManager.prototype, "meeting", void 0);
__decorate$z([
    index.SyncWithStore()
], DyteDialogManager.prototype, "states", void 0);
__decorate$z([
    index.SyncWithStore()
], DyteDialogManager.prototype, "size", void 0);
__decorate$z([
    index.SyncWithStore()
], DyteDialogManager.prototype, "iconPack", void 0);
__decorate$z([
    index.SyncWithStore()
], DyteDialogManager.prototype, "t", void 0);
DyteDialogManager.style = DyteDialogManagerStyle0;

const dyteDraftAttachmentViewCss = ":host{display:flex;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));border-top-left-radius:var(--dyte-border-radius-md, 8px);border-top-right-radius:var(--dyte-border-radius-md, 8px)}.preview-overlay{position:absolute;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);background-color:inherit}.preview{position:absolute;top:var(--dyte-space-4, 16px);left:var(--dyte-space-4, 16px);max-width:-moz-fit-content;max-width:fit-content;max-height:var(--dyte-space-20, 80px)}.preview:hover dyte-tooltip{display:block}.preview dyte-tooltip{position:absolute;top:calc(var(--dyte-space-1, 4px) * -1);left:calc(var(--dyte-space-1, 4px) * -1);display:none;margin-left:calc(var(--dyte-space-1, 4px) * -1);margin-top:calc(var(--dyte-space-1, 4px) * -1)}.preview dyte-button{display:flex;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);align-items:center;justify-content:center;border-radius:9999px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));border:1px solid rgb(var(--dyte-colors-text-1000, 255 255 255))}.preview dyte-icon{height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.preview-image{height:var(--dyte-space-16, 64px);width:var(--dyte-space-16, 64px);-o-object-fit:cover;object-fit:cover;max-height:100%;max-width:100%;overflow:clip;border-radius:var(--dyte-border-radius-md, 8px)}.preview-file{padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));overflow:hidden;text-overflow:ellipsis;white-space:nowrap;border-radius:var(--dyte-border-radius-md, 8px);max-width:200px}";
const DyteDraftAttachmentViewStyle0 = dyteDraftAttachmentViewCss;

var __decorate$y = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDraftAttachmentView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onDeleteAttachment = index$1.createEvent(this, "deleteAttachment", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Attachment to display */
        this.attachment = null;
        this.filePreview = null;
        this.fileReader = new FileReader();
        this.generatePreview = () => {
            if (this.attachment.type === 'image') {
                this.fileReader.readAsDataURL(this.attachment.file);
            }
            else if (this.attachment.type === 'file') {
                this.filePreview = this.attachment.file.name;
            }
        };
        this.onDeleteClickHandler = () => {
            this.filePreview = null;
            this.onDeleteAttachment.emit();
        };
    }
    onAttachmentChange() {
        this.generatePreview();
    }
    connectedCallback() {
        this.fileReader.onload = (e) => {
            if (typeof e.target.result === 'string') {
                this.filePreview = e.target.result;
            }
        };
        // this.fileReader.onloadstart = () => {};
        // this.fileReader.onloadend = () => {};
    }
    componentWillLoad() {
        this.onAttachmentChange();
    }
    render() {
        return (index$1.h(index$1.Host, { key: '9ac12b9992619fe12ab30d07dfcd3113562e6d12' }, index$1.h("div", { key: '3540e19bd3d7b5185c55359e128bdee18a31d32d', class: "preview-overlay" }, index$1.h("div", { key: '2792a2f153702696ce4bb3803b6a401cb2075238', class: "preview" }, index$1.h("dyte-tooltip", { key: 'f1ae3139d0199a03a9e85a7366c766c8cb9f84b2', label: this.t('chat.cancel_upload') }, index$1.h("dyte-button", { key: '99d6e020c4b7042a7f91861c799ff251193bd16c', variant: "secondary", kind: "icon", onClick: this.onDeleteClickHandler }, index$1.h("dyte-icon", { key: 'e8809cbd2ee916275de659a4eed986ab71351235', icon: this.iconPack.dismiss }))), this.attachment.type === 'image' ? (index$1.h("img", { class: "preview-image", src: this.filePreview })) : (index$1.h("div", { class: "preview-file" }, index$1.h("span", null, this.filePreview)))))));
    }
    static get watchers() { return {
        "attachment": ["onAttachmentChange"]
    }; }
};
__decorate$y([
    index.SyncWithStore()
], DyteDraftAttachmentView.prototype, "iconPack", void 0);
__decorate$y([
    index.SyncWithStore()
], DyteDraftAttachmentView.prototype, "t", void 0);
DyteDraftAttachmentView.style = DyteDraftAttachmentViewStyle0;

const EMOJI_ASSET_URL = 'https://cdn.dyte.in/assets/emojis-data.json';
let cachedEmojis;
/**
 * fetches the latest emoji list from CDN
 * @returns list of emojis
 */
const fetchEmojis = async () => {
    if (!cachedEmojis) {
        const emojis = await fetch(EMOJI_ASSET_URL);
        cachedEmojis = emojis.json();
    }
    return cachedEmojis;
};

const dyteEmojiPickerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{width:100%}.emoji-parent{box-sizing:border-box;display:inline-flex;height:var(--dyte-space-64, 256px);width:100%;max-width:640px;flex-direction:column;padding:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-0, 0px);-webkit-user-select:none;-moz-user-select:none;user-select:none;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.close-parent{display:flex;flex:1 1 0%;justify-content:flex-end;padding:var(--dyte-space-0, 0px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}#emoji-grid{margin-top:var(--dyte-space-2, 8px);box-sizing:border-box;display:flex;flex-direction:row;flex-wrap:wrap;align-content:flex-start;overflow-x:hidden;overflow-y:scroll;height:100%;grid-auto-rows:minmax(min-content, max-content)}#loader{display:flex;height:100%;width:100%;align-items:center;justify-content:center}input{display:block;height:var(--dyte-space-8, 32px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);font-size:14px;border-width:var(--dyte-border-width-none, 0);border-style:solid;border-style:none;border-color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}input::-moz-placeholder{color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}input::placeholder{color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}input{border-radius:var(--dyte-border-radius-sm, 4px);outline:2px solid transparent;outline-offset:2px;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms;border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}input:focus{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-border-opacity));--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);--tw-ring-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-ring-opacity));--tw-ring-opacity:0.3}.emoji{height:var(--dyte-space-10, 40px);width:var(--dyte-space-10, 40px);font-size:20px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}";
const DyteEmojiPickerStyle0 = dyteEmojiPickerCss;

var __decorate$x = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteEmojiPicker = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.pickerClose = index$1.createEvent(this, "pickerClose", 7);
        this.emojiClicked = index$1.createEvent(this, "dyteEmojiClicked", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Controls whether or not to focus on mount */
        this.focusWhenOpened = true;
        this.filterVal = '';
        this.filteredEmojis = [];
    }
    componentWillLoad() {
        // Don't use async here as it will block the render
        fetchEmojis().then((e) => {
            this.emojiList = e;
            this.handleInputChange(this.inputElement);
        });
    }
    componentDidLoad() {
        if (this.focusWhenOpened) {
            this.inputElement.focus();
        }
    }
    handleInputChange(target) {
        this.filterVal = target.value;
        const regex = new RegExp(`([^,]*?${this.filterVal}[^,]*):(\\d+)`, 'g');
        this.filteredEmojis = Array.from(this.emojiList['search'].matchAll(regex)).map((m) => {
            return { name: m[1], emoji: this.emojiList['emojis'][m[2]] };
        });
    }
    handleEmojiClick(emoji) {
        this.emojiClicked.emit(emoji);
    }
    mapEmojiList() {
        var _a;
        if (((_a = this.emojiList) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            return (index$1.h("div", { id: "loader" }, index$1.h("dyte-spinner", { iconPack: this.iconPack })));
        }
        return (index$1.h("div", { id: "emoji-grid", class: "scrollbar max-w-40" }, this.filteredEmojis.map((e) => (index$1.h("dyte-button", { key: `emoji-button-${e.name}`, class: "emoji", variant: "ghost", kind: "icon", title: e.name, onClick: () => this.handleEmojiClick(e.emoji) }, e.emoji)))));
    }
    render() {
        return (index$1.h(index$1.Host, { key: '332fe557a1fd6c4813a20dc67218583ed52f8080' }, index$1.h("div", { key: 'c33a2a916b8bb69a6890de686837f26a2a52ca66', class: 'close-parent' }, index$1.h("dyte-button", { key: '68957f915e70a98008dfe083e4cc1b5b01fcffb1', variant: "ghost", kind: "icon", class: "close", onClick: () => { var _a; return (_a = this.pickerClose) === null || _a === void 0 ? void 0 : _a.emit(); }, "aria-label": this.t('close') }, index$1.h("dyte-icon", { key: '95d651fdde6aa3c3ae93bfcce89449ef85adf278', icon: this.iconPack.dismiss }))), index$1.h("div", { key: '71eb89294bd37df1d38e8f890fc96eee692c751f', class: 'emoji-parent' }, index$1.h("input", { key: '6650cd87c893fbed52aac4a1017b81fa2c7a920b', value: this.filterVal, onInput: (event) => this.handleInputChange(event.target), placeholder: this.t('search'), ref: (el) => (this.inputElement = el) }), this.mapEmojiList())));
    }
};
__decorate$x([
    index.SyncWithStore()
], DyteEmojiPicker.prototype, "iconPack", void 0);
__decorate$x([
    index.SyncWithStore()
], DyteEmojiPicker.prototype, "t", void 0);
DyteEmojiPicker.style = DyteEmojiPickerStyle0;

const dyteEmojiPickerButtonCss = ":host{}";
const DyteEmojiPickerButtonStyle0 = dyteEmojiPickerButtonCss;

var __decorate$w = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteEmojiPickerButton = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
    }
    render() {
        return (index$1.h("dyte-tooltip", { key: 'ed7771da8c8790052743bc9fe8da64c352b99826', label: this.t('chat.send_emoji') }, index$1.h("dyte-button", { key: '16c59bbb9a708844c96569b89bbc246653c9d601', variant: "ghost", kind: "icon", class: { active: this.isActive }, title: this.t('chat.send_emoji') }, index$1.h("dyte-icon", { key: '27baf076cb231a538a31fd3759154a62d02c28b9', icon: this.iconPack.emoji_multiple }))));
    }
};
__decorate$w([
    index.SyncWithStore()
], DyteEmojiPickerButton.prototype, "iconPack", void 0);
__decorate$w([
    index.SyncWithStore()
], DyteEmojiPickerButton.prototype, "t", void 0);
DyteEmojiPickerButton.style = DyteEmojiPickerButtonStyle0;

const getExtension = (name) => {
    // split query and hash from url, then get the filename
    return name.split(/[#?]/)[0].split('.').pop().trim();
};
/**
 * Formats size in bytes to human readable formats
 * @param size Size in bytes
 * @returns Human readable file size
 */
const getFileSize = (size) => {
    if (!size)
        return '0 B';
    const i = Math.floor(Math.log(size) / Math.log(1024));
    return `${(size / 1024 ** i).toFixed(2)} ${['B', 'kB', 'MB', 'GB', 'TB'][i]}`;
};
/**
 * Extracts the file name from a URL.
 * @param link The URL of the file
 * @param fallback Fallback filename
 * @returns File name
 */
const getFileName = (link, fallback = 'file') => {
    try {
        const url = new URL(link);
        const name = url.pathname.split('/').pop();
        return name !== '/' ? name : fallback;
    }
    catch (_) {
        return fallback;
    }
};
/**
 * Downloads file from a given URL without leaving the current page
 * @param link URL of the file to download
 * @param options Optional Options for file download - `name` and `fallbackName`
 */
const downloadFile = async (link, options) => {
    link = string.sanitizeLink(link);
    let name = options === null || options === void 0 ? void 0 : options.name;
    const res = await fetch(link);
    if (!res.ok) {
        // if unable to download file (CORS or some other error)
        // open the URL in new tab
        window.open(link, '_blank');
        return;
    }
    const blobURL = URL.createObjectURL(await res.blob());
    // Creates an anchor tag and simulates download
    const a = document.createElement('a');
    a.href = blobURL;
    a.download = name !== null && name !== void 0 ? name : getFileName(link, options === null || options === void 0 ? void 0 : options.fallbackName);
    a.click();
};

var __decorate$v = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteFileMessage = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Date object of now, to calculate distance between dates */
        this.now = new Date();
        /** Whether the message is continued by same user */
        this.isContinued = false;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** show message in bubble */
        this.showBubble = false;
    }
    render() {
        const link = string.sanitizeLink(this.message.link);
        return (index$1.h(index$1.Host, { key: 'f5befc2c8ec9cb19a0bdf188a3313be725601841' }, !this.isContinued && (index$1.h(ChatHead.ChatHead, { key: '127c8691596fe2b2ea236ecf754d6ceca18dee08', name: this.message.displayName, time: this.message.time, now: this.now })), index$1.h("div", { key: '209f10f73b231b9d7ccd5de677ff812dfc235950', class: {
                body: true,
                bubble: this.showBubble,
            }, part: "body" }, index$1.h("div", { key: '47834225c4d6b625db6823f979ae0b592f897ff8', class: "file" }, index$1.h("div", { key: '14516331f804e78977f0b718758cf71b6e57ff33', class: "file-data" }, index$1.h("div", { key: 'fa03e638f47d8af6b66eca2b9155c3683d51eb8a', class: "name" }, this.message.name), index$1.h("div", { key: 'e9060694813e9d9d90692c70a52ff782a156268d', class: "file-data-split" }, index$1.h("div", { key: '7955b2e62e52a2d23cb026badbb1b8960b8ac6e1', class: "ext" }, getExtension(this.message.name)), index$1.h("span", { key: '84d6ba7a76be685a3f1509c59d24844d29fd6fee', class: "divider" }), index$1.h("div", { key: '9070a6bac59bd947f0b73d4508bc1ff26a493f5d', class: "size" }, getFileSize(this.message.size)))), index$1.h("dyte-button", { key: '8ff6e3be0173975f1ab73220317f7171a9923383', variant: "secondary", kind: "icon", onClick: () => downloadFile(link, { name: this.message.name, fallbackName: 'file' }), part: "button" }, index$1.h("dyte-icon", { key: 'da690564e3361a9f1ff1e4a933b21020636bd23e', icon: this.iconPack.download }))))));
    }
};
__decorate$v([
    index.SyncWithStore()
], DyteFileMessage.prototype, "iconPack", void 0);
__decorate$v([
    index.SyncWithStore()
], DyteFileMessage.prototype, "t", void 0);

const dyteFileMessageViewCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.file{display:flex;align-items:center;gap:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);min-width:var(--dyte-space-40, 160px);max-width:var(--dyte-space-64, 256px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.file .file-data{margin-left:var(--dyte-space-1, 4px);flex:1 1 0%}.file .file-data .name{word-break:break-all;color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}.file .file-data .file-data-split{margin-top:var(--dyte-space-0\\.5, 2px);display:flex;align-items:center;font-size:12px}.file .file-data .file-data-split .ext{margin-right:var(--dyte-space-2, 8px);text-transform:uppercase;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}.file .file-data .file-data-split .divider{height:var(--dyte-space-4, 16px);width:var(--dyte-space-0\\.5, 2px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.file .file-data .file-data-split .size{margin-left:var(--dyte-space-2, 8px)}";
const DyteFileMessageViewStyle0 = dyteFileMessageViewCss;

var __decorate$u = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteFileMessageView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
    }
    render() {
        return (index$1.h("div", { key: '27ef49cd85552610eb2aa9cfb2046f13e98f0b87', class: "file" }, index$1.h("dyte-button", { key: '5553484477a3363eaa1a786f66a3e6a86036b7e3', variant: "secondary", kind: "icon", onClick: () => downloadFile(string.sanitizeLink(this.url), { name: this.name, fallbackName: 'file' }), part: "button" }, index$1.h("dyte-icon", { key: 'f929d033d0a67ea654cb306bb5c175860f935af3', icon: this.iconPack.download })), index$1.h("div", { key: '238b4f2a4b47ef5d7f58d1e767cb409476073950', class: "file-data" }, index$1.h("div", { key: 'a7497d08623ef878d05c91d02114dbe3b1e5ac9d', class: "name" }, this.name), index$1.h("div", { key: '3d361ca77f97b4f5d55ffa14173fb6be5e961140', class: "file-data-split" }, index$1.h("div", { key: 'd793ed396da5455431ca9a8937683a559531b575', class: "ext" }, getExtension(this.name)), index$1.h("span", { key: '098df4e883f1dfb51e6d4274ca6761f6ad5467a7', class: "divider" }), index$1.h("div", { key: 'f11132ba5caa159139a94edb1213904b51886a7d', class: "size" }, getFileSize(this.size))))));
    }
};
__decorate$u([
    index.SyncWithStore()
], DyteFileMessageView.prototype, "iconPack", void 0);
DyteFileMessageView.style = DyteFileMessageViewStyle0;

const dyteFilePickerButtonCss = ":host{}";
const DyteFilePickerButtonStyle0 = dyteFilePickerButtonCss;

var __decorate$t = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteFilePickerButton = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onFileChange = index$1.createEvent(this, "fileChange", 7);
        /** Icon */
        this.icon = 'attach';
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.uploadFile = () => {
            const input = this.fileInputField;
            input.type = 'file';
            if (this.filter) {
                input.accept = this.filter;
            }
            input.onchange = (e) => {
                const { validity, files: [file], } = e.target;
                if (validity.valid) {
                    this.onFileChange.emit(file);
                }
            };
            input.click();
        };
    }
    connectedCallback() {
        this.fileInputField = document.createElement('input');
    }
    disconnectedCallback() {
        // For GC
        this.fileInputField = undefined;
    }
    render() {
        const label = this.label || this.t('chat.send_file');
        const icon = this.iconPack[this.icon];
        return (index$1.h("dyte-tooltip", { key: '334c14777babe9de198038dd3b37926176d1a08a', label: label }, index$1.h("dyte-button", { key: '0bc4d797c62074d3ffe9531d04c9087b21b16e0f', variant: "ghost", kind: "icon", onClick: () => this.uploadFile(), title: label }, index$1.h("dyte-icon", { key: '99066f2ba8c7eb773b1e9d5d9895d340af1d11fe', icon: icon }))));
    }
};
__decorate$t([
    index.SyncWithStore()
], DyteFilePickerButton.prototype, "iconPack", void 0);
__decorate$t([
    index.SyncWithStore()
], DyteFilePickerButton.prototype, "t", void 0);
DyteFilePickerButton.style = DyteFilePickerButtonStyle0;

const dyteIconCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block;height:var(--dyte-space-10, 40px);outline:2px solid transparent;outline-offset:2px}:host .icon-wrapper{display:flex;height:100%;width:100%;flex-direction:column;align-items:center}:host svg{height:100%;width:100%;outline:2px solid transparent;outline-offset:2px}:host([size='xl']){box-sizing:border-box;display:block;height:var(--dyte-space-16, 64px) !important;width:var(--dyte-space-16, 64px) !important;--dyte-spinner-color:currentColor}:host([size='md']){box-sizing:border-box;display:block;height:var(--dyte-space-6, 24px) !important;width:var(--dyte-space-6, 24px) !important;--dyte-spinner-color:currentColor}:host([size='sm']){box-sizing:border-box;display:block;height:var(--dyte-space-4, 16px) !important;width:var(--dyte-space-4, 16px) !important;--dyte-spinner-color:currentColor}:host([variant='secondary']) .icon-wrapper{--tw-text-opacity:1;color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-text-opacity))}:host([variant='danger']) .icon-wrapper{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}";
const DyteIconStyle0 = dyteIconCss;

var __decorate$s = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const parseIcon = (icon) => {
    try {
        return JSON.parse(icon);
    }
    catch (e) {
        return icon;
    }
};
const DyteIcon = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon variant */
        this.variant = 'primary';
        /** Size */
        this.size = 'lg';
    }
    render() {
        return (index$1.h(index$1.Host, { key: '7c30027e6133e5ec64063771c08d37a75b5435bd' }, index$1.h("div", { key: '74cf660575c383f53e38ba4688612bc69dbe9b34', class: "icon-wrapper", innerHTML: parseIcon(this.icon), part: "wrapper" })));
    }
};
__decorate$s([
    index.SyncWithStore()
], DyteIcon.prototype, "size", void 0);
DyteIcon.style = DyteIconStyle0;

const dyteImageMessageCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.image-spinner{cursor:wait}.image-errored{cursor:not-allowed}";
const DyteImageMessageStyle0 = dyteImageMessageCss;

var __decorate$r = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteImageMessage = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Date object of now, to calculate distance between dates */
        this.now = new Date();
        /** Whether the message is continued by same user */
        this.isContinued = false;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** show message in bubble */
        this.showBubble = false;
        this.status = 'loading';
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'fa9c168429dd5f92a542b7ca092dd4cc805743bd' }, !this.isContinued && (index$1.h(ChatHead.ChatHead, { key: 'dfd15b9192fc7198fef6c4b5f2964a83d912e53d', name: this.message.displayName, time: this.message.time, now: this.now })), index$1.h("div", { key: 'cefee5d9928f506c9ff758c858cc53c12827ff35', class: {
                body: true,
                bubble: this.showBubble,
            }, part: "body" }, index$1.h("div", { key: '643e1d4703eac657c73467d0791307fba8aedcd8', class: { image: true, loaded: this.status === 'loaded' } }, index$1.h("img", { key: '4453724021e1f2c83221cde8aebff82aceaf2e16', src: string.sanitizeLink(this.message.link), onLoad: () => {
                this.status = 'loaded';
            }, onError: () => {
                this.status = 'errored';
            }, onClick: () => {
                if (this.status === 'loaded') {
                    this.stateUpdate.emit({ image: this.message });
                }
            } }), this.status === 'loading' && (index$1.h("div", { key: 'ee3cf0052083e8468c9aed66fb8716e541424c5a', class: "image-spinner", title: this.t('chat.img.loading'), "aria-label": this.t('chat.img.loading') }, index$1.h("dyte-spinner", { key: 'a1e1563ab6269ce75dc319c6896d609b45fbd76e', iconPack: this.iconPack }))), this.status === 'errored' && (index$1.h("div", { key: '9a17301d149d6aa957408592ba5ea004f204c638', class: "image-errored", title: this.t('chat.error.img_not_found'), "aria-label": this.t('chat.error.img_not_found') }, index$1.h("dyte-icon", { key: 'ee5672f1c3708329f9d6a299c8186d9383b6c963', icon: this.iconPack.image_off }))), this.status === 'loaded' && (index$1.h("div", { key: '6b15f2e58846b2d3bbdb706c939d6c0e174ef45b', class: "actions" }, index$1.h("dyte-button", { key: 'b4c0904c8b31f2e8e0fed72d8147e106827ca8b8', class: "action", variant: "secondary", kind: "icon", onClick: () => {
                this.stateUpdate.emit({ image: this.message });
            } }, index$1.h("dyte-icon", { key: '4745d25ee35fe6ce31f7cf037a6e6b6da07c7047', icon: this.iconPack.full_screen_maximize })), index$1.h("dyte-button", { key: '51d687441df970faf55c745bdbb39186188e2da0', class: "action", variant: "secondary", kind: "icon", onClick: () => downloadFile(this.message.link, { fallbackName: 'image' }) }, index$1.h("dyte-icon", { key: 'cd488683796615bc0dd3c622338bf5949c0af89e', icon: this.iconPack.download }))))))));
    }
};
__decorate$r([
    index.SyncWithStore()
], DyteImageMessage.prototype, "iconPack", void 0);
__decorate$r([
    index.SyncWithStore()
], DyteImageMessage.prototype, "t", void 0);
DyteImageMessage.style = DyteImageMessageStyle0;

const dyteImageMessageViewCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.image-spinner{cursor:wait}.image-errored{cursor:not-allowed}.image{display:block;font-family:var(--dyte-font-family, sans-serif);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));position:relative;height:var(--dyte-space-40, 160px);max-width:var(--dyte-space-64, 256px);cursor:pointer}.image img{display:none;height:100%;width:100%;border-radius:var(--dyte-border-radius-sm, 4px);-o-object-fit:cover;object-fit:cover}.image .image-spinner{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.image .image-spinner dyte-spinner{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity))}.image .image-errored{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-sm, 4px);background-color:rgba(var(--dyte-colors-danger, 255 45 45) / 0.1);--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}.image .actions{display:none;height:var(--dyte-space-8, 32px);align-items:center;position:absolute;top:var(--dyte-space-2, 8px);right:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden;--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.image .actions .action{height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);border-radius:var(--dyte-border-radius-none, 0);border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.image .actions .action:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.image.loaded img{display:block}.image.loaded .image-spinner{display:none}.image:hover .actions,.image:focus .actions{display:flex}";
const DyteImageMessageViewStyle0 = dyteImageMessageViewCss;

var __decorate$q = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteImageMessageView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onPreview = index$1.createEvent(this, "preview", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.status = 'loading';
    }
    render() {
        return (index$1.h("div", { key: '4ab60c036ede1e5ff46471a978c68e5eafa615d3', class: { image: true, loaded: this.status === 'loaded' } }, index$1.h("img", { key: '2eed0ef93098727817592425da81ff2357c60f72', src: string.sanitizeLink(this.url), onLoad: () => {
                this.status = 'loaded';
            }, onError: () => {
                this.status = 'errored';
            }, onClick: () => {
                if (this.status === 'loaded') {
                    this.onPreview.emit(this.url);
                }
            } }), this.status === 'loading' && (index$1.h("div", { key: '13efea611d39c5eb679d7cf5603dec9f95edc775', class: "image-spinner", title: this.t('chat.img.loading'), "aria-label": this.t('chat.img.loading') }, index$1.h("dyte-spinner", { key: 'afc0eb62f76007c1a15da942fb53fe79ee4aa37f', iconPack: this.iconPack }))), this.status === 'errored' && (index$1.h("div", { key: 'c7aa254df37a2eaacb29f94ef22c2f7c056114ad', class: "image-errored", title: this.t('chat.error.img_not_found'), "aria-label": this.t('chat.error.img_not_found') }, index$1.h("dyte-icon", { key: '873385f922410dd9c86192326c0470e2d310e08d', icon: this.iconPack.image_off }))), this.status === 'loaded' && (index$1.h("div", { key: '70a59be0b7b21af1a440ba8165cc2e55c249323d', class: "actions" }, index$1.h("dyte-button", { key: '62801cc02ea09562a895e983f62e5e3271e89039', class: "action", variant: "secondary", kind: "icon", onClick: () => {
                this.onPreview.emit(this.url);
            } }, index$1.h("dyte-icon", { key: '60d0fdacecec31d24af48016dc2f58d95aaa71f2', icon: this.iconPack.full_screen_maximize })), index$1.h("dyte-button", { key: 'adacc2b4023f5acc00e4b39304312593d7e74d62', class: "action", variant: "secondary", kind: "icon", onClick: () => downloadFile(this.url, { fallbackName: 'image' }) }, index$1.h("dyte-icon", { key: '5a455e504d1db35dcf8564458425dafd200129a3', icon: this.iconPack.download }))))));
    }
};
__decorate$q([
    index.SyncWithStore()
], DyteImageMessageView.prototype, "iconPack", void 0);
__decorate$q([
    index.SyncWithStore()
], DyteImageMessageView.prototype, "t", void 0);
DyteImageMessageView.style = DyteImageMessageViewStyle0;

const dyteImageViewerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{width:1140px;max-width:100%;box-sizing:border-box;display:flex;flex-direction:column;padding:var(--dyte-space-6, 24px);padding-top:var(--dyte-space-5, 20px);overflow-y:auto;color:rgb(var(--dyte-colors-text-1000, 255 255 255));z-index:40;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}.displayName{font-weight:700}.image-ctr{margin-top:var(--dyte-space-2, 8px);box-sizing:border-box;display:flex;justify-content:center;overflow:hidden}.actions{display:flex;align-items:center;justify-content:flex-end;gap:var(--dyte-space-2, 8px)}img{box-sizing:border-box;display:block;max-height:100%;max-width:100%;-o-object-fit:contain;object-fit:contain}.header{display:flex;align-items:center;justify-content:space-between;padding-bottom:var(--dyte-space-4, 16px)}.shared-by-user{overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}:host([size='sm']) .header{flex-direction:column}:host([size='sm']) .header .actions{margin-top:var(--dyte-space-4, 16px)}";
const DyteImageViewerStyle0 = dyteImageViewerCss;

var __decorate$p = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteImageViewer = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.close = index$1.createEvent(this, "close", 7);
        /** Language */
        this.t = uiStore.useLanguage();
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        this.keypressListener = (e) => {
            if (e.key === 'Escape') {
                this.close.emit();
            }
        };
        this.handleOutsideClick = () => this.close.emit();
    }
    connectedCallback() {
        document.addEventListener('keydown', this.keypressListener);
        document.addEventListener('click', this.handleOutsideClick);
    }
    disconnectedCallback() {
        document.removeEventListener('keydown', this.keypressListener);
        document.removeEventListener('click', this.handleOutsideClick);
    }
    render() {
        return (index$1.h(index$1.Host, { key: '2491b39127e06ed796c380216cab38773f36209a', class: "scrollbar", onClick: (e) => e.stopPropagation() }, index$1.h("div", { key: '27dac52e6465f3e9dbfd415bcc1f34c6c1596635', class: "header" }, index$1.h("div", { key: '7e9dab9f453cbc1bb7cd6cb2bab297bf671ca7d1', class: "shared-by-user" }, this.t('chat.img.shared_by'), ' ', index$1.h("span", { key: '3ef88112f23a713d229b55d3bbc07cde28f5c461', class: "displayName" }, string.formatName(string.shorten(this.image.displayName)))), index$1.h("div", { key: '15a34a4d4b095ff64acd4682e7b5c8b8c85e8ca3', class: "actions" }, index$1.h("dyte-button", { key: '88195fbcf9286c332d460e787ec378944779db1b', onClick: () => downloadFile(this.image.link, { fallbackName: 'image' }) }, index$1.h("dyte-icon", { key: '867a85747399a09446c0fde37738a898b999782d', icon: this.iconPack.download, slot: "start" }), "Download"), index$1.h("dyte-button", { key: '21a3c92ac5c52cd64911a3bbe115c5d7b0cf3397', kind: "icon", variant: "secondary", onClick: () => this.close.emit() }, index$1.h("dyte-icon", { key: '84d6450e7669cf9155c4cd2bb3be3d5f726033dc', icon: this.iconPack.dismiss })))), index$1.h("div", { key: '8db9e6e84b7836f089a6a98068c26dbfafd73529', class: "image-ctr" }, index$1.h("img", { key: '200e0b6906bed300a4514b3b1baac10645803202', src: this.image.link }))));
    }
};
__decorate$p([
    index.SyncWithStore()
], DyteImageViewer.prototype, "size", void 0);
__decorate$p([
    index.SyncWithStore()
], DyteImageViewer.prototype, "t", void 0);
__decorate$p([
    index.SyncWithStore()
], DyteImageViewer.prototype, "iconPack", void 0);
DyteImageViewer.style = DyteImageViewerStyle0;

const dyteJoinStageCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host::-webkit-scrollbar{width:var(--dyte-space-1\\.5, 6px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity))}:host::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}:host(.stage){box-sizing:border-box;display:block;width:512px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));padding:var(--dyte-space-6, 24px);-webkit-user-select:none;-moz-user-select:none;user-select:none;overflow:auto;border-radius:var(--dyte-border-radius-md, 8px);line-height:1.25}:host(.stage) dyte-participant-setup{display:flex;flex:1 1 0%;align-items:center;justify-content:space-around;margin-left:auto;margin-right:auto}:host(.stage) .container dyte-button{flex-grow:1;padding:var(--dyte-space-1, 4px);width:50%}:host(.stage) .container dyte-button:nth-child(1){margin-right:var(--dyte-space-1\\.5, 6px)}:host(.stage) .container dyte-button:nth-child(2){margin-left:var(--dyte-space-1\\.5, 6px)}:host(.stage) h2{font-size:24px;font-weight:500;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}:host(.stage) header{padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px)}:host(.stage) .summary{padding:var(--dyte-space-4, 16px)}.deny-access{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}.container{width:100%;max-width:1080px;display:flex;flex:1 1 0%;align-items:center;justify-content:space-around}header{display:flex;align-items:center;justify-content:space-between}";
const DyteJoinStageStyle0 = dyteJoinStageCss;

var __decorate$o = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteJoinStage = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.joinStage = index$1.createEvent(this, "dyteJoinStage", 7);
        this.leaveStage = index$1.createEvent(this, "dyteLeaveStage", 7);
        /** UI Config */
        this.config = uiStore.defaultConfig;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Content Config */
        this.dataConfig = {
            title: this.t('stage.join_title'),
            label: {
                accept: this.t('stage.join_confirm'),
                reject: this.t('stage.join_cancel'),
            },
            description: this.t('stage.join_summary'),
        };
        this.isLoading = false;
    }
    render() {
        var _a, _b;
        const defaults = {
            meeting: this.meeting,
            size: this.size,
            states: this.states,
            config: this.config,
            iconPack: this.iconPack,
            t: this.t,
        };
        return (index$1.h(index$1.Host, { key: '4fc08232560ec90d3cc13efaf69d7be2b7083c84', class: { stage: true } }, index$1.h("header", { key: '670578993c90490fb5184d710bbdee77218f0ae4' }, index$1.h("h2", { key: 'ea7574fa697829772e2840cf730536e6a2974e86' }, this.dataConfig.title)), index$1.h(index$2.Render, { key: '25136ca653e3bf08f45628c18ec4885fc5bca31f', element: "dyte-participant-setup", defaults: defaults, props: { participant: (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self, size: 'md' }, childProps: { participant: (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self, size: 'md' }, deepProps: true }), index$1.h("div", { key: '06fdd1149e50508c662781aae6e5a7a6e5c786bd', class: "summary" }, this.dataConfig.description), index$1.h("div", { key: 'fbd5720696f7c415be96410b1d948c909c41ae36', class: "container" }, index$1.h("dyte-button", { key: 'f81130f39cca1c774d0bf2bfb0b2b30d88758cbd', variant: "secondary", onClick: () => this.leaveStage.emit(), title: this.dataConfig.label.reject }, this.dataConfig.label.reject), index$1.h("dyte-button", { key: '53dd411070bcde6b0c933855a7530e129d0c6b1c', onClick: () => {
                if (this.isLoading)
                    return;
                this.isLoading = true;
                this.joinStage.emit();
            }, title: this.dataConfig.label.accept }, this.isLoading ? (index$1.h("dyte-icon", { icon: this.iconPack.spinner })) : (this.dataConfig.label.accept)))));
    }
};
__decorate$o([
    index.SyncWithStore()
], DyteJoinStage.prototype, "meeting", void 0);
__decorate$o([
    index.SyncWithStore()
], DyteJoinStage.prototype, "states", void 0);
__decorate$o([
    index.SyncWithStore()
], DyteJoinStage.prototype, "size", void 0);
__decorate$o([
    index.SyncWithStore()
], DyteJoinStage.prototype, "iconPack", void 0);
__decorate$o([
    index.SyncWithStore()
], DyteJoinStage.prototype, "t", void 0);
DyteJoinStage.style = DyteJoinStageStyle0;

const dyteLeaveMeetingCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.leave-modal{width:var(--dyte-space-72, 288px)}@media (min-width: 768px){.leave-modal{width:var(--dyte-space-96, 384px)}}.leave-modal{position:relative;display:flex;flex-direction:column;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));padding:var(--dyte-space-8, 32px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.leave-modal .header h2{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px)}.leave-modal .message{color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.leave-modal .content{margin-top:var(--dyte-space-4, 16px);font-size:14px;display:flex;flex-wrap:wrap;gap:var(--dyte-space-4, 16px)}.leave-modal .content dyte-button{height:var(--dyte-space-9, 36px);min-width:var(--dyte-space-44, 176px);flex-grow:1}.leave-modal .content .secondary-btn{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.leave-modal .content .secondary-btn:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.leave-modal .content .secondary-danger-btn{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}";
const DyteLeaveMeetingStyle0 = dyteLeaveMeetingCss;

var __decorate$n = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteLeaveMeeting = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.keyPressListener = (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        };
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.canEndMeeting = false;
        this.isBreakoutRoomsActive = false;
        this.isChildMeeting = false;
        this.canJoinMainRoom = false;
        this.permissionsUpdateListener = () => {
            this.canEndMeeting = this.meeting.self.permissions.kickParticipant;
            this.canJoinMainRoom = this.meeting.self.permissions.connectedMeetings.canSwitchToParentMeeting;
        };
        this.close = () => {
            this.stateUpdate.emit({ activeLeaveConfirmation: false });
        };
        this.handleLeave = () => {
            var _a;
            (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.leaveRoom();
            this.close();
        };
        this.handleJoinMainRoom = () => {
            this.meeting.connectedMeetings.moveParticipants(this.meeting.meta.meetingId, this.meeting.connectedMeetings.parentMeeting.id, [this.meeting.self.userId]);
            this.close();
        };
        this.handleEndMeeting = () => {
            var _a;
            (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.participants.kickAll();
            this.close();
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
        document.addEventListener('keydown', this.keyPressListener);
    }
    disconnectedCallback() {
        var _a;
        document.removeEventListener('keydown', this.keyPressListener);
        (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.permissions.removeListener('permissionsUpdate', this.permissionsUpdateListener);
    }
    meetingChanged(meeting) {
        if (meeting != null) {
            this.isBreakoutRoomsActive =
                this.meeting.connectedMeetings.supportsConnectedMeetings &&
                    this.meeting.connectedMeetings.isActive;
            this.isChildMeeting =
                this.meeting.connectedMeetings.supportsConnectedMeetings &&
                    this.meeting.connectedMeetings.meetings.some((cMeet) => cMeet.id === meeting.meta.meetingId);
            this.meeting.self.permissions.addListener('permissionsUpdate', this.permissionsUpdateListener);
            this.permissionsUpdateListener();
        }
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'c5753a8ebb2736da351d10529f002fc53f71cf6e' }, index$1.h("div", { key: '1d08a38e0f9036a77981a6d48154e795b456c1fe', class: "leave-modal" }, index$1.h("div", { key: 'be3b122e0d37cab7898ce22c77885084fdc71a37', class: "header" }, index$1.h("h2", { key: '57f69bc17c5d9ab5a246eb5e35651cd191993a2f', class: "title" }, this.t('leave'))), index$1.h("p", { key: 'be794688b2d9ab0039e0b34673ba2cfd384195a8', class: "message" }, this.isBreakoutRoomsActive && this.isChildMeeting
            ? this.t('breakout_rooms.leave_confirmation')
            : this.t('leave_confirmation')), index$1.h("div", { key: '757a3aa9203f57b24fa9c1176a2d34b3106695e0', class: "content" }, index$1.h("dyte-button", { key: 'b5b39f76686aea039ff7cb3225e4948104386210', variant: "secondary", onClick: this.close, class: "secondary-btn" }, this.t('cancel')), this.isBreakoutRoomsActive && this.isChildMeeting && this.canJoinMainRoom && (index$1.h("dyte-button", { key: '6a816c70fd6846a5da006e244074d7e72d9ce05c', variant: "secondary", onClick: this.handleJoinMainRoom, class: "secondary-btn" }, this.t('breakout_rooms.leave_confirmation.main_room_btn'))), index$1.h("dyte-button", { key: '7a978e721f7f1630fd21fff21210705fb4cbd37c', variant: this.canEndMeeting ? 'secondary' : 'danger', title: this.t('leave'), onClick: this.handleLeave, class: {
                'secondary-btn': this.canEndMeeting,
                'secondary-danger-btn': this.canEndMeeting,
            } }, this.t('leave')), this.canEndMeeting && (index$1.h("dyte-button", { key: 'd204e9b3f2019e2352b0f5b5689ca37727d08f94', variant: "danger", onClick: this.handleEndMeeting }, this.t('end.all')))))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$n([
    index.SyncWithStore()
], DyteLeaveMeeting.prototype, "meeting", void 0);
__decorate$n([
    index.SyncWithStore()
], DyteLeaveMeeting.prototype, "states", void 0);
__decorate$n([
    index.SyncWithStore()
], DyteLeaveMeeting.prototype, "iconPack", void 0);
__decorate$n([
    index.SyncWithStore()
], DyteLeaveMeeting.prototype, "t", void 0);
DyteLeaveMeeting.style = DyteLeaveMeetingStyle0;

const dyteLogoCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;flex-direction:column;align-items:center;justify-content:center;color:rgb(var(--dyte-colors-text-1000, 255 255 255));height:100%;width:auto}svg,img{height:100%;width:auto}.brand-color{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity))}";
const DyteLogoStyle0 = dyteLogoCss;

var __decorate$m = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteLogo = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Config object */
        this.config = uiStore.defaultConfig;
        /** Language */
        this.t = uiStore.useLanguage();
    }
    connectedCallback() {
        this.configChanged(this.config);
        this.meetingChanged(this.meeting);
    }
    configChanged(config) {
        var _a;
        if (config != null) {
            const configLogo = (_a = config === null || config === void 0 ? void 0 : config.designTokens) === null || _a === void 0 ? void 0 : _a.logo;
            // NOTE(callmetarush): Only update logo if not passed via prop
            if (configLogo != null && this.logoUrl == null) {
                this.logoUrl = configLogo;
            }
        }
    }
    meetingChanged(meeting) {
        var _a, _b, _c, _d;
        if (meeting != null) {
            const meetingLogo = (_d = (_c = (_b = (_a = meeting.self) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.header) === null || _c === void 0 ? void 0 : _c.elements) === null || _d === void 0 ? void 0 : _d.logo;
            if (meetingLogo != null && this.logoUrl == null) {
                this.logoUrl = meetingLogo;
            }
        }
    }
    render() {
        if (!this.logoUrl || this.logoUrl === '') {
            return null;
        }
        const logo = this.logoUrl;
        const text = this.t('logo');
        return (index$1.h(index$1.Host, { class: "loaded" }, index$1.h("img", { src: logo, alt: text })));
    }
    static get watchers() { return {
        "config": ["configChanged"],
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$m([
    index.SyncWithStore()
], DyteLogo.prototype, "meeting", void 0);
__decorate$m([
    index.SyncWithStore()
], DyteLogo.prototype, "t", void 0);
DyteLogo.style = DyteLogoStyle0;

const dyteMarkdownViewCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{overflow-wrap:break-word}a{color:currentColor}.block-quote,blockquote{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px);--tw-border-spacing-x:1px;--tw-border-spacing-y:1px;border-spacing:var(--tw-border-spacing-x) var(--tw-border-spacing-y);border-top-width:var(--dyte-border-width-none, 0);border-bottom-width:var(--dyte-border-width-none, 0);border-left-width:var(--dyte-border-width-md, 2px);border-right-width:var(--dyte-border-width-none, 0);border-style:solid;padding:var(--dyte-space-0\\.5, 2px);padding-left:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-sm, 4px);border-top-left-radius:var(--dyte-border-radius-none, 0);border-bottom-left-radius:var(--dyte-border-radius-none, 0)}pre{white-space:pre-wrap}";
const DyteMarkdownViewStyle0 = dyteMarkdownViewCss;

const DyteMarkdownView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** max length of text to render as markdown */
        this.maxLength = chat.MAX_TEXT_LENGTH;
        this.restoreEmpty = (content, tag, renderCallback) => {
            return content.trim().length === 0 ? `${tag}${content}${tag}` : renderCallback(content);
        };
        this.renderLink = (content) => {
            return (index$1.h("a", { class: "link", href: content, target: "_blank", rel: "noopener noreferrer" }, content));
        };
        this.renderBold = (content) => {
            if (typeof content === 'string') {
                return this.restoreEmpty(content, '*', (c) => index$1.h("b", null, c));
            }
            return index$1.h("b", null, this.renderTokens(content));
        };
        this.renderItalic = (content) => {
            if (typeof content === 'string') {
                return this.restoreEmpty(content, '_', (c) => index$1.h("i", null, c));
            }
            return index$1.h("i", null, this.renderTokens(content));
        };
        this.renderStrikethrough = (content) => {
            if (typeof content === 'string') {
                return this.restoreEmpty(content, '~', (c) => index$1.h("s", null, c));
            }
            return index$1.h("b", null, this.renderTokens(content));
        };
        this.renderPlainText = (content) => {
            if (typeof content === 'string') {
                return content;
            }
            return index$1.h("p", null, this.renderTokens(content));
        };
        this.renderTokens = (tokens) => {
            return tokens.map((token) => {
                switch (token.type) {
                    case 'a':
                        if (typeof token.content === 'string') {
                            return this.renderLink(token.content);
                        }
                    case 'b':
                        return this.renderBold(token.content);
                    case 'i':
                        return this.renderItalic(token.content);
                    case 's':
                        return this.renderStrikethrough(token.content);
                    case 'q':
                        return index$1.h("span", { class: "block-quote" });
                    case 'plain_text':
                    default:
                        return this.renderPlainText(token.content);
                }
            });
        };
    }
    renderMessage(text) {
        let lines = text.split('\n');
        let isCodeBlock = false;
        if (lines[0] === '```' && lines[lines.length - 1] === '```') {
            isCodeBlock = true;
            lines = lines.slice(1, -1);
        }
        const message = lines.map((line) => {
            const tokens = chat.parseRichText(line);
            return index$1.h("p", null, this.renderTokens(tokens));
        });
        if (isCodeBlock) {
            return index$1.h("pre", { style: { whiteSpace: 'pre', overflow: 'scroll' } }, lines.join('\n'));
        }
        return message;
    }
    render() {
        const slicedMessage = this.text.slice(0, this.maxLength);
        const withReply = chat.extractReplyBlock(slicedMessage, true);
        const withoutReply = chat.stripOutReplyBlock(slicedMessage);
        return (index$1.h("p", { key: 'b3115390fc6d21369673cb6c92ba90b7a710173a' }, withReply.length !== 0 && index$1.h("blockquote", { key: '5aa48ffc60bb71da150b161582b9ab1b1ee59ff7' }, this.renderMessage(withReply)), withoutReply.length !== 0 && this.renderMessage(withoutReply)));
    }
};
DyteMarkdownView.style = DyteMarkdownViewStyle0;

const dyteMeetingCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{box-sizing:border-box;display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));overflow:hidden;position:fixed;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);height:100%;width:100%}:host([mode='fill']){position:relative}";
const DyteMeetingStyle0 = dyteMeetingCss;

var __decorate$l = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMeeting = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.statesUpdate = index$1.createEvent(this, "dyteStatesUpdate", 7);
        this.roomJoinedListener = () => {
            this.updateStates({ meeting: 'joined' });
        };
        this.waitlistedListener = () => {
            this.updateStates({ meeting: 'waiting' });
        };
        this.roomLeftListener = ({ state }) => {
            // Let socketConnectionUpdate listener handle this case.
            if (state === 'disconnected' || state === 'failed')
                return;
            this.updateStates({ meeting: 'ended', roomLeftState: state });
        };
        this.mediaPermissionUpdateListener = ({ kind, message }) => {
            if (['audio', 'video'].includes(kind)) {
                if ((message === 'DENIED' || message === 'SYSTEM_DENIED') &&
                    uiStore.uiState.states.activeDebugger !== true) {
                    const permissionModalSettings = {
                        enabled: true,
                        kind,
                    };
                    this.updateStates({ activePermissionsMessage: permissionModalSettings });
                }
            }
        };
        this.socketConnectionUpdateListener = ({ state }) => {
            if (state === 'failed') {
                setTimeout(() => {
                    this.meeting.leave('disconnected');
                }, this.leaveRoomTimer);
            }
        };
        /** Whether to load config from preset */
        this.loadConfigFromPreset = false;
        /** Whether to apply the design system on the document root from config */
        this.applyDesignSystem = false;
        /** Fill type */
        this.mode = 'fixed';
        /** Whether participant should leave when this component gets unmounted */
        this.leaveOnUnmount = false;
        /** Language */
        this.t = uiStore.useLanguage();
        /** UI Config */
        this.config = uiStore.defaultConfig;
        /** Grid layout */
        this.gridLayout = 'row';
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        this.handleChangingMeeting = (destinationMeetingId) => {
            this.updateStates({
                activeBreakoutRoomsManager: Object.assign(Object.assign({}, uiStore.uiState.states.activeBreakoutRoomsManager), { destinationMeetingId }),
            });
        };
    }
    connectedCallback() {
        var _a;
        if (typeof window !== 'undefined') {
            this.authErrorListener = (ev) => {
                if (ev.detail.message.includes('401')) {
                    this.updateStates({ meeting: 'ended', roomLeftState: 'unauthorized' });
                }
            };
            window.addEventListener('dyteError', this.authErrorListener);
        }
        this.leaveRoomTimer = 10000;
        this.loadConfigFromPreset = true;
        this.applyDesignSystem = true;
        this.resizeObserver = new ResizeObserver_es.index(() => this.handleResize());
        this.resizeObserver.observe(this.host);
        if (this.applyDesignSystem &&
            ((_a = this.config) === null || _a === void 0 ? void 0 : _a.designTokens) != null &&
            typeof document !== 'undefined') {
            config.provideDyteDesignSystem(document.documentElement, this.config.designTokens);
        }
        this.meetingChanged(this.meeting);
    }
    clearListeners(meeting) {
        if (!meeting)
            return;
        meeting.self.removeListener('roomLeft', this.roomLeftListener);
        meeting.self.removeListener('roomJoined', this.roomJoinedListener);
        meeting.self.removeListener('waitlisted', this.waitlistedListener);
        meeting.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
        meeting.meta.removeListener('socketConnectionUpdate', this.socketConnectionUpdateListener);
    }
    disconnectedCallback() {
        var _a;
        if (this.leaveOnUnmount) {
            (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.leaveRoom();
        }
        this.resizeObserver.disconnect();
        this.clearListeners(this.meeting);
        window.removeEventListener('dyteError', this.authErrorListener);
    }
    meetingChanged(meeting) {
        var _a, _b;
        if (!meeting)
            return;
        this.updateStates({ viewType: meeting.meta.viewType });
        if (this.loadConfigFromPreset && meeting.self.config != null) {
            const theme = meeting.self.config;
            const { config: config$1, data } = config.generateConfig(theme, meeting);
            if (this.config === uiStore.defaultConfig) {
                // only override the config if the object is same as defaultConfig
                // which means it's a different object passed via prop
                this.config = config$1;
            }
            if (this.showSetupScreen == null) {
                // only override this value if the prop isn't passed
                this.showSetupScreen = data.showSetupScreen;
            }
            if (meeting.connectedMeetings.supportsConnectedMeetings &&
                ((_a = uiStore.uiState.states.activeBreakoutRoomsManager) === null || _a === void 0 ? void 0 : _a.destinationMeetingId)) {
                this.showSetupScreen = false;
            }
        }
        if (this.applyDesignSystem &&
            ((_b = this.config) === null || _b === void 0 ? void 0 : _b.designTokens) != null &&
            typeof document !== 'undefined') {
            config.provideDyteDesignSystem(document.documentElement, this.config.designTokens);
        }
        meeting.self.addListener('roomJoined', this.roomJoinedListener);
        meeting.self.addListener('waitlisted', this.waitlistedListener);
        meeting.self.addListener('roomLeft', this.roomLeftListener);
        meeting.self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
        meeting.meta.addListener('socketConnectionUpdate', this.socketConnectionUpdateListener);
        if (meeting.connectedMeetings.supportsConnectedMeetings) {
            meeting.connectedMeetings.once('changingMeeting', this.handleChangingMeeting);
        }
        if (meeting.self.roomJoined) {
            this.updateStates({ meeting: 'joined' });
        }
        else {
            if (this.showSetupScreen) {
                this.updateStates({ meeting: 'setup' });
            }
            else {
                // join directly to the meeting
                meeting.joinRoom();
            }
        }
        window.removeEventListener('dyteError', this.authErrorListener);
    }
    listenState(e) {
        this.updateStates(e.detail);
    }
    handleResize() {
        this.size = size.getSize(this.host.clientWidth);
    }
    updateStates(states) {
        const newStates = Object.assign({}, uiStore.uiState.states);
        uiStore.uiState.states = config.deepMerge(newStates, states);
        this.statesUpdate.emit(uiStore.uiState.states);
    }
    render() {
        const defaults = {
            meeting: this.meeting,
            size: this.size,
            states: uiStore.uiState.states,
            config: this.config,
            iconPack: this.iconPack,
            t: this.t,
        };
        if (uiStore.uiState.states.viewType === 'CHAT') {
            return index$1.h("dyte-chat", Object.assign({}, defaults));
        }
        const elementProps = {
            'dyte-grid': {
                layout: this.gridLayout,
            },
        };
        return index$1.h(index$2.Render, { element: "dyte-meeting", defaults: defaults, asHost: true, elementProps: elementProps });
    }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$l([
    index.SyncWithStore()
], DyteMeeting.prototype, "meeting", void 0);
__decorate$l([
    index.SyncWithStore()
], DyteMeeting.prototype, "t", void 0);
__decorate$l([
    index.SyncWithStore()
], DyteMeeting.prototype, "iconPack", void 0);
DyteMeeting.style = DyteMeetingStyle0;

const dyteMenuCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:inline-block;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}#menu-list{position:absolute;z-index:20;display:none}";
const DyteMenuStyle0 = dyteMenuCss;

var __decorate$k = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMenu$1 = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.clickedThis = false;
        /** Placement of menu */
        this.placement = 'bottom-end';
        /** Offset in px */
        this.offset = 10;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.handleOutsideClick = () => {
            // handles clicking on other menu triggers
            if (!this.clickedThis) {
                // if other trigger is clicked, hide this menu-list
                this.menuListEl.style.display = 'none';
            }
            // reset the value
            this.clickedThis = false;
        };
    }
    componentDidLoad() {
        document.addEventListener('click', this.handleOutsideClick);
        this.update();
    }
    disconnectedCallback() {
        document.removeEventListener('click', this.handleOutsideClick);
    }
    update() {
        floatingUi_dom_esm.computePosition(this.triggerEl, this.menuListEl, {
            placement: this.placement,
            middleware: [floatingUi_dom_esm.offset(this.offset), floatingUi_dom_esm.flip(), floatingUi_dom_esm.shift({ padding: 5 })],
        }).then(({ x, y }) => {
            Object.assign(this.menuListEl.style, {
                left: `${x}px`,
                top: `${y}px`,
            });
        });
    }
    render() {
        return (index$1.h(index$1.Host, { key: '8fce9cdf74c107e0438f30cd2c1ed33b5eb0570e' }, index$1.h("span", { key: 'bfe2fcfcac4f87a60cc2762d758c34e42c1ab653', id: "trigger", ref: (el) => (this.triggerEl = el), onClick: () => {
                this.clickedThis = true;
                if (this.menuListEl.style.display !== 'block') {
                    this.menuListEl.style.display = 'block';
                    this.update();
                }
                else {
                    this.menuListEl.style.display = 'none';
                }
            } }, index$1.h("slot", { key: '09c4699c881002da8ffaab3cfef27e06d8ceae60', name: "trigger" })), index$1.h("span", { key: '1feae9bc99d7379471552ea2ea8a39c795259826', part: "menu-list", id: "menu-list", ref: (el) => (this.menuListEl = el) }, index$1.h("slot", { key: '01cc566916d96fb30a0845b975431c9202a20ebb' }))));
    }
};
__decorate$k([
    index.SyncWithStore()
], DyteMenu$1.prototype, "size", void 0);
__decorate$k([
    index.SyncWithStore()
], DyteMenu$1.prototype, "iconPack", void 0);
__decorate$k([
    index.SyncWithStore()
], DyteMenu$1.prototype, "t", void 0);
DyteMenu$1.style = DyteMenuStyle0;

const dyteMenuItemCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;align-items:center;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px);cursor:pointer;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms;color:rgb(var(--dyte-colors-text-1000, 255 255 255));font-size:14px}::slotted([slot='start']){margin-right:var(--dyte-space-2, 8px)}::slotted([slot='end']){margin-left:var(--dyte-space-2, 8px)}:host(:hover){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}:host(.red){--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}";
const DyteMenuItemStyle0 = dyteMenuItemCss;

var __decorate$j = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMenuItem = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
    }
    render() {
        return (index$1.h(index$1.Host, { key: '2e3a7e78987d9544820b74e2c83e8cd2c1b38e0b' }, index$1.h("slot", { key: 'be5768e5d7ec85f4d9e5c7fc43d3edd612f518c7', name: "start" }), index$1.h("slot", { key: 'ce236f02c727fb4e42ee8cae25bc7bf00479be01' }), index$1.h("slot", { key: '92a2fb4f3a5fa3f03c396a1483b1eabfa83235e7', name: "end" })));
    }
};
__decorate$j([
    index.SyncWithStore()
], DyteMenuItem.prototype, "size", void 0);
__decorate$j([
    index.SyncWithStore()
], DyteMenuItem.prototype, "iconPack", void 0);
__decorate$j([
    index.SyncWithStore()
], DyteMenuItem.prototype, "t", void 0);
DyteMenuItem.style = DyteMenuItemStyle0;

const dyteMenuListCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;width:-moz-max-content;width:max-content;flex-direction:column;padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden;border-radius:var(--dyte-border-radius-sm, 4px);--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}";
const DyteMenuListStyle0 = dyteMenuListCss;

var __decorate$i = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMenuList = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
    }
    render() {
        return (index$1.h(index$1.Host, { key: '9aecbc06a89da8a7ea5ac9f5f8f47ad21ec389e8' }, index$1.h("slot", { key: '3dfd067eec2d74e5e3751942b73f72fc2c6272cb' })));
    }
};
__decorate$i([
    index.SyncWithStore()
], DyteMenuList.prototype, "iconPack", void 0);
__decorate$i([
    index.SyncWithStore()
], DyteMenuList.prototype, "t", void 0);
DyteMenuList.style = DyteMenuListStyle0;

const dyteMessageViewCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}.message-wrapper{display:flex;flex-direction:row-reverse;gap:var(--dyte-space-2, 8px)}.message-wrapper.incoming{flex-direction:row}.message{display:flex;flex-direction:column}.header{margin-bottom:var(--dyte-space-1, 4px);align-self:flex-end;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));font-size:14px;font-weight:600}.incoming .header{align-self:flex-start}.body{display:flex;flex-direction:column;min-width:var(--dyte-space-24, 96px);font-family:var(--dyte-font-family, sans-serif);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));font-size:14px;line-height:1.375;position:relative}.body .metadata{margin-top:var(--dyte-space-2, 8px);align-self:flex-end;font-size:10px}.bubble{max-width:var(--dyte-space-96, 384px);padding:var(--dyte-space-2, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));border-radius:var(--dyte-border-radius-md, 8px)}.incoming .bubble{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.avatar{display:none}dyte-menu{position:absolute;right:var(--dyte-space-0, 0px);top:var(--dyte-space-0, 0px);border-radius:var(--dyte-border-radius-lg, 12px)}dyte-menu dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);cursor:pointer}.actions{display:flex;align-items:center;justify-content:center;padding-left:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px);padding-top:var(--dyte-space-1, 4px);padding-right:var(--dyte-space-1, 4px);border-radius:var(--dyte-border-radius-md, 8px);border-width:var(--dyte-border-width-none, 0);border-style:none;background:radial-gradient(\n    at top right,\n    rgb(var(--dyte-colors-brand-300, 73 124 253)) 60%,\n    rgba(255, 255, 255, 0) 80%\n  )}.actions dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.incoming .actions{background:radial-gradient(\n      at top right,\n      rgb(var(--dyte-colors-background-800, 30 30 30)) 60%,\n      rgba(255, 255, 255, 0) 80%\n    )}.incoming .actions dyte-icon{color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.incoming dyte-avatar{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}@media (min-width: 400px){.avatar{display:flex;width:var(--dyte-space-6, 24px)}.avatar dyte-avatar{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px);font-size:10px;overflow:clip;border-radius:9999px}}@media (hover: hover){dyte-menu{visibility:hidden}.body:hover dyte-menu{visibility:visible}}";
const DyteMessageViewStyle0 = dyteMessageViewCss;

var __decorate$h = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMessageView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onAction = index$1.createEvent(this, "action", 7);
        /** List of actions to show in menu */
        this.actions = [];
        /** Appearance */
        this.variant = 'bubble';
        /** Render */
        this.viewType = 'outgoing';
        /** Hides avatar */
        this.hideAvatar = false;
        /** Hides author display label */
        this.hideAuthorName = false;
        /** Hides metadata (time) */
        this.hideMetadata = false;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
    }
    renderActions() {
        return (index$1.h("dyte-menu", { placement: "top-end", offset: 1 }, index$1.h("button", { slot: "trigger", class: "actions" }, index$1.h("dyte-icon", { icon: this.iconPack.chevron_down })), index$1.h("dyte-menu-list", null, this.actions.map((action) => (index$1.h("dyte-menu-item", { onClick: () => this.onAction.emit(action.id) }, action.icon && index$1.h("dyte-icon", { icon: action.icon, slot: "start" }), action.label))))));
    }
    render() {
        return (index$1.h(index$1.Host, { key: '2a443309dfcb77b650bf1378ec13f77f2bf01593' }, index$1.h("div", { key: '989baadfe7e60a3888be667fa0984c97c5a0f597', class: { 'message-wrapper': true, [this.viewType]: true } }, !this.hideAvatar && (index$1.h("aside", { key: '2513cf0da43268c39efd3a84c74aab3ec5adc85d', class: "avatar", part: "avatar" }, index$1.h("dyte-avatar", { key: '18b94987038b10c30393a97f30025f31fe25c411', participant: { name: this.authorName, picture: this.avatarUrl }, size: "sm" }))), index$1.h("div", { key: 'f88598f9114ef02ce5f8daa62a09220f0752ba79', class: "message", part: "message" }, !this.hideAuthorName && index$1.h("div", { key: 'aaa59e19099a9c7d239e3f53b9017f257fe23165', class: "header" }, this.authorName), index$1.h("div", { key: '4fe21121b123a49f30500ff488f12caa8a376c17', class: { body: true, bubble: this.variant === 'bubble' } }, index$1.h("slot", { key: '4e8c4c9fa533cd920890648535fdb4203d320027' }), !this.hideMetadata && !!this.time && (index$1.h("div", { key: '2612946059903647ac4172157cef2626e45c5dc7', class: "metadata", title: ChatHead.formatDateTime(this.time) }, ChatHead.elapsedDuration(this.time, new Date(Date.now())))), this.actions.length !== 0 && this.renderActions())))));
    }
};
__decorate$h([
    index.SyncWithStore()
], DyteMessageView.prototype, "iconPack", void 0);
DyteMessageView.style = DyteMessageViewStyle0;

const dyteMicrophoneSelectorCss = ".dyte-select{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.dyte-select:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dyte-select{display:block;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:var(--dyte-space-3, 12px);font-size:16px;--icon-size:var(--dyte-select-chevron-size, var(--dyte-space-6, 24px));--icon-right-position:var(--dyte-select-chevron-right-position, var(--dyte-space-2, 8px));background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");background-position:right var(--icon-right-position) center;background-repeat:no-repeat;background-size:var(--icon-size) var(--icon-size);padding-right:calc(var(--icon-right-position) * 5);width:100%;max-width:100%;text-overflow:ellipsis}.inline .dyte-select{margin-top:var(--dyte-space-1, 4px);width:100%;padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-8, 32px);font-size:14px}.row{margin-bottom:var(--dyte-space-2, 8px);display:flex;width:100%;align-items:center;justify-content:space-between;gap:var(--dyte-space-3, 12px)}.group{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px)}.group>*{margin-bottom:var(--dyte-space-2, 8px)}.group>*:last-child{margin-bottom:var(--dyte-space-0, 0px)}.group select{flex:1 1 0%}.inline.group{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0\\.5, 2px)}.inline.group>*{margin-bottom:var(--dyte-space-0, 0px)}label{display:flex;-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center;gap:var(--dyte-space-1, 4px);font-size:14px}.inline.container{display:flex;align-items:center;justify-content:flex-start;gap:var(--dyte-space-2, 8px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}";
const DyteMicrophoneSelectorStyle0 = dyteMicrophoneSelectorCss;

var __decorate$g = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMicrophoneSelector = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** variant */
        this.variant = 'full';
        /** Language */
        this.t = uiStore.useLanguage();
        this.audioinputDevices = [];
        this.canProduceAudio = true;
        this.currentDevices = { audio: undefined };
        this.stageStateListener = () => {
            this.canProduceAudio = this.meeting.self.permissions.canProduceAudio === 'ALLOWED';
        };
        this.deviceListUpdateListener = async () => {
            const devices = await this.meeting.self.getAudioDevices();
            this.audioinputDevices = devices;
        };
        this.deviceUpdateListener = ({ device }) => {
            if (device.kind === 'audioinput') {
                this.currentDevices = {
                    audio: device,
                };
            }
        };
        this.mediaPermissionUpdateListener = async ({ kind, message }) => {
            if (!this.meeting)
                return;
            if (kind === 'audio' && message === 'ACCEPTED') {
                this.audioinputDevices = await this.meeting.self.getAudioDevices();
            }
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a, _b, _c, _d, _e;
        (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.removeListener('stageStatusUpdate', this.stageStateListener);
        (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self.removeListener('deviceListUpdate', this.deviceListUpdateListener);
        (_d = this.meeting) === null || _d === void 0 ? void 0 : _d.self.removeListener('deviceUpdate', this.deviceUpdateListener);
        (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
    }
    meetingChanged(meeting) {
        if (meeting == null)
            return;
        index$1.writeTask(async () => {
            var _a, _b;
            const { self, stage } = meeting;
            const audioDevices = await meeting.self.getAudioDevices();
            const currentAudioDevice = (_a = meeting.self.getCurrentDevices()) === null || _a === void 0 ? void 0 : _a.audio;
            this.currentDevices = {
                audio: currentAudioDevice,
            };
            this.canProduceAudio = this.meeting.self.permissions.canProduceAudio === 'ALLOWED';
            stage === null || stage === void 0 ? void 0 : stage.addListener('stageStatusUpdate', this.stageStateListener);
            self.addListener('deviceListUpdate', this.deviceListUpdateListener);
            self.addListener('deviceUpdate', this.deviceUpdateListener);
            self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
            if (currentAudioDevice != undefined) {
                this.audioinputDevices = [
                    (_b = audioDevices.find((device) => device.deviceId === currentAudioDevice.deviceId)) !== null && _b !== void 0 ? _b : currentAudioDevice,
                    ...audioDevices.filter((device) => device.deviceId !== currentAudioDevice.deviceId),
                ];
            }
            else {
                this.audioinputDevices = audioDevices;
            }
        });
    }
    setDevice(deviceId) {
        var _a;
        if (uiStore.disableSettingSinkId(this.meeting))
            return;
        const device = this.audioinputDevices.find((d) => d.deviceId === deviceId);
        if (device != null) {
            this.currentDevices = {
                audio: device,
            };
            (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.setDevice(device);
        }
    }
    render() {
        if (this.meeting == null)
            return null;
        let unnamedMicCount = 0;
        return (index$1.h(index$1.Host, null, this.canProduceAudio && (index$1.h("div", { part: "microphone-selection", class: 'group container ' + this.variant }, index$1.h("label", { slot: "label" }, this.variant !== 'inline' && this.t('settings.microphone_input'), index$1.h("dyte-icon", { icon: this.iconPack.mic_on, size: "sm" })), index$1.h("div", { class: "row" }, index$1.h("select", { class: "dyte-select", onChange: (e) => this.setDevice(e.target.value) }, this.audioinputDevices.map(({ deviceId, label }) => {
            var _a;
            return (index$1.h("option", { value: deviceId, selected: ((_a = this.currentDevices.audio) === null || _a === void 0 ? void 0 : _a.deviceId) === deviceId }, label || `Microphone ${++unnamedMicCount}`));
        })), index$1.h("slot", { name: "indicator" }))))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$g([
    index.SyncWithStore()
], DyteMicrophoneSelector.prototype, "meeting", void 0);
__decorate$g([
    index.SyncWithStore()
], DyteMicrophoneSelector.prototype, "size", void 0);
__decorate$g([
    index.SyncWithStore()
], DyteMicrophoneSelector.prototype, "iconPack", void 0);
__decorate$g([
    index.SyncWithStore()
], DyteMicrophoneSelector.prototype, "t", void 0);
DyteMicrophoneSelector.style = DyteMicrophoneSelectorStyle0;

const dyteMuteAllConfirmationCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block;-webkit-user-select:none;-moz-user-select:none;user-select:none}.leave-modal{position:relative;display:flex;flex-direction:column;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));padding:var(--dyte-space-4, 16px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.leave-modal .header h2{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px)}.leave-modal .content{font-size:14px}.leave-message p{margin-top:var(--dyte-space-3, 12px);margin-bottom:var(--dyte-space-3, 12px)}.leave-meeting{display:flex;flex-direction:row;justify-content:space-between;gap:var(--dyte-space-2, 8px)}.leave-meeting dyte-button{flex:1 1 0%}.end-meeting{margin-top:var(--dyte-space-2, 8px)}.message{margin-bottom:var(--dyte-space-4, 16px)}label{display:flex;align-items:center}input[type='checkbox']{margin-right:var(--dyte-space-2, 8px);accent-color:rgb(var(--dyte-colors-brand-500, 33 96 253))}";
const DyteMuteAllConfirmationStyle0 = dyteMuteAllConfirmationCss;

var __decorate$f = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMuteAllConfirmation = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.allowUnmute = true;
        this.onClose = () => {
            this.stateUpdate.emit({ activeMuteAllConfirmation: false });
        };
        this.onMuteAll = () => {
            var _a;
            (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.participants.disableAllAudio(this.allowUnmute);
            this.onClose();
        };
    }
    render() {
        return (index$1.h(index$1.Host, { key: '8d447912a33466ac84c7104e3731e67e5d574201' }, index$1.h("div", { key: 'f36495740298c71957ecb4038ea11baa96150427', class: "leave-modal" }, index$1.h("div", { key: '5c7d23277e2fb5300b4d34800eb62e7a93e431dc', class: "header" }, index$1.h("h2", { key: 'bb08708a5d462763d51228e5368389c848f770b1', class: "title" }, this.t('mute_all.header'))), index$1.h("p", { key: '34273d1a512336de748ce1de4b498baebd2c7cfb', class: "message" }, this.t('mute_all.description')), index$1.h("div", { key: '2fae2f55acb20556e3478c5a57c9d3f5d0dae5ab', class: "content" }, index$1.h("div", { key: '67308bf61bfa8891e0193033779ab4952a95a8e1', class: "leave-meeting" }, index$1.h("dyte-button", { key: '03835bed6fe212b2d893ebd6c1d1061b6ef548e4', variant: "secondary", title: this.t('close'), onClick: this.onClose }, this.t('cancel')), index$1.h("dyte-button", { key: 'e9f5a1ef27c92446d6955e4898757070d39629ce', variant: "danger", title: this.t('mute_all'), onClick: this.onMuteAll }, this.t('mute_all')))))));
    }
};
__decorate$f([
    index.SyncWithStore()
], DyteMuteAllConfirmation.prototype, "meeting", void 0);
__decorate$f([
    index.SyncWithStore()
], DyteMuteAllConfirmation.prototype, "states", void 0);
__decorate$f([
    index.SyncWithStore()
], DyteMuteAllConfirmation.prototype, "iconPack", void 0);
__decorate$f([
    index.SyncWithStore()
], DyteMuteAllConfirmation.prototype, "t", void 0);
DyteMuteAllConfirmation.style = DyteMuteAllConfirmationStyle0;

const dyteNotificationCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{pointer-events:none;display:block;height:var(--dyte-space-10, 40px);color:rgb(var(--dyte-colors-text-1000, 255 255 255));animation:show 0.4s ease;transition:0.4s;z-index:100}.ctr{box-sizing:border-box;display:inline-flex;height:100%;min-width:var(--dyte-space-40, 160px);align-items:center;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);-webkit-user-select:none;-moz-user-select:none;user-select:none;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));--tw-shadow:0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:rgb(var(--dyte-colors-background-1000, 8 8 8));--tw-shadow:var(--tw-shadow-colored);pointer-events:auto}img{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-0, 0px);width:var(--dyte-space-0, 0px);border-radius:9999px}img.loaded{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}.message{margin-right:var(--dyte-space-2, 8px);max-width:var(--dyte-space-72, 288px) !important;font-size:14px !important;overflow:hidden !important;display:-webkit-box !important;-webkit-box-orient:vertical !important;-webkit-line-clamp:2 !important}.message p{margin:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-1, 4px)}.message blockquote{display:none}dyte-icon.icon{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}dyte-icon.dismiss{margin-left:auto;height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);border-radius:var(--dyte-border-radius-md, 8px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}dyte-icon.dismiss:hover{cursor:pointer;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}dyte-icon.dismiss{transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}dyte-button{margin-left:var(--dyte-space-4, 16px);margin-right:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-sm, 4px)}.right{margin-left:auto;display:flex;align-items:center}.right>*{margin-left:var(--dyte-space-2, 8px)}.right>*:first-child{margin-left:var(--dyte-space-0, 0px)}:host(.exit){animation:exit 0.4s ease}@keyframes show{0%{opacity:0;transform:translateX(-120px)}100%{opacity:1;transform:translateX(0px)}}@keyframes exit{0%{opacity:1;transform:translateX(0)}100%{opacity:0;transform:translateX(-120px)}}:host([size='sm']){font-size:14px}";
const DyteNotificationStyle0 = dyteNotificationCss;

var __decorate$e = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteNotification = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.dismiss = index$1.createEvent(this, "dyteNotificationDismiss", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.imageState = 'loading';
    }
    connectedCallback() {
        this.notificationChanged(this.notification);
    }
    notificationChanged(notification) {
        if (notification != null && typeof notification.duration === 'number') {
            setTimeout(() => {
                this.dismiss.emit(notification.id);
            }, notification.duration);
        }
    }
    render() {
        var _a;
        return (index$1.h(index$1.Host, { key: 'd1b50e98469e3a31478ffb37eaf0d16b06a97f11' }, index$1.h("div", { key: 'ccbba0abd0b8b2126ed435aa22fad0ce4c09bbc3', class: "ctr" }, this.notification.icon != null && (index$1.h("dyte-icon", { key: '2977f801f26dc7bab7484ca3344375b59e912789', class: "icon", icon: this.notification.icon, variant: (_a = this.notification.iconVariant) !== null && _a !== void 0 ? _a : 'primary' })), this.notification.image != null &&
            this.notification.icon == null &&
            this.imageState !== 'errored' && (index$1.h("img", { key: 'bb74bf766c92d366ff57a64109e9321a755173d3', src: this.notification.image, class: { loaded: this.imageState === 'loaded' }, onLoad: () => (this.imageState = 'loaded'), onError: () => (this.imageState = 'errored') })), index$1.h("p", { key: '9882e460b11e649d6ea72ac5d366f968092bfdce', class: "message" }, index$1.h(TextMessage.TextMessageView, { key: '913d03c9028353d8b2b3d4a097a6cf588ac3ae9b', message: this.notification.message })), index$1.h("div", { key: '2c1458dc02e345bb3c1e3fc8285e6a561c4609eb', class: "right" }, this.notification.button != null && (index$1.h("dyte-button", { key: '2b5b9774b6f289ca2f533e5473080007b1390ec1', size: "sm", variant: this.notification.button.variant, onClick: () => this.notification.button.onClick() }, this.notification.button.text)), index$1.h("dyte-icon", { key: '51b648dbc0c1411633a6e1e741080b82a7e95c5b', "aria-label": this.t('dismiss'), class: "dismiss", icon: this.iconPack.dismiss, onClick: () => this.dismiss.emit(this.notification.id) })))));
    }
    static get watchers() { return {
        "notification": ["notificationChanged"]
    }; }
};
__decorate$e([
    index.SyncWithStore()
], DyteNotification.prototype, "size", void 0);
__decorate$e([
    index.SyncWithStore()
], DyteNotification.prototype, "iconPack", void 0);
__decorate$e([
    index.SyncWithStore()
], DyteNotification.prototype, "t", void 0);
DyteNotification.style = DyteNotificationStyle0;

const DEFAULT_NOTIFICATION_DURATION = 2000;
const DEFAULT_NOTIFICATION_CONFIG = Object.freeze({
    notifications: {
        participant_joined: true,
        participant_left: true,
        participant_joined_waitlist: true,
        chat: true,
        polls: true,
        webinar: true,
        tab_sync: true,
        recording_started: true,
        recording_stopped: true,
    },
    notification_sounds: {
        participant_joined: true,
        participant_left: true,
        chat: true,
        polls: true,
        webinar: true,
        participant_joined_waitlist: true,
    },
    notification_duration: {
        participant_joined: 2100,
        participant_left: 2100,
        participant_joined_waitlist: 4000,
        chat: DEFAULT_NOTIFICATION_DURATION,
        polls: DEFAULT_NOTIFICATION_DURATION,
        webinar: DEFAULT_NOTIFICATION_DURATION,
        tab_sync: DEFAULT_NOTIFICATION_DURATION,
        recording_started: DEFAULT_NOTIFICATION_DURATION,
        recording_stopped: DEFAULT_NOTIFICATION_DURATION,
    },
    participant_joined_sound_notification_limit: 10,
    participant_chat_message_sound_notification_limit: 10,
});

const dyteNotificationsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:absolute;top:var(--dyte-space-4, 16px);right:var(--dyte-space-4, 16px);bottom:var(--dyte-space-4, 16px);left:var(--dyte-space-4, 16px);top:auto;display:flex;flex-direction:column;pointer-events:none;z-index:100}dyte-notification{margin-top:var(--dyte-space-2, 8px)}";
const DyteNotificationsStyle0 = dyteNotificationsCss;

var __decorate$d = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function parseConfig(config) {
    const permissions = Object.assign({}, DEFAULT_NOTIFICATION_CONFIG);
    if (config == null)
        return permissions;
    Object.assign(permissions.notification_sounds, config.notification_sounds);
    Object.assign(permissions.notifications, config.notifications);
    Object.assign(permissions.notification_duration, config.notification_duration);
    permissions.participant_chat_message_sound_notification_limit =
        config.participant_chat_message_sound_notification_limit;
    permissions.participant_joined_sound_notification_limit =
        config.participant_joined_sound_notification_limit;
    return permissions;
}
function getEnabledSounds(sounds) {
    return Object.keys(sounds).filter((key) => sounds[key]);
}
const DyteNotifications = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.permissions = DEFAULT_NOTIFICATION_CONFIG;
        this.enabledSounds = getEnabledSounds(DEFAULT_NOTIFICATION_CONFIG.notification_sounds);
        /** Config object */
        this.config = uiStore.defaultConfig;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        this.notifications = [];
        this.addStagePeersListeners = (meeting) => {
            meeting.participants.joined.addListener('participantJoined', this.participantJoinedListener);
            meeting.participants.joined.addListener('participantLeft', this.participantLeftListener);
        };
        this.removeStagePeersListeners = (meeting) => {
            meeting.participants.joined.removeListener('participantJoined', this.participantJoinedListener);
            meeting.participants.joined.removeListener('participantLeft', this.participantLeftListener);
        };
        this.onDyteNotification = (e) => {
            this.add(e.detail);
            const playSound = e.detail.playSound;
            if (playSound != undefined)
                this.audio.play(playSound);
        };
        this.onRecordingUpdate = (recordingState) => {
            var _a, _b;
            if (recordingState === 'RECORDING' &&
                this.permissions.notifications.recording_started !== false) {
                this.add({
                    id: 'recording-started',
                    icon: this.iconPack.recording,
                    message: this.t('recording.started'),
                    duration: (_a = this.permissions.notification_duration.recording_started) !== null && _a !== void 0 ? _a : DEFAULT_NOTIFICATION_DURATION,
                });
            }
            else if (recordingState === 'STOPPING' &&
                this.permissions.notifications.recording_stopped !== false) {
                this.add({
                    id: 'recording-stopped',
                    icon: this.iconPack.stop_recording,
                    message: this.t('recording.stopped'),
                    duration: (_b = this.permissions.notification_duration.recording_stopped) !== null && _b !== void 0 ? _b : DEFAULT_NOTIFICATION_DURATION,
                });
            }
        };
    }
    connectedCallback() {
        if (typeof document !== 'undefined') {
            document === null || document === void 0 ? void 0 : document.addEventListener('dyteNotification', this.onDyteNotification);
        }
        this.meetingChanged(this.meeting);
        this.configChanged(this.config);
        this.statesChanged(this.states);
    }
    clearListeners(meeting) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const isLivestream = meeting.meta.viewType === 'LIVESTREAM';
        if ((isLivestream && ((_a = meeting.stage) === null || _a === void 0 ? void 0 : _a.status) === 'ON_STAGE') || !isLivestream) {
            this.removeStagePeersListeners(meeting);
        }
        this.chatUpdateListener && ((_b = meeting.chat) === null || _b === void 0 ? void 0 : _b.removeListener('chatUpdate', this.chatUpdateListener));
        this.pollUpdateListener &&
            ((_c = meeting.polls) === null || _c === void 0 ? void 0 : _c.removeListener('pollsUpdate', this.pollUpdateListener));
        meeting.meta.removeListener('socketConnectionUpdate', this.socketConnectionUpdateListener);
        this.stageRequestAccepted &&
            ((_d = meeting.stage) === null || _d === void 0 ? void 0 : _d.removeListener('stageRequestApproved', this.stageRequestAccepted));
        this.stageRequestRejected &&
            ((_e = meeting.stage) === null || _e === void 0 ? void 0 : _e.removeListener('stageRequestRejected', this.stageRequestRejected));
        this.newStageRequests &&
            ((_f = meeting.stage) === null || _f === void 0 ? void 0 : _f.removeListener('newStageRequest', this.newStageRequests));
        this.stageStatusUpdateListener &&
            ((_g = meeting.stage) === null || _g === void 0 ? void 0 : _g.removeListener('stageStatusUpdate', this.stageStatusUpdateListener));
        (_h = meeting.recording) === null || _h === void 0 ? void 0 : _h.removeListener('recordingUpdate', this.onRecordingUpdate);
        clearTimeout(this.disconnectTimeout);
        meeting.self.removeListener('deviceUpdate', this.deviceUpdateListener);
    }
    disconnectedCallback() {
        var _a;
        if (typeof document !== 'undefined') {
            document === null || document === void 0 ? void 0 : document.removeEventListener('dyteNotification', this.onDyteNotification);
        }
        if (this.meeting == null)
            return;
        this.clearListeners(this.meeting);
        this.waitlistedParticipantJoinedListener &&
            this.meeting.participants.waitlisted.removeListener('participantJoined', this.waitlistedParticipantJoinedListener);
        this.waitlistedParticipantLeftListener &&
            this.meeting.participants.waitlisted.removeListener('participantLeft', this.waitlistedParticipantLeftListener);
        this.activeTabUpdateListener &&
            ((_a = this.meeting.meta) === null || _a === void 0 ? void 0 : _a.removeListener('activeTabUpdate', this.activeTabUpdateListener));
        this.peerStageStatusListener &&
            this.meeting.participants.joined.removeListener('stageStatusUpdate', this.peerStageStatusListener);
    }
    meetingChanged(meeting, oldMeeting) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        clearTimeout(this.disconnectTimeout);
        if (oldMeeting !== undefined)
            this.clearListeners(oldMeeting);
        if (meeting == null)
            return;
        const isLivestream = meeting.meta.viewType === 'LIVESTREAM';
        this.audio = new notification.DyteNotificationsAudio(meeting);
        const { notifications, notification_duration, notification_sounds } = this.permissions;
        this.participantJoinedListener = (participant) => {
            if (notifications.participant_joined) {
                this.add({
                    id: `${participant.id}-joined`,
                    message: `${string.formatName(participant.name)} ${this.t('notifications.joined')}`,
                    image: participant.picture,
                    duration: notification_duration.participant_joined,
                });
            }
            if (notification_sounds.participant_joined && this.canPlayParticipantJoinedSound()) {
                this.audio.play('joined');
            }
        };
        this.participantLeftListener = (participant) => {
            const { socketState: { state }, } = this.meeting.meta;
            if (notifications.participant_left && state !== 'connected') {
                this.add({
                    id: `${participant.id}-left`,
                    message: `${string.formatName(participant.name)} ${this.t('notifications.left')}`,
                    image: participant.picture,
                    duration: notification_duration.participant_left,
                });
            }
            if (notification_sounds.participant_left && this.canPlayParticipantJoinedSound()) {
                this.audio.play('left');
            }
        };
        this.waitlistedParticipantJoinedListener = (participant) => {
            if (!this.canAcceptWaitingRequests())
                return;
            const id = `${participant.id}-joined-waitlist`;
            this.add({
                id,
                message: `${string.formatName(participant.name)} ${this.t('notifications.requesting_to_join_meeting')}`,
                image: participant.picture,
                duration: notification_duration.participant_joined_waitlist,
                button: {
                    text: this.t('notifications.accept'),
                    variant: 'primary',
                    onClick: async () => {
                        await this.meeting.participants.acceptWaitingRoomRequest(participant.id);
                        this.remove(id);
                    },
                },
            });
            if (notification_sounds.participant_joined_waitlist && this.canPlayParticipantJoinedSound()) {
                this.audio.play('message');
            }
        };
        this.waitlistedParticipantLeftListener = (participant) => {
            this.remove(`${participant.id}-joined-waitlist`);
        };
        this.chatUpdateListener = ({ message }) => {
            const parsedMessage = chat.parseMessageForTarget(message);
            if (parsedMessage != null) {
                if (parsedMessage.userId === meeting.self.userId) {
                    return;
                }
                if (parsedMessage.type === 'text') {
                    if (notifications.chat) {
                        this.add({
                            id: `message-${Math.random().toString(36)}`,
                            icon: this.iconPack.chat,
                            message: `${parsedMessage.displayName}: ${parsedMessage.message}`,
                            duration: notification_duration.chat,
                        });
                    }
                    if (notification_sounds.chat && this.canPlayChatSound()) {
                        this.audio.play('message');
                    }
                }
            }
        };
        this.pollUpdateListener = ({ polls, newPoll }) => {
            if (newPoll === false)
                return;
            if (notifications.polls &&
                this.meeting.self.userId !== polls[polls.length - 1].createdByUserId) {
                this.add({
                    id: `poll-${Math.random().toString(36)}`,
                    icon: this.iconPack.poll,
                    message: `${this.t('notifications.new_poll_created_by')} ${polls[polls.length - 1].createdBy}`,
                    duration: notification_duration.polls,
                });
            }
            if (notification_sounds.polls &&
                this.meeting.self.userId !== polls[polls.length - 1].createdByUserId &&
                this.canPlayChatSound()) {
                this.audio.play('message');
            }
        };
        this.deviceUpdateListener = ({ device, preview }) => {
            if (preview)
                return;
            if (device.kind === 'audiooutput') {
                this.audio.setDevice(device.deviceId);
                this.remove(`speaker-switched`);
                this.add({
                    id: `speaker-switched`,
                    message: `${this.t('notifications.connected_to')} ${device.label}`,
                    icon: this.iconPack.speaker,
                    duration: 5000,
                });
            }
            if (device.kind === 'videoinput') {
                this.remove(`camera-switched`);
                this.add({
                    id: `camera-switched`,
                    message: `${this.t('notifications.connected_to')} ${device.label}`,
                    icon: this.meeting.self.videoEnabled ? this.iconPack.video_on : this.iconPack.video_off,
                    iconVariant: this.meeting.self.videoEnabled ? 'primary' : 'danger',
                    duration: 5000,
                });
            }
            if (device.kind === 'audioinput') {
                this.remove(`mic-switched`);
                this.add({
                    id: `mic-switched`,
                    message: `${this.t('notifications.connected_to')} ${device.label}`,
                    icon: this.meeting.self.audioEnabled ? this.iconPack.mic_on : this.iconPack.mic_off,
                    iconVariant: this.meeting.self.audioEnabled ? 'primary' : 'danger',
                    duration: 5000,
                });
            }
        };
        this.socketConnectionUpdateListener = ({ state, reconnectionAttempt, reconnected }) => {
            switch (state) {
                case 'connected':
                    this.remove('socket');
                    if (reconnected)
                        this.add({
                            id: `socket`,
                            icon: this.iconPack.wifi,
                            message: this.t('network.restored'),
                            duration: 3000,
                        });
                    break;
                case 'disconnected':
                    this.remove('socket');
                    this.add({
                        id: 'socket',
                        icon: this.iconPack.disconnected,
                        message: this.t('network.reconnecting'),
                    });
                    break;
                case 'reconnecting':
                    if (reconnectionAttempt >= 6) {
                        this.remove('socket');
                        this.add({
                            id: 'socket',
                            icon: this.iconPack.disconnected,
                            message: this.t('network.disconnected'),
                            button: {
                                text: this.t('end'),
                                variant: 'danger',
                                onClick: () => { var _a; return (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.leaveRoom(); },
                            },
                        });
                    }
                    else if (reconnectionAttempt >= 4) {
                        this.remove('socket');
                        this.add({
                            id: 'socket',
                            icon: this.iconPack.disconnected,
                            message: this.t('network.delay_extended'),
                        });
                    }
                    break;
                case 'failed':
                    this.remove('socket');
                    this.add({
                        id: 'socket',
                        icon: this.iconPack.disconnected,
                        message: this.t('network.leaving'),
                        button: {
                            text: this.t('end'),
                            variant: 'danger',
                            onClick: () => { var _a; return (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.leaveRoom(); },
                        },
                    });
                    break;
            }
        };
        this.activeTabUpdateListener = (activeTab) => {
            if (!notifications.tab_sync)
                return;
            switch (activeTab.type) {
                case 'plugin':
                    const activePlugin = meeting.plugins.active
                        .toArray()
                        .find((plugin) => plugin.id == activeTab.id);
                    if (activePlugin != undefined) {
                        this.add({
                            id: 'activeTab',
                            message: `${this.t('notifications.plugin_switched_to')} ${activePlugin.name}`,
                            duration: notification_duration.participant_joined,
                        });
                    }
                    break;
                case 'screenshare':
                    const screenShareParticipant = meeting.participants.joined
                        .toArray()
                        .filter((participant) => participant.screenShareEnabled)
                        .find((participant) => participant.id == activeTab.id);
                    if (screenShareParticipant != undefined) {
                        this.add({
                            id: 'spotlight',
                            message: `Now watching ${screenShareParticipant.name}'s screen`,
                            duration: notification_duration.webinar,
                        });
                    }
                    break;
            }
        };
        this.peerStageStatusListener = (participant) => {
            if (participant.stageStatus === 'REQUESTED_TO_JOIN_STAGE') {
                this.add({
                    id: `stage-request-${participant.id}`,
                    message: `${participant.name} ${this.t('notifications.requested_to_join_stage')}`,
                    duration: notification_duration.webinar,
                    button: {
                        text: this.t('notifications.accept'),
                        variant: 'primary',
                        onClick: async () => {
                            await this.meeting.stage.grantAccess([participant.userId]);
                            this.remove(`stage-request-${participant.id}`);
                        },
                    },
                });
                if (notification_sounds.webinar) {
                    this.audio.play('joined');
                }
            }
            if (participant.stageStatus === 'ON_STAGE') {
                this.add({
                    id: `stage-joined-${participant.id}`,
                    message: `${participant.name} ${this.t('notifications.joined_stage')}`,
                    duration: notification_duration.webinar,
                });
                if (notification_sounds.webinar) {
                    this.audio.play('joined');
                }
            }
        };
        this.stageRequestAccepted = () => {
            this.add({
                id: 'stage-request-accepted',
                message: this.t('notifications.request_to_join_accepted'),
                duration: 3000,
            });
        };
        this.stageRequestRejected = () => {
            this.add({
                id: 'stage-request-rejected',
                message: this.t('notifications.request_to_join_rejected'),
                duration: 3000,
            });
        };
        this.newStageRequests = ({ count }) => {
            this.add({
                id: 'new-stage-request',
                message: `You have ${count < 0 ? 'new stage' : `${count} pending`} request${count === 1 ? '' : 's'}`,
                duration: 3000,
            });
        };
        this.stageStatusUpdateListener = (status) => {
            if (status === 'ON_STAGE')
                this.addStagePeersListeners(meeting);
            else
                this.removeStagePeersListeners(meeting);
        };
        !uiStore.showLivestream(meeting) && ((_a = meeting.chat) === null || _a === void 0 ? void 0 : _a.addListener('chatUpdate', this.chatUpdateListener));
        // temp fix for viewType mismatch with CHAT
        if (((_b = meeting.self.config.viewType) === null || _b === void 0 ? void 0 : _b.toString()) === 'CHAT') {
            return;
        }
        // all non Chat viewtype code from here
        const currentDevices = meeting.self.getCurrentDevices();
        if (currentDevices.speaker != null) {
            this.audio.setDevice(currentDevices.speaker.deviceId);
        }
        if (isLivestream)
            (_c = meeting.stage) === null || _c === void 0 ? void 0 : _c.on('stageStatusUpdate', this.stageStatusUpdateListener);
        else
            this.addStagePeersListeners(meeting);
        if (this.canAcceptWaitingRequests()) {
            meeting.participants.waitlisted.addListener('participantJoined', this.waitlistedParticipantJoinedListener);
            meeting.participants.waitlisted.addListener('participantLeft', this.waitlistedParticipantLeftListener);
        }
        (_d = meeting.polls) === null || _d === void 0 ? void 0 : _d.addListener('pollsUpdate', this.pollUpdateListener);
        meeting.self.addListener('deviceUpdate', this.deviceUpdateListener);
        meeting.meta.addListener('socketConnectionUpdate', this.socketConnectionUpdateListener);
        (_e = meeting.meta) === null || _e === void 0 ? void 0 : _e.addListener('activeTabUpdate', this.activeTabUpdateListener);
        (_f = meeting.recording) === null || _f === void 0 ? void 0 : _f.addListener('recordingUpdate', this.onRecordingUpdate);
        (_g = meeting.stage) === null || _g === void 0 ? void 0 : _g.addListener('stageRequestApproved', this.stageRequestAccepted);
        (_h = meeting.stage) === null || _h === void 0 ? void 0 : _h.addListener('stageRequestRejected', this.stageRequestRejected);
        if (meeting.self.permissions.stageEnabled && meeting.self.permissions.acceptStageRequests) {
            (_j = meeting.stage) === null || _j === void 0 ? void 0 : _j.addListener('newStageRequest', this.newStageRequests);
        }
    }
    configChanged(config) {
        if (config != null) {
            if ((config === null || config === void 0 ? void 0 : config.config) != null) {
                this.permissions = parseConfig(config.config);
                this.enabledSounds = getEnabledSounds(this.permissions.notification_sounds);
            }
        }
    }
    statesChanged(states) {
        var _a;
        if (states != null) {
            const notificationSoundsEnabled = !((_a = states === null || states === void 0 ? void 0 : states.prefs) === null || _a === void 0 ? void 0 : _a.muteNotificationSounds);
            // toggle only the notification sounds values which were enabled in the first place
            for (const permission of this.enabledSounds) {
                if (permission in this.permissions.notification_sounds) {
                    this.permissions.notification_sounds[permission] = notificationSoundsEnabled;
                }
            }
        }
    }
    apiErrorListener({ detail }) {
        const { trace, message } = detail;
        this.add({
            id: trace,
            message,
            duration: DEFAULT_NOTIFICATION_DURATION,
            icon: this.iconPack.warning,
        });
    }
    sendNotificationListener({ detail }) {
        const { trace, message } = detail;
        this.add({
            id: trace,
            message,
            duration: DEFAULT_NOTIFICATION_DURATION,
        });
    }
    add(notification) {
        // show notifications only if tab is in focus and a maximum of 5 at a time
        if (document.visibilityState === 'visible' && this.notifications.length < 5) {
            // adds new notification to start of array so they appear at the bottom
            this.notifications = [...this.notifications, notification];
        }
    }
    remove(id) {
        this.notifications = this.notifications.filter((notification) => notification.id !== id);
    }
    handleDismiss(e) {
        e.stopPropagation();
        const id = e.detail;
        const el = this.host.shadowRoot.querySelector(`[data-id="${id}"]`);
        // exit animation
        el === null || el === void 0 ? void 0 : el.classList.add('exit');
        setTimeout(() => {
            index$1.writeTask(() => {
                this.remove(id);
            });
        }, 400);
    }
    canPlayParticipantJoinedSound() {
        return (this.permissions.participant_joined_sound_notification_limit == undefined ||
            this.permissions.participant_joined_sound_notification_limit <= 0 ||
            this.meeting.participants.count <=
                this.permissions.participant_joined_sound_notification_limit);
    }
    canPlayChatSound() {
        return (this.permissions.participant_chat_message_sound_notification_limit == undefined ||
            this.permissions.participant_chat_message_sound_notification_limit <= 0 ||
            this.meeting.participants.count <=
                this.permissions.participant_chat_message_sound_notification_limit);
    }
    canAcceptWaitingRequests() {
        return (this.permissions.notifications.participant_joined_waitlist &&
            this.meeting.self.permissions.acceptWaitingRequests);
    }
    render() {
        return (index$1.h(index$1.Host, { key: '1e122b16897a90f7c7900057849e89d5152f477f' }, this.notifications.map((notification) => (index$1.h("dyte-notification", { size: this.size, key: notification.id, "data-id": notification.id, notification: notification, onDyteNotificationDismiss: (e) => this.handleDismiss(e), iconPack: this.iconPack, t: this.t })))));
    }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "config": ["configChanged"],
        "states": ["statesChanged"]
    }; }
};
__decorate$d([
    index.SyncWithStore()
], DyteNotifications.prototype, "meeting", void 0);
__decorate$d([
    index.SyncWithStore()
], DyteNotifications.prototype, "states", void 0);
__decorate$d([
    index.SyncWithStore()
], DyteNotifications.prototype, "t", void 0);
__decorate$d([
    index.SyncWithStore()
], DyteNotifications.prototype, "size", void 0);
__decorate$d([
    index.SyncWithStore()
], DyteNotifications.prototype, "iconPack", void 0);
DyteNotifications.style = DyteNotificationsStyle0;

const dyteOverlayModalCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / 0.6);position:fixed;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);z-index:50}dyte-icon{height:var(--dyte-space-20, 80px)}h2{margin:var(--dyte-space-2, 8px);font-weight:500}p{margin:var(--dyte-space-0, 0px);font-size:16px}";
const DyteOverlayModalStyle0 = dyteOverlayModalCss;

var __decorate$c = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteOverlayModal = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
    }
    connectedCallback() {
        if (this.states.activeOverlayModal.timeout) {
            setTimeout(() => {
                this.stateUpdate.emit({ activeOverlayModal: { active: false } });
            }, this.states.activeOverlayModal.timeout);
        }
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'b4fa570e714d3297c1f7f5b25038d877f6001319' }, index$1.h("dyte-icon", { key: 'df183bada8963c6fbb22f27768e96922232201b7', icon: this.states.activeOverlayModal.icon }), index$1.h("h2", { key: 'c028667f07d9db82e27e9e25f6e1d8712edccf20' }, this.states.activeOverlayModal.title), index$1.h("p", { key: '74e847ad00e26147494acfb74481025e5c62f27c' }, this.states.activeOverlayModal.description)));
    }
};
__decorate$c([
    index.SyncWithStore()
], DyteOverlayModal.prototype, "meeting", void 0);
__decorate$c([
    index.SyncWithStore()
], DyteOverlayModal.prototype, "states", void 0);
__decorate$c([
    index.SyncWithStore()
], DyteOverlayModal.prototype, "iconPack", void 0);
__decorate$c([
    index.SyncWithStore()
], DyteOverlayModal.prototype, "t", void 0);
DyteOverlayModal.style = DyteOverlayModalStyle0;

const dytePaginatedListCss = ".scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;flex-direction:column;flex:1}.container{box-sizing:border-box;display:flex;flex-direction:column-reverse;padding-top:var(--dyte-space-4, 16px);padding-bottom:var(--dyte-space-4, 16px);flex:1 0 0px;overflow-y:scroll;}.file-picker{display:none}.chat *:first-child{margin-top:var(--dyte-space-0, 0px)}.chat .head{display:flex;align-items:center}.chat .head .name{margin-right:var(--dyte-space-4, 16px);font-size:12px;font-weight:700}.chat .head .time{font-size:12px;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.chat .body{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);overflow-wrap:break-word;font-size:14px;line-height:1.375}.chat .body .emoji{font-size:24px}p{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px)}dyte-text-message,dyte-image-message,dyte-file-message{margin-top:var(--dyte-space-4, 16px);display:block;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);font-family:var(--dyte-font-family, sans-serif);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));box-sizing:border-box}*[is-continued]{margin-top:var(--dyte-space-3, 12px)}dyte-text-message[is-continued]{margin-top:var(--dyte-space-2, 8px)}.chat .image{position:relative;height:var(--dyte-space-40, 160px);max-width:var(--dyte-space-64, 256px);cursor:pointer}.chat .image img{display:none;height:100%;width:100%;border-radius:var(--dyte-border-radius-sm, 4px);-o-object-fit:cover;object-fit:cover}.chat .image .image-spinner{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.chat .image .image-spinner dyte-spinner{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity))}.chat .image .image-errored{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-sm, 4px);background-color:rgba(var(--dyte-colors-danger, 255 45 45) / 0.1);--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}.chat .image .actions{display:none;height:var(--dyte-space-8, 32px);align-items:center;position:absolute;top:var(--dyte-space-2, 8px);right:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden;--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.chat .image .actions .action{height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);border-radius:var(--dyte-border-radius-none, 0);border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.chat .image .actions .action:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.image.loaded img{display:block}.image.loaded .image-spinner{display:none}.image:hover .actions,.image:focus .actions{display:flex}.chat .file{display:flex;align-items:center;gap:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);padding-top:var(--dyte-space-1\\.5, 6px);padding-bottom:var(--dyte-space-1\\.5, 6px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.chat .file .file-data{flex:1 1 0%}.chat .file .file-data .name{word-break:break-all;color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}.chat .file .file-data .file-data-split{margin-top:var(--dyte-space-0\\.5, 2px);display:flex;align-items:center;font-size:12px}.chat .file .file-data .file-data-split .ext{margin-right:var(--dyte-space-2, 8px);text-transform:uppercase;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}.chat .file .file-data .file-data-split .divider{height:var(--dyte-space-4, 16px);width:var(--dyte-space-0\\.5, 2px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.chat .file .file-data .file-data-split .size{margin-left:var(--dyte-space-2, 8px)}.smallest-dom-element{width:1px}#top-scroll{transform:translateY(20vh)}#bottom-scroll{transform:translateY(-20vh)}a{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity));text-decoration-line:none}a:hover{text-decoration-line:underline}.show-new-messages-ctr{pointer-events:none;position:absolute;bottom:var(--dyte-space-2, 8px);right:var(--dyte-space-4, 16px);z-index:10;margin-top:calc(var(--dyte-space-14, 56px) * -1);--tw-translate-y:var(--dyte-space-28, 112px);transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));opacity:0;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.show-new-messages-ctr.active{--tw-translate-y:var(--dyte-space-0, 0px);transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));opacity:1}.show-new-messages{pointer-events:auto;border-radius:9999px}.show-new-messages:hover{border-radius:9999px;--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);--tw-ring-opacity:1;--tw-ring-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-ring-opacity));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}dyte-spinner,.empty-list{margin:auto}.page-wrapper{margin-left:var(--dyte-space-1, 4px);margin-right:var(--dyte-space-1, 4px)}.message-wrapper{margin-bottom:var(--dyte-space-2, 8px)}.pinned .message-wrapper{position:relative}.pinned .pin-icon{position:absolute;right:calc(var(--dyte-space-1, 4px) * -1);top:calc(var(--dyte-space-1, 4px) * -1);display:flex;border-radius:var(--dyte-border-radius-sm, 4px)}.pinned dyte-message-view{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px)}";
const DytePaginatedListStyle0 = dytePaginatedListCss;

var __decorate$b = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DytePaginatedList = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** auto scroll list to bottom */
        this.autoScroll = true;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** label to show when empty */
        this.emptyListLabel = null;
        this.isLoading = false;
        this.rerenderBoolean = false;
        /**
         * This gets disabled when the user scrolls up and the bottom node
         * is not visible anymore.
         */
        this.shouldRenderNewNodes = true;
        /**
         * This gets disabled when the user scrolls up and the bottom node
         * is not visible anymore.
         */
        this.hasNewNodesToRender = false;
        this.showEmptyListLabel = false;
        /**
         * This is a private variable not a state
         * since we want to debounce rerenders
         *
         * A list of pages where each page contains a number of Nodes
         * [
         *  [Node 1, Node 2, Node 3.... Node N],
         *  [Node 1, Node 2, Node 3.... Node N],
         * ]
         */
        this.pagesToRender = [[]];
        this.currentTime = () => {
            return new Date().getTime();
        };
        this.observe = (el) => {
            if (!el)
                return;
            this.intersectionObserver.observe(el);
        };
    }
    /**
     * On a new node created
     */
    async onNewNode(node) {
        if (!this.shouldRenderNewNodes) {
            this.hasNewNodesToRender = true;
            return;
        }
        this.addNodeToRender(node, false);
        this.rerender();
    }
    /**
     * On node deleted
     */
    async onNodeDelete(key) {
        const oldLength = this.pagesToRender.flat().length;
        this.pagesToRender = this.pagesToRender.map((page) => page.filter((item) => item.id !== key));
        if (oldLength !== this.pagesToRender.flat().length) {
            this.rerender();
        }
    }
    /**
     * On node updated
     */
    async onNodeUpdate(key, newItem) {
        let shouldRerender = false;
        this.pagesToRender = this.pagesToRender.map((page) => page.map((item) => {
            if (item.id === key) {
                shouldRerender = true;
                return newItem;
            }
            return item;
        }));
        if (shouldRerender)
            this.rerender();
    }
    onItemChanged(newItemId, oldItemId) {
        if (newItemId !== oldItemId) {
            this.pagesToRender = [[]];
            this.loadFirstPage().then(() => this.rerender());
        }
    }
    connectedCallback() {
        this.rerender = debounce.debounce(this.rerender.bind(this), 50, { maxWait: 200 });
        this.intersectionObserver = new IntersectionObserver((entries) => {
            index$1.writeTask(() => {
                for (const entry of entries) {
                    if (entry.target.id === 'bottom-scroll') {
                        if (entry.isIntersecting)
                            this.loadBottom();
                        else
                            this.shouldRenderNewNodes = false;
                    }
                    if (entry.target.id === 'top-scroll' && entry.isIntersecting) {
                        this.loadTop();
                    }
                }
            });
        });
    }
    disconnectedCallback() {
        this.intersectionObserver.disconnect();
    }
    componentDidLoad() {
        /**
         * Adding observes here so that on the first render we scroll down
         * and shouldRenderNewNodes remains true
         */
        this.loadFirstPage();
        this.observe(this.$topRef);
        this.observe(this.$bottomRef);
    }
    componentDidRender() {
        if (this.shouldRenderNewNodes && this.autoScroll)
            scroll.smoothScrollToBottom(this.$paginatedList);
    }
    loadFirstPage() {
        return this.loadPage(this.currentTime(), this.pageSize, true, (data) => {
            if (data.length === 0) {
                this.showEmptyListLabel = true;
            }
        });
    }
    loadTop() {
        /**
         * If there is only one unfilled page or no page, no need to check
         * for top since it will be empty
         */
        if (this.pagesToRender.length === 0)
            return;
        if (this.pagesToRender.length === 1 && this.pagesToRender[0].length < this.pageSize)
            return;
        /**
         * TODO: Make this more flexible currently this only works with chat
         */
        const oldestVNode = this.pagesToRender[0][0];
        const oldestTimestamp = oldestVNode.timeMs;
        // TODO: scrollIntoView
        const onPageRendered = () => { }; // oldestVNode.$elm$?.scrollIntoView();
        this.loadPage(oldestTimestamp - 1, this.pageSize, true, onPageRendered);
    }
    loadBottom() {
        /**
         * If there is only one unfilled page or no page, no need to check
         * for top since it will be empty
         */
        if (this.pagesToRender.length === 0) {
            this.shouldRenderNewNodes = true;
            return;
        }
        if (this.pagesToRender.length === 1 && this.pagesToRender[0].length < this.pageSize) {
            this.shouldRenderNewNodes = true;
            return;
        }
        const newestVNode = this.pagesToRender.at(-1).at(-1);
        const newestTimestamp = newestVNode.timeMs;
        // TODO: scrollIntoView
        const onPageRendered = () => scroll.smoothScrollToBottom(this.$paginatedList);
        this.loadPage(newestTimestamp + 1, this.pageSize, false, onPageRendered);
    }
    addNodeToRender(node, addToStart) {
        if (addToStart) {
            const firstPage = this.pagesToRender[0];
            if (firstPage && (firstPage === null || firstPage === void 0 ? void 0 : firstPage.length) < this.pageSize) {
                /**
                 * If first page is not full then just add to that page
                 */
                firstPage.unshift(node);
            }
            else {
                /**
                 * If first page is full then add a new page to the start
                 */
                const newPage = [node];
                this.pagesToRender.unshift(newPage);
                this.removeLastPageIfNeeded(false);
            }
        }
        else {
            const [lastPage] = this.pagesToRender.slice(-1);
            if (lastPage && (lastPage === null || lastPage === void 0 ? void 0 : lastPage.length) < this.pageSize) {
                /**
                 * If last page is not full then just add it
                 */
                lastPage.push(node);
            }
            else {
                /**
                 * If last page is full add a new page with just
                 * this node
                 */
                const newPage = [node];
                this.pagesToRender.push(newPage);
                this.removeLastPageIfNeeded(true);
            }
        }
    }
    /**
     * @param start
     * @param end
     * @param reversed Defines whether to add the page at the beginning or the end
     * @param onPageLoaded Callback for when all new nodes are rendered
     */
    async loadPage(timestamp, size, reversed, onPageRendered = () => { }) {
        this.isLoading = true;
        const data = (await this.fetchData(timestamp, size, reversed));
        this.isLoading = false;
        if (!(data === null || data === void 0 ? void 0 : data.length)) {
            /**
             * While scrolling down if there were no new items found
             * then start rendering new nodes;
             */
            if (!reversed) {
                this.hasNewNodesToRender = false;
                this.shouldRenderNewNodes = true;
            }
            onPageRendered([]);
            return;
        }
        // const page = this.createNodes(data);
        // const lastNodeToBeRendered = page[page.length - 1];
        // let lastNodeToBeRenderedProxy = new Proxy(lastNodeToBeRendered, {
        //   set(obj, prop, value) {
        //     /**
        //      * Whenever the last node has the 'elm' property added to it
        //      * we can assume it has been rendered
        //      */
        //     if (prop === '$elm$' && value && !obj.$elm$) onPageRendered();
        //     obj[prop] = value;
        //     return true;
        //   },
        // });
        // page[page.length - 1] = lastNodeToBeRenderedProxy;
        data.forEach((node) => this.addNodeToRender(node, reversed));
        this.rerender();
        onPageRendered(data);
    }
    rerender() {
        this.rerenderBoolean = !this.rerenderBoolean;
    }
    removeLastPageIfNeeded(removeFromStart) {
        if (this.pagesToRender.length > this.pagesAllowed) {
            if (removeFromStart)
                this.pagesToRender.shift();
            else
                this.pagesToRender.pop();
        }
    }
    onDownArrowClicked() {
        /**
         * Load the freshest pages
         */
        this.loadBottom();
    }
    render() {
        var _a;
        /**
         * div.container is flex=column-reverse
         * which is why div#bottom-scroll comes before div#top-scroll
         * div.page-wrapper prevents reversal of messages
         */
        return (index$1.h(index$1.Host, { key: '704a4d2f1669f83d2b609276c4e43b7d242dc204' }, index$1.h("div", { key: 'a73818c8a9db30909b021e5409a05e54b917172c', class: "scrollbar container", part: "container", ref: (el) => (this.$paginatedList = el) }, index$1.h("div", { key: '4f3c5bbde0e1e3d868b9f188c1de0aea83c57ef7', class: { 'show-new-messages-ctr': true, active: !this.shouldRenderNewNodes } }, index$1.h("dyte-button", { key: '8bee70e062ccefaedf15495bb4be713b75c72c98', class: "show-new-messages", kind: "icon", variant: "secondary", part: "show-new-messages", onClick: () => this.onDownArrowClicked() }, index$1.h("dyte-icon", { key: 'd8872dd2b18a05d9969ce4c0e79925e05ca511fe', icon: this.iconPack.chevron_down }))), index$1.h("div", { key: 'fbd24ab1cc8352807661d6b78c771df69fa26d12', class: "smallest-dom-element", id: "bottom-scroll", ref: (el) => (this.$bottomRef = el) }), this.isLoading && this.pagesToRender.flat().length === 0 && index$1.h("dyte-spinner", { key: 'df59bc4e2d777d1ce98088930f5dd4e5bfead2dc', size: "lg" }), this.pagesToRender.flat().length === 0 && this.showEmptyListLabel ? (index$1.h("div", { class: "empty-list" }, (_a = this.emptyListLabel) !== null && _a !== void 0 ? _a : this.t('list.empty'))) : (index$1.h("div", { class: "page-wrapper" }, this.pagesToRender.map((page) => this.createNodes(page)))), index$1.h("div", { key: '7b54f683c79b5df12e101fcbb5fb645ddaeca082', class: "smallest-dom-element", id: "top-scroll", ref: (el) => (this.$topRef = el) }))));
    }
    static get watchers() { return {
        "selectedItemId": ["onItemChanged"]
    }; }
};
__decorate$b([
    index.SyncWithStore()
], DytePaginatedList.prototype, "iconPack", void 0);
__decorate$b([
    index.SyncWithStore()
], DytePaginatedList.prototype, "t", void 0);
DytePaginatedList.style = DytePaginatedListStyle0;

const dyteParticipantTileCss = ":host {\n  line-height: initial;\n  font-family: var(--dyte-font-family, sans-serif);\n\n  font-feature-settings: normal;\n  font-variation-settings: normal;\n}\n\np {\n  margin: var(--dyte-space-0, 0px);\n  padding: var(--dyte-space-0, 0px);\n}\n\n\n:host {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  aspect-ratio: 16 / 9;\n  height: var(--dyte-space-56, 224px);\n  overflow: hidden;\n  border-radius: var(--dyte-border-radius-lg, 12px);\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-video-bg, 24 24 24) / var(--tw-bg-opacity));\n\n  transition-property: var(--dyte-transition-property, all);\n  transition-duration: 150ms;\n  container-type: inline-size;\n  container-name: participanttile;\n}\n\n@media (prefers-reduced-motion) {\n  /* No transitions when disabled */\n  :host {\n    --dyte-transition-property: none;\n  }\n}\n\ndyte-avatar {\n  z-index: -1;\n}\n\n/**\n  NOTE: provided :slotted(dyte-name-tag) & dyte-name-tag separately\n  because ::slotted isn't applied on default slots.\n*/\n\n::slotted(dyte-name-tag), \ndyte-name-tag {\n  position: absolute;\n  left: var(--dyte-space-3, 12px);\n  bottom: var(--dyte-space-3, 12px);\n}\n\n:host([size='sm'][variant='solid']) ::slotted(dyte-name-tag), \n  :host([size='sm'][variant='solid']) dyte-name-tag {\n  left: var(--dyte-space-2, 8px);\n  bottom: var(--dyte-space-2, 8px);\n  height: var(--dyte-space-4, 16px);\n}\n\n::slotted(dyte-network-indicator), \ndyte-network-indicator {\n  position: absolute;\n  right: var(--dyte-space-3, 12px);\n  bottom: var(--dyte-space-3, 12px);\n}\n\n:host([size='sm']) ::slotted(dyte-network-indicator), \n  :host([size='sm']) dyte-network-indicator {\n  right: var(--dyte-space-2, 8px);\n  bottom: var(--dyte-space-2, 8px);\n}\n\nvideo {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  border-radius: var(--dyte-border-radius-lg, 12px);\n}\n\nvideo.contain {\n  -o-object-fit: contain;\n     object-fit: contain;\n}\n\nvideo.cover {\n  -o-object-fit: cover;\n     object-fit: cover;\n}\n\nvideo::-webkit-media-controls {\n  display: none !important;\n}\n\n.pinned-icon {\n  position: absolute;\n  left: var(--dyte-space-3, 12px);\n  top: var(--dyte-space-3, 12px);\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  padding: var(--dyte-space-1, 4px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));\n}\n\n.network-container {\n  position: absolute;\n  right: var(--dyte-space-3, 12px);\n  bottom: var(--dyte-space-3, 12px);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: var(--dyte-space-2, 8px);\n  font-size: 12px;\n  border-radius: var(--dyte-border-radius-md, 8px);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));\n}\n.network-icon {\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  --tw-text-opacity: 1;\n  color: rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity));\n}\n\n:host([size='sm']) .pinned-icon {\n  top: var(--dyte-space-2, 8px);\n  left: var(--dyte-space-2, 8px);\n}\n\n:host([variant='gradient']) ::slotted(dyte-audio-visualizer), \n  :host([variant='gradient']) dyte-audio-visualizer {\n  position: absolute;\n  top: var(--dyte-space-2, 8px);\n  right: var(--dyte-space-2, 8px);\n  border-radius: 9999px;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));\n  padding: var(--dyte-space-2, 8px);\n}\n\n:host([variant='gradient']) ::slotted(dyte-name-tag), \n  :host([variant='gradient']) dyte-name-tag {\n  bottom: var(--dyte-space-0, 0px);\n  left: var(--dyte-space-0, 0px);\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  background-color: transparent;\n  background-image: linear-gradient(to top, var(--tw-gradient-stops));\n  --tw-gradient-from: rgb(var(--dyte-colors-background-1000, 8 8 8));\n  --tw-gradient-to: rgba(var(--dyte-colors-background-1000, 8 8 8) / 0);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n  --tw-gradient-to: transparent;\n}\n\nvideo.mirror {\n  transform: scaleX(-1);\n}\n\n/** Name tag positions */\n\n:host([name-tag-position='bottom-right']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='bottom-right']) dyte-name-tag {\n  left: auto;\n  right: var(--dyte-space-3, 12px);\n}\n\n:host([name-tag-position='bottom-center']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='bottom-center']) dyte-name-tag {\n  left: auto;\n  right: auto;\n}\n\n:host([name-tag-position='top-left']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='top-left']) dyte-name-tag {\n  top: var(--dyte-space-3, 12px);\n  bottom: auto;\n}\n\n:host([name-tag-position='top-right']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='top-right']) dyte-name-tag {\n  top: var(--dyte-space-3, 12px);\n  right: var(--dyte-space-3, 12px);\n  left: auto;\n  bottom: auto;\n}\n\n:host([name-tag-position='top-center']) ::slotted(dyte-name-tag), \n  :host([name-tag-position='top-center']) dyte-name-tag {\n  left: auto;\n  right: auto;\n  bottom: auto;\n  top: var(--dyte-space-3, 12px);\n}\n\n@media only screen and (max-height: 480px) and (orientation: landscape) {\n  :host([size='sm']) {\n    border-radius: var(--dyte-border-radius-sm, 4px);\n  }\n\n  :host([size='sm']) > video {\n    border-radius: var(--dyte-border-radius-sm, 4px);\n  }\n\n  ::slotted(dyte-avatar), \n  dyte-avatar {\n    height: var(--dyte-space-12, 48px);\n    width: var(--dyte-space-12, 48px);\n  }\n    :host([size='sm'][variant='solid']) ::slotted(dyte-name-tag),\n    :host([size='sm'][variant='solid']) dyte-name-tag {\n      transform-origin: -2% 100%;\n      transform: scale(0.6);\n      z-index: 10;\n      left: var(--dyte-space-0, 0px);\n      bottom: var(--dyte-space-0, 0px);\n      border-radius: var(--dyte-border-radius-none, 0);\n    }\n}\n\n@media only screen and (max-width: 480px) and (orientation: portrait) {\n  :host([size='sm']) {\n    border-radius: var(--dyte-border-radius-sm, 4px);\n  }\n\n  :host([size='sm']) > video {\n    border-radius: var(--dyte-border-radius-sm, 4px);\n  }\n\n  ::slotted(dyte-avatar), \n  dyte-avatar {\n    height: var(--dyte-space-12, 48px);\n    width: var(--dyte-space-12, 48px);\n  }\n    :host([size='sm'][variant='solid']) ::slotted(dyte-name-tag),\n    :host([size='sm'][variant='solid']) dyte-name-tag {\n      transform-origin: -5% 110%;\n      transform: scale(0.6);\n      z-index: 10;\n      left: var(--dyte-space-0, 0px);\n      bottom: var(--dyte-space-0, 0px);\n      border-radius: var(--dyte-border-radius-none, 0);\n    }\n}\n\n@container participanttile (max-width: 300px) {\n  ::slotted(dyte-name-tag),\n  dyte-name-tag {\n    transform-origin: 0 100%;\n    transform: scale(0.8);\n  }\n\n  ::slotted(dyte-avatar), \n  dyte-avatar {\n    height: var(--dyte-space-8, 32px) !important;\n    width: var(--dyte-space-8, 32px) !important;\n  }\n}\n\n@container participanttile (max-width: 150px) {\n  ::slotted(dyte-name-tag),\n  dyte-name-tag[variant='solid'] {\n    transform-origin: -10% 130%;\n    transform: scale(0.6);\n    z-index: 10;\n    border-radius: 9999px;\n  }\n\n  ::slotted(dyte-avatar), \n  dyte-avatar {\n    height: 6 !important;\n    width: 6 !important;\n  }\n}\n";
const DyteParticipantTileStyle0 = dyteParticipantTileCss;

var __decorate$a = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipantTile = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.tileLoad = index$1.createEvent(this, "tileLoad", 7);
        this.tileUnload = index$1.createEvent(this, "tileUnload", 7);
        this.isPinned = false;
        this.mediaConnectionError = false;
        /** Position of name tag */
        this.nameTagPosition = 'bottom-left';
        /** Whether tile is used for preview */
        this.isPreview = false;
        /** Config object */
        this.config = uiStore.defaultConfig;
        /** Variant */
        this.variant = 'solid';
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.onPinned = ({ isPinned }) => {
            this.isPinned = isPinned;
        };
        this.isSelf = () => { var _a; return this.isPreview || this.participant.id === ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.id); };
        this.onPause = (event) => {
            var _a, _b;
            if (this.isSelf() &&
                ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.__internals__.features.hasFeature(uiStore.FlagsmithFeatureFlags.PLAY_PARTICIPANT_TILE_VIDEO_ON_PAUSE))) {
                this.meeting.__internals__.logger.warn(`Video player paused for ${this.participant.id} isSelf: ${this.isSelf()}`);
                // @ts-ignore
                (_b = event === null || event === void 0 ? void 0 : event.target) === null || _b === void 0 ? void 0 : _b.play();
            }
        };
        this.onPlaying = () => {
            if (this.playTimeout)
                clearTimeout(this.playTimeout);
        };
    }
    onVideoRef(el) {
        if (!this.participant || !this.meeting || el === this.videoEl)
            return;
        this.videoEl = el;
        this.participant.registerVideoElement(this.videoEl, this.isPreview);
        this.tileLoad.emit({ participant: this.participant, videoElement: this.videoEl });
    }
    connectedCallback() {
        // set videoState before initial render and initialize listeners
        if (this.meeting)
            this.meetingChanged(this.meeting);
        else
            this.participantsChanged(this.participant);
    }
    disconnectedCallback() {
        if (this.playTimeout)
            clearTimeout(this.playTimeout);
        if (this.participant == null)
            return;
        this.participant.deregisterVideoElement(this.videoEl, this.isPreview);
        this.participant.removeListener('pinned', this.onPinned);
        this.participant.removeListener('unpinned', this.onPinned);
        this.meeting.meta.off('mediaConnectionUpdate', this.mediaConnectionUpdateListener);
        this.tileUnload.emit(this.participant);
    }
    meetingChanged(meeting) {
        if (meeting == undefined)
            return;
        this.participantsChanged(this.participant);
    }
    participantsChanged(participant) {
        if (participant == undefined)
            return;
        if (this.meeting === undefined) {
            if (this.isPreview) {
                this.videoEl && this.participant.registerVideoElement(this.videoEl, this.isPreview);
            }
            return;
        }
        this.isPinned = participant.isPinned;
        this.videoEl && this.participant.registerVideoElement(this.videoEl, this.isPreview);
        participant.addListener('pinned', this.onPinned);
        participant.addListener('unpinned', this.onPinned);
        this.meeting.meta.on('mediaConnectionUpdate', this.mediaConnectionUpdateListener.bind(this));
    }
    mediaConnectionUpdateListener() {
        var _a, _b, _c;
        const { recv: consuming, send: producing } = (_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.mediaState) !== null && _c !== void 0 ? _c : {};
        if ((consuming === null || consuming === void 0 ? void 0 : consuming.state) !== 'connected' && !this.isSelf()) {
            this.mediaConnectionError = true;
        }
        else if ((producing === null || producing === void 0 ? void 0 : producing.state) !== 'connected' && this.isSelf()) {
            this.mediaConnectionError = true;
        }
        else
            this.mediaConnectionError = false;
    }
    isMirrored() {
        var _a;
        if (this.participant != null) {
            if (this.isSelf()) {
                const states = this.states;
                const mirrorVideo = (_a = states === null || states === void 0 ? void 0 : states.prefs) === null || _a === void 0 ? void 0 : _a.mirrorVideo;
                if (typeof mirrorVideo === 'boolean') {
                    return mirrorVideo;
                }
            }
        }
        return false;
    }
    render() {
        var _a, _b, _c;
        const defaults = {
            meeting: this.meeting,
            size: this.size,
            states: this.states,
            config: this.config,
            iconPack: this.iconPack,
            t: this.t,
        };
        return (index$1.h(index$1.Host, { key: 'ae0d125a5d4b2bd7cab5c4c286be3fd31d9b6b80' }, index$1.h("video", { key: '46c326caaf26377c1a7e6ba2989eabbc89a3d4aa', ref: (el) => this.onVideoRef(el), class: {
                mirror: this.isMirrored(),
                [(_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.videoFit) !== null && _c !== void 0 ? _c : 'cover']: true,
            }, onPlaying: this.onPlaying, onPause: this.onPause, autoPlay: true, playsInline: true, muted: true, part: "video" }), this.isPinned && (index$1.h("dyte-icon", { key: '8a3e9d03d2c69b9a281d6633a87f519cd36f8caf', class: "pinned-icon", icon: this.iconPack.pin, "aria-label": this.t('pinned'), part: "pinned-icon" })), this.mediaConnectionError && (index$1.h("div", { key: 'b501ff04fcbe6c283b71c5bfa226cdc2b0127c6e', class: "network-container", part: "network-indicator" }, index$1.h("dyte-icon", { key: 'a200fd6ee5973cacd387ea38af916ac8d71355b5', class: "network-icon", icon: this.iconPack.disconnected, "aria-label": this.t('pinned'), part: "pinned-icon" }))), index$1.h("slot", { key: '03c182c48452d89f381eecea6895a98f865a1b2f' }, index$1.h(index$2.Render, { key: '459ff30c21c410a4cd7eea256d203fca6bf9d4bd', element: "dyte-participant-tile", defaults: defaults, childProps: {
                participant: this.participant,
            }, deepProps: true, onlyChildren: true }))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "participant": ["participantsChanged"]
    }; }
};
__decorate$a([
    index.SyncWithStore()
], DyteParticipantTile.prototype, "meeting", void 0);
__decorate$a([
    index.SyncWithStore()
], DyteParticipantTile.prototype, "states", void 0);
__decorate$a([
    index.SyncWithStore()
], DyteParticipantTile.prototype, "size", void 0);
__decorate$a([
    index.SyncWithStore()
], DyteParticipantTile.prototype, "iconPack", void 0);
__decorate$a([
    index.SyncWithStore()
], DyteParticipantTile.prototype, "t", void 0);
DyteParticipantTile.style = DyteParticipantTileStyle0;

const dytePermissionsMessageCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{box-sizing:border-box;display:block;max-height:100%;width:600px;overflow-y:auto;padding:var(--dyte-space-6, 24px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));overflow-wrap:break-word;color:rgb(var(--dyte-colors-text-1000, 255 255 255));word-wrap:break-word}.actions{display:flex;align-items:center;gap:var(--dyte-space-2, 8px)}.text-icon{display:inline-block;vertical-align:middle}h2{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-4, 16px)}h2 .text-icon{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}p{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-4, 16px)}.need-help-link{margin-top:var(--dyte-space-2, 8px);display:inline-block;text-underline-offset:2px;--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-400, 53 110 253) / var(--tw-text-opacity))}.need-help-link:hover{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-600, 13 81 253) / var(--tw-text-opacity))}a dyte-icon{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px)}:host([size='sm']) .actions{flex-direction:column;align-items:flex-start;justify-content:center}:host([size='sm']) .action{width:100%;padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px)}.actions{margin-top:var(--dyte-space-6, 24px)}.actions dyte-button{flex:1 1 0%}.svg-container{display:flex;width:100%;justify-content:center !important}.svg-ins{width:80%;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}";
const DytePermissionsMessageStyle0 = dytePermissionsMessageCss;

var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const steps = {
    'Chrome.Desktop.audio': ['Chrome1.svg', 'Chrome2.svg', 'Chrome3.svg'],
    'Chrome.Desktop.video': ['Chrome1.svg', 'Chrome2.svg', 'Chrome3.svg'],
};
const DytePermissionsMessage = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Language */
        this.t = uiStore.useLanguage();
        /** Icon Pack */
        this.iconPack = uiStore.defaultIconPack;
        this.currentStep = 0;
        this.svgSteps = [];
        this.continue = () => {
            this.stateUpdate.emit({
                activePermissionsMessage: { enabled: false },
            });
        };
        this.reload = () => {
            if (typeof window !== 'undefined') {
                window.location.reload();
            }
        };
        this.getImage = async (stepURL) => {
            function replaceAll(target, search, replacement) {
                return target.split(search).join(replacement);
            }
            const svgReq = await fetch(`https://assets.dyte.io/ui-kit/permissions/${stepURL}`);
            let svg = await svgReq.text();
            svg = replaceAll(svg, 'yoursite.com', location.host);
            svg = replaceAll(svg, 'Yoursite', document.title.length > 14 ? `${document.title.slice(0, 14)}...` : document.title);
            return svg;
        };
        this.nextStep = () => {
            this.currentStep = (this.currentStep + 1) % this.svgSteps.length;
        };
        this.openMacSystemSettings = () => {
            const l = document.createElement('a');
            switch (this.mediaType) {
                case 'audio':
                    l.href = 'x-apple.systempreferences:com.apple.preference.security?Privacy_Microphone';
                    break;
                case 'screenshare':
                    l.href = 'x-apple.systempreferences:com.apple.preference.security?Privacy_ScreenCapture';
                    break;
                case 'video':
                    l.href = 'x-apple.systempreferences:com.apple.preference.security?Privacy_Camera';
                    break;
            }
            l.click();
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        if (this.stepsTimer)
            clearTimeout(this.stepsTimer);
    }
    meetingChanged(meeting) {
        var _a, _b, _c;
        if (meeting != null) {
            this.device = meeting.self.device;
            const deviceType = ((_a = this.device) === null || _a === void 0 ? void 0 : _a.isMobile) ? 'Mobile' : 'Desktop';
            const currentSteps = (_c = steps[`${(_b = this.device) === null || _b === void 0 ? void 0 : _b.browserName}.${deviceType}.${this.mediaType}`]) !== null && _c !== void 0 ? _c : [];
            Promise.all(currentSteps.map(this.getImage)).then((currentImages) => {
                this.svgSteps = currentImages;
            });
        }
    }
    getLink(media) {
        let kind;
        switch (media) {
            case 'audio':
                kind = 'microphone';
                break;
            case 'video':
                kind = 'camera';
                break;
            default:
                kind = 'screenshare';
                break;
        }
        const GOOGLE_SEARCH_BASE = 'https://www.google.com/search?q=';
        let query = `Allow+${kind}+access`;
        if (this.device != null) {
            const { browserName, isMobile } = this.device;
            query += '+' + browserName;
            if (isMobile) {
                query += '+mobile';
            }
        }
        return GOOGLE_SEARCH_BASE + query;
    }
    isDeniedBySystem() {
        var _a;
        const permissionsMessage = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.mediaPermissions;
        if (permissionsMessage == null)
            return false;
        if (permissionsMessage[this.mediaType] === 'SYSTEM_DENIED') {
            return true;
        }
        return false;
    }
    getTitle() {
        const isDeniedBySystem = this.isDeniedBySystem();
        if (isDeniedBySystem) {
            return this.t(`perm_sys_denied.${this.mediaType}`);
        }
        return this.t(`perm_denied.${this.mediaType}`);
    }
    get mediaType() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.states) === null || _a === void 0 ? void 0 : _a.activePermissionsMessage) === null || _b === void 0 ? void 0 : _b.kind) !== null && _c !== void 0 ? _c : 'audio';
    }
    getMessage() {
        var _a;
        const { browserName, osName } = this.meeting.self.device;
        const isDeniedBySystem = this.isDeniedBySystem();
        const browser = (_a = browserName.toLowerCase()) !== null && _a !== void 0 ? _a : 'others';
        const os = osName !== null && osName !== void 0 ? osName : 'others';
        /* NOTE(ravindra-dyte):
          If in case a unknown browser or os doesn't have a translation,
          use the translation for `others`, instead of showing ugly error string,
          such as `perm_denied.video.yandex browser.message`.
        */
        if (isDeniedBySystem) {
            const systemErrorKey = `perm_sys_denied.${this.mediaType}.${os.toLowerCase()}.message`;
            return this.t(systemErrorKey) === systemErrorKey
                ? this.t(`perm_sys_denied.${this.mediaType}.others.message`)
                : this.t(systemErrorKey);
        }
        const browserErrorKey = `perm_denied.${this.mediaType}.${browser}.message`;
        return this.t(browserErrorKey) === browserErrorKey
            ? this.t(`perm_denied.${this.mediaType}.others.message`)
            : this.t(browserErrorKey);
    }
    render() {
        var _a, _b, _c;
        const isDeniedBySystem = this.isDeniedBySystem();
        if (this.svgSteps.length > 0) {
            if (this.stepsTimer)
                clearTimeout(this.stepsTimer);
            this.stepsTimer = setTimeout(this.nextStep, 2500);
        }
        const showMacDeepLink = isDeniedBySystem && this.meeting.self.device.osName == 'macOS';
        return (index$1.h(index$1.Host, { key: 'fd3113af80de08603477d44313c51386dc18af5e' }, index$1.h("h2", { key: '105d5ea31c336aa1cd436818328ccd782770c326' }, index$1.h("dyte-icon", { key: '459d39bf025a2a86a5dc007d1d37da478de9cbb2', class: "text-icon", icon: this.iconPack.warning }), this.getTitle()), this.svgSteps.length > 0 && (index$1.h("div", { key: 'd8795f8c99c3d3e2c7fc0e854d4a97df30501f7e', class: 'svg-container' }, this.svgSteps.map((e, index) => (index$1.h("p", { innerHTML: e, class: "svg-ins", key: this.currentStep, hidden: index !== this.currentStep }))))), index$1.h("div", { key: 'f3c61c410b2561a7554cf92335bd45095e026d60' }, this.getMessage()), !isDeniedBySystem && (index$1.h("a", { key: '44c3c2a12fbfd15aff428089a795b567c0948c0d', class: "need-help-link", href: this.getLink((_c = (_b = (_a = this.states) === null || _a === void 0 ? void 0 : _a.activePermissionsMessage) === null || _b === void 0 ? void 0 : _b.kind) !== null && _c !== void 0 ? _c : 'audio'), target: "_blank", rel: "noreferrer external noreferrer noopener" }, index$1.h("dyte-icon", { key: '98ce0ba2b7a86af4c855cd3ce4025c5a40b5d52c', class: "text-icon", icon: this.iconPack.attach }), this.t('cta.help'))), index$1.h("div", { key: '3d1c026bee6a4c04bb0239c14af85d67475f66ce', class: "actions" }, index$1.h("dyte-button", { key: '3ef491db07fc2ec207ad87ef1c814bd132107bda', size: "lg", kind: "wide", variant: "secondary", onClick: this.continue }, this.t('cta.continue')), showMacDeepLink ? (index$1.h("dyte-button", { size: "lg", kind: "wide", onClick: this.openMacSystemSettings }, this.t('cta.system_settings'))) : (index$1.h("dyte-button", { size: "lg", kind: "wide", onClick: this.reload }, this.t('cta.reload')))), index$1.h("slot", { key: 'ed5ac76fdf888a80b20f495d2b9daa005b1fd692' })));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$9([
    index.SyncWithStore()
], DytePermissionsMessage.prototype, "meeting", void 0);
__decorate$9([
    index.SyncWithStore()
], DytePermissionsMessage.prototype, "t", void 0);
__decorate$9([
    index.SyncWithStore()
], DytePermissionsMessage.prototype, "iconPack", void 0);
__decorate$9([
    index.SyncWithStore()
], DytePermissionsMessage.prototype, "states", void 0);
DytePermissionsMessage.style = DytePermissionsMessageStyle0;

const dyteSettingsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;display:flex;overflow:hidden;border-radius:var(--dyte-border-radius-md, 8px);width:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}header{display:flex;align-items:center;justify-content:space-between;padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px)}.title{font-size:20px;line-height:1}.back-btn,.dismiss-btn{border-radius:var(--dyte-border-radius-sm, 4px);background-color:transparent;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.back-btn:hover,.dismiss-btn:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}aside{box-sizing:border-box;display:flex;min-width:var(--dyte-space-56, 224px);flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));padding-left:var(--dyte-space-2, 8px)}aside button{margin-top:var(--dyte-space-4, 16px);box-sizing:border-box;display:flex;width:100%;align-items:center;justify-content:space-between;border-top-left-radius:var(--dyte-border-radius-sm, 4px);border-bottom-left-radius:var(--dyte-border-radius-sm, 4px);padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);background-color:transparent;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));cursor:default;font-size:16px;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);border-width:var(--dyte-border-width-none, 0);border-style:none;outline:2px solid transparent;outline-offset:2px}aside button .right{display:flex;align-items:center}aside button .right dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}aside button .right dyte-icon:last-child{margin-left:var(--dyte-space-4, 16px)}aside button[type='button']{cursor:pointer;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}aside button[type='button']:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}aside button[type='button']{border-right:var(--dyte-border-width-md, 2px) solid transparent}aside button.active{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-border-opacity));background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}aside button.active:hover{background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}dyte-icon.poor{--tw-text-opacity:1;color:rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-text-opacity))}dyte-icon.poorest{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}dyte-icon.good{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}main{display:flex;flex:1 1 0%;align-items:center;justify-content:center;padding-left:var(--dyte-space-6, 24px);padding-right:var(--dyte-space-6, 24px);box-sizing:border-box;width:100%;max-width:calc(100% - var(--dyte-space-56, 224px))}.dismiss-btn{position:absolute;top:var(--dyte-space-3, 12px);right:var(--dyte-space-3, 12px);height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}:host([size='sm']) aside{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}:host([size='sm']) .dismiss-btn{top:var(--dyte-space-5, 20px);right:var(--dyte-space-4, 16px)}:host([size='sm']) aside{width:100%;padding-left:var(--dyte-space-0, 0px)}:host([size='sm']) aside button{border-radius:var(--dyte-border-radius-none, 0)}:host([size='sm']) aside button.active{border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent}:host([size='sm']) aside button.active:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}:host([size='sm']) aside.hide{display:none}:host([size='sm']) main{display:none;max-width:100%;overflow-y:auto;padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px)}:host([size='sm']) main header{justify-content:center}:host([size='sm']) main header dyte-button{position:absolute;left:var(--dyte-space-4, 16px)}:host([size='sm']) main.active{display:block}";
const DyteSettingsStyle0 = dyteSettingsCss;

var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSettings = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.keyPressListener = (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        };
        this.stageStatusListener = () => {
            this.canProduceVideo = this.meeting.self.permissions.canProduceVideo === 'ALLOWED';
        };
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.activeTab = 'connection';
        this.isMobileMainVisible = false;
        this.networkStatus = 'good';
        this.canProduceVideo = false;
    }
    connectedCallback() {
        document.addEventListener('keydown', this.keyPressListener);
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a;
        // NOTE(ishita1805): hidden because preview was removed from self.
        // this.meeting?.self.disablePreview();
        this.keyPressListener && document.removeEventListener('keydown', this.keyPressListener);
        this.poorConnectionListener &&
            ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta.removeListener('poorConnection', this.poorConnectionListener));
        this.meeting.stage.removeListener('stageStatusUpdate', this.stageStatusListener);
    }
    meetingChanged(meeting) {
        if (meeting != null) {
            this.canProduceVideo = this.meeting.self.permissions.canProduceVideo === 'ALLOWED';
            if (!this.canProduceVideo) {
                this.activeTab = 'audio';
            }
            else {
                this.activeTab = 'video';
            }
            this.poorConnectionListener = ({ score }) => {
                if (score < 7) {
                    this.networkStatus = 'poor';
                }
                else if (score < 4) {
                    this.networkStatus = 'poorest';
                }
                setTimeout(() => {
                    // reset after 5 seconds
                    this.networkStatus = 'good';
                }, 5000);
            };
            meeting.meta.addListener('poorConnection', this.poorConnectionListener);
            meeting.stage.addListener('stageStatusUpdate', this.stageStatusListener);
        }
    }
    changeTab(tab) {
        this.activeTab = tab;
        if (this.size === 'sm') {
            if (!this.isMobileMainVisible) {
                this.isMobileMainVisible = true;
            }
        }
    }
    close() {
        this.stateUpdate.emit({ activeSettings: false });
    }
    render() {
        if (this.meeting == null)
            return null;
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            iconPack: this.iconPack,
            t: this.t,
        };
        return (index$1.h(index$1.Host, null, index$1.h("aside", { class: { hide: this.isMobileMainVisible }, part: "menu" }, index$1.h("header", null, index$1.h("h2", null, this.t('settings'))), index$1.h("button", { type: "button", class: { active: this.activeTab === 'audio' }, onClick: () => this.changeTab('audio') }, this.t('audio'), index$1.h("div", { class: "right" }, index$1.h("dyte-icon", { icon: this.iconPack.mic_on }), this.size === 'sm' && index$1.h("dyte-icon", { icon: this.iconPack.chevron_right }))), this.canProduceVideo && (index$1.h("button", { type: "button", class: { active: this.activeTab === 'video' }, onClick: () => this.changeTab('video') }, this.t('video'), index$1.h("div", { class: "right" }, index$1.h("dyte-icon", { icon: this.iconPack.video_on }), this.size === 'sm' && index$1.h("dyte-icon", { icon: this.iconPack.chevron_right })))), index$1.h("button", { type: "none", title: `Your network condition is ${this.networkStatus}` }, this.t('connection'), index$1.h("div", { class: "right" }, index$1.h("dyte-icon", { icon: this.iconPack.wifi, class: this.networkStatus })))), index$1.h("main", { class: { active: this.isMobileMainVisible, scrollbar: true }, part: "main-content" }, this.size === 'sm' && (index$1.h("header", null, index$1.h("dyte-button", { kind: "icon", class: "back-btn", onClick: () => (this.isMobileMainVisible = false) }, index$1.h("dyte-icon", { icon: this.iconPack.chevron_left })), index$1.h("h2", null, this.t(this.activeTab === 'audio' ? 'audio' : 'video')))), this.activeTab === 'audio' && index$1.h("dyte-settings-audio", Object.assign({}, defaults)), this.activeTab === 'video' && index$1.h("dyte-settings-video", Object.assign({}, defaults)))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$8([
    index.SyncWithStore()
], DyteSettings.prototype, "meeting", void 0);
__decorate$8([
    index.SyncWithStore()
], DyteSettings.prototype, "states", void 0);
__decorate$8([
    index.SyncWithStore()
], DyteSettings.prototype, "size", void 0);
__decorate$8([
    index.SyncWithStore()
], DyteSettings.prototype, "iconPack", void 0);
__decorate$8([
    index.SyncWithStore()
], DyteSettings.prototype, "t", void 0);
DyteSettings.style = DyteSettingsStyle0;

const dyteSettingsAudioCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;width:100%;flex-direction:column}audio{visibility:hidden}.group{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px)}.group>*{margin-bottom:var(--dyte-space-2, 8px)}.group>*:last-child{margin-bottom:var(--dyte-space-0, 0px)}.group select{flex:1 1 0%}dyte-audio-visualizer{flex-shrink:0}dyte-button{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}dyte-button dyte-icon{margin-right:var(--dyte-space-2, 8px)}";
const DyteSettingsAudioStyle0 = dyteSettingsAudioCss;

var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSettingsAudio = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
    }
    render() {
        var _a, _b;
        if (this.meeting == null)
            return null;
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            size: this.size,
            iconPack: this.iconPack,
            t: this.t,
        };
        const states = this.states;
        const initialNotificationSoundsPreference = ((_a = states === null || states === void 0 ? void 0 : states.prefs) === null || _a === void 0 ? void 0 : _a.muteNotificationSounds) === true ||
            uiStore.getPreference('mute-notification-sounds') === 'true';
        return (index$1.h(index$1.Host, null, index$1.h("dyte-microphone-selector", Object.assign({}, defaults), index$1.h("dyte-audio-visualizer", { participant: (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self, iconPack: this.iconPack, t: this.t, slot: "indicator" })), index$1.h("dyte-speaker-selector", Object.assign({}, defaults)), index$1.h("div", { class: "group", part: "notification-toggle" }, index$1.h("div", { class: "row" }, index$1.h("label", { htmlFor: "notification-toggle" }, this.t('settings.notification_sound')), index$1.h("dyte-switch", { id: "notification-toggle", checked: !initialNotificationSoundsPreference, onDyteChange: (e) => {
                const { checked } = e.target;
                const muteNotificationSounds = !checked;
                this.stateUpdate.emit({ prefs: { muteNotificationSounds } });
                uiStore.setPreference('mute-notification-sounds', muteNotificationSounds);
            }, iconPack: this.iconPack, t: this.t })))));
    }
};
__decorate$7([
    index.SyncWithStore()
], DyteSettingsAudio.prototype, "meeting", void 0);
__decorate$7([
    index.SyncWithStore()
], DyteSettingsAudio.prototype, "states", void 0);
__decorate$7([
    index.SyncWithStore()
], DyteSettingsAudio.prototype, "size", void 0);
__decorate$7([
    index.SyncWithStore()
], DyteSettingsAudio.prototype, "iconPack", void 0);
__decorate$7([
    index.SyncWithStore()
], DyteSettingsAudio.prototype, "t", void 0);
DyteSettingsAudio.style = DyteSettingsAudioStyle0;

const dyteSettingsVideoCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.dyte-select{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.dyte-select:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dyte-select{display:block;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:var(--dyte-space-3, 12px);font-size:16px;--icon-size:var(--dyte-select-chevron-size, var(--dyte-space-6, 24px));--icon-right-position:var(--dyte-select-chevron-right-position, var(--dyte-space-2, 8px));background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");background-position:right var(--icon-right-position) center;background-repeat:no-repeat;background-size:var(--icon-size) var(--icon-size);padding-right:calc(var(--icon-right-position) * 5)}:host{display:flex;width:100%;flex-direction:column}.dyte-select{width:100%;text-overflow:ellipsis}dyte-participant-tile{margin-left:auto;margin-right:auto;margin-bottom:var(--dyte-space-4, 16px);max-width:100%}#icon{padding-bottom:var(--dyte-space-1, 4px)}.apply-button{height:var(--dyte-space-10, 40px)}label{-webkit-user-select:none;-moz-user-select:none;user-select:none;font-size:14px}.group{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px)}.group>*{margin-bottom:var(--dyte-space-2, 8px)}.group>*:last-child{margin-bottom:var(--dyte-space-0, 0px)}.group select{flex:1 1 0%}.row{display:flex;align-items:center;justify-content:space-between;gap:var(--dyte-space-3, 12px)}.section{display:flex;flex-direction:column}@media only screen and (max-height: 480px) and (orientation: landscape){:host{flex-direction:row}:host([size='sm']){flex-direction:row}.section[part='tile-preview']{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);max-height:90%;max-width:40%;flex-shrink:1}.section[part='video-settings']{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);flex-grow:1}}";
const DyteSettingsVideoStyle0 = dyteSettingsVideoCss;

var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSettingsVideo = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.onVideoUpdate = (videoState) => {
            this.videoEnabled = videoState.videoEnabled;
        };
    }
    componentDidLoad() {
        this.meetingChanged(this.meeting);
    }
    meetingChanged(meeting) {
        var _a;
        if (meeting == null)
            return;
        this.videoEnabled = meeting.self.videoEnabled;
        (_a = meeting.self) === null || _a === void 0 ? void 0 : _a.addListener('videoUpdate', this.onVideoUpdate);
    }
    disconnectedCallback() {
        var _a;
        (_a = this.meeting.self) === null || _a === void 0 ? void 0 : _a.removeListener('videoUpdate', this.onVideoUpdate);
    }
    render() {
        var _a, _b, _c;
        if (this.meeting == null)
            return null;
        const defaults = {
            meeting: this.meeting,
            states: this.states,
            size: this.size,
            iconPack: this.iconPack,
            t: this.t,
        };
        const states = this.states;
        const initialMirrorPreference = ((_a = states === null || states === void 0 ? void 0 : states.prefs) === null || _a === void 0 ? void 0 : _a.mirrorVideo) === true || uiStore.getPreference('mirror-video') === 'true';
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "section", part: "tile-preview" }, index$1.h("div", { class: "group", part: "tile-preview" }, this.videoEnabled === true ? (index$1.h("dyte-participant-tile", { meeting: this.meeting, participant: (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self, iconPack: this.iconPack, t: this.t, states: states, size: this.size, isPreview: true })) : (index$1.h("div", { class: "camera-off-helper" }, index$1.h("dyte-participant-tile", { meeting: this.meeting, participant: (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self, size: this.size }, index$1.h("div", null, index$1.h("dyte-icon", { id: "icon", icon: this.iconPack.video_off, tabIndex: -1, "aria-hidden": true }), index$1.h("div", null, this.t('settings.camera_off')))))))), index$1.h("dyte-camera-selector", Object.assign({}, defaults)), index$1.h("div", { class: "group", part: "mirror-toggle" }, index$1.h("div", { class: "row" }, index$1.h("label", { htmlFor: "mirror-toggle" }, this.t('settings.mirror_video')), index$1.h("dyte-switch", { checked: initialMirrorPreference, iconPack: this.iconPack, t: this.t, onDyteChange: (e) => {
                const { checked } = e.target;
                this.stateUpdate.emit({ prefs: { mirrorVideo: checked } });
                uiStore.setPreference('mirror-video', checked);
            } })))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$6([
    index.SyncWithStore()
], DyteSettingsVideo.prototype, "meeting", void 0);
__decorate$6([
    index.SyncWithStore()
], DyteSettingsVideo.prototype, "states", void 0);
__decorate$6([
    index.SyncWithStore()
], DyteSettingsVideo.prototype, "size", void 0);
__decorate$6([
    index.SyncWithStore()
], DyteSettingsVideo.prototype, "iconPack", void 0);
__decorate$6([
    index.SyncWithStore()
], DyteSettingsVideo.prototype, "t", void 0);
DyteSettingsVideo.style = DyteSettingsVideoStyle0;

const dyteSpeakerSelectorCss = ".dyte-select{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.dyte-select:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dyte-select{display:block;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:var(--dyte-space-3, 12px);font-size:16px;--icon-size:var(--dyte-select-chevron-size, var(--dyte-space-6, 24px));--icon-right-position:var(--dyte-select-chevron-right-position, var(--dyte-space-2, 8px));background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");background-position:right var(--icon-right-position) center;background-repeat:no-repeat;background-size:var(--icon-size) var(--icon-size);padding-right:calc(var(--icon-right-position) * 5);width:100%;max-width:100%;text-overflow:ellipsis}.inline .dyte-select{margin-top:var(--dyte-space-1, 4px);width:100%;padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-8, 32px);font-size:14px}.row{display:flex;width:100%;align-items:center;justify-content:space-between;gap:var(--dyte-space-3, 12px)}.group{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px)}.group>*{margin-bottom:var(--dyte-space-2, 8px)}.group>*:last-child{margin-bottom:var(--dyte-space-0, 0px)}.group select{flex:1 1 0%}.inline.group{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0\\.5, 2px)}.inline.group>*{margin-bottom:var(--dyte-space-0, 0px)}label{display:flex;-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center;gap:var(--dyte-space-1, 4px);font-size:14px}.inline .container{display:flex;align-items:center;justify-content:flex-start;gap:var(--dyte-space-2, 8px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}";
const DyteSpeakerSelectorStyle0 = dyteSpeakerSelectorCss;

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSpeakerSelector = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** variant */
        this.variant = 'full';
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.speakerDevices = [];
        this.currentDevices = { speaker: undefined };
        this.deviceListUpdateListener = async () => {
            const devices = await this.meeting.self.getSpeakerDevices();
            this.speakerDevices = devices;
        };
        this.deviceUpdateListener = ({ device }) => {
            if (device.kind === 'audiooutput') {
                this.currentDevices = {
                    speaker: device,
                };
            }
        };
        this.mediaPermissionUpdate = async ({ kind, message }) => {
            if (!this.meeting)
                return;
            if (kind === 'audio' && message === 'ACCEPTED') {
                this.speakerDevices = await this.meeting.self.getSpeakerDevices();
            }
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a, _b, _c;
        (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.removeListener('deviceListUpdate', this.deviceListUpdateListener);
        (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self.removeListener('deviceUpdate', this.deviceUpdateListener);
        (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdate);
    }
    meetingChanged(meeting) {
        if (meeting == null)
            return;
        index$1.writeTask(async () => {
            var _a, _b;
            const { self } = meeting;
            const speakerDevices = await meeting.self.getSpeakerDevices();
            const currentSpeakerDevice = (_a = meeting.self.getCurrentDevices()) === null || _a === void 0 ? void 0 : _a.speaker;
            this.currentDevices = {
                speaker: currentSpeakerDevice,
            };
            self.addListener('deviceListUpdate', this.deviceListUpdateListener);
            self.addListener('deviceUpdate', this.deviceUpdateListener);
            self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdate);
            if (currentSpeakerDevice != undefined) {
                this.speakerDevices = [
                    (_b = speakerDevices.find((device) => device.deviceId === currentSpeakerDevice.deviceId)) !== null && _b !== void 0 ? _b : currentSpeakerDevice,
                    ...speakerDevices.filter((device) => device.deviceId !== currentSpeakerDevice.deviceId),
                ];
            }
            else {
                this.speakerDevices = speakerDevices;
            }
        });
    }
    testAudio() {
        var _a;
        (_a = this.testAudioEl) === null || _a === void 0 ? void 0 : _a.play();
    }
    setDevice(deviceId) {
        var _a, _b;
        if (uiStore.disableSettingSinkId(this.meeting))
            return;
        const device = this.speakerDevices.find((d) => d.deviceId === deviceId);
        this.currentDevices = {
            speaker: device,
        };
        if (device != null) {
            (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.setDevice(device);
            (_b = this.testAudioEl) === null || _b === void 0 ? void 0 : _b.setSinkId(device.deviceId);
        }
    }
    render() {
        if (this.meeting == null)
            return null;
        let unnamedSpeakerCount = 0;
        return (index$1.h(index$1.Host, null, index$1.h("audio", { preload: "auto", src: "https://assets.dyte.io/ui-kit/speaker-test.mp3", ref: (el) => (this.testAudioEl = el) }), index$1.h("div", { class: 'group ' + this.variant, part: "speaker-selection" }, this.speakerDevices.length > 0 && !uiStore.disableSettingSinkId(this.meeting) && (index$1.h("div", { class: "container" }, index$1.h("label", null, this.variant !== 'inline' && this.t('settings.speaker_output'), index$1.h("dyte-icon", { icon: this.iconPack.speaker, size: "sm" })), index$1.h("div", { class: "row" }, index$1.h("select", { class: "dyte-select", onChange: (e) => this.setDevice(e.target.value) }, this.speakerDevices.map(({ deviceId, label }) => {
            var _a;
            return (index$1.h("option", { value: deviceId, selected: ((_a = this.currentDevices.speaker) === null || _a === void 0 ? void 0 : _a.deviceId) === deviceId }, label || `Speaker ${++unnamedSpeakerCount}`));
        }))))), this.variant === 'full' && (index$1.h("dyte-button", { variant: "secondary", onClick: () => this.testAudio() }, index$1.h("dyte-icon", { icon: this.iconPack.speaker, slot: "start" }), this.t('test'))))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate$5([
    index.SyncWithStore()
], DyteSpeakerSelector.prototype, "meeting", void 0);
__decorate$5([
    index.SyncWithStore()
], DyteSpeakerSelector.prototype, "states", void 0);
__decorate$5([
    index.SyncWithStore()
], DyteSpeakerSelector.prototype, "size", void 0);
__decorate$5([
    index.SyncWithStore()
], DyteSpeakerSelector.prototype, "iconPack", void 0);
__decorate$5([
    index.SyncWithStore()
], DyteSpeakerSelector.prototype, "t", void 0);
DyteSpeakerSelector.style = DyteSpeakerSelectorStyle0;

const dyteSpinnerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{box-sizing:border-box;display:block;height:var(--dyte-space-10, 40px);width:var(--dyte-space-10, 40px);--dyte-spinner-color:currentColor}.spinner{height:100%;width:100%}@keyframes spin{to{transform:rotate(360deg)}}.spinner{animation:spin 1s linear infinite;border-radius:9999px;background-color:transparent;animation-duration:1.3s}:host([size='md']){height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}:host([size='sm']){height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}";
const DyteSpinnerStyle0 = dyteSpinnerCss;

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSpinner = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Size */
        this.size = 'md';
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'f8333e747d1132d7bc402861ad4977d4c48ce101' }, index$1.h("dyte-icon", { key: '5ba9127b0a2096f7315e1b349a2c1499f7bcf20c', class: "spinner", icon: this.iconPack.spinner })));
    }
};
__decorate$4([
    index.SyncWithStore()
], DyteSpinner.prototype, "iconPack", void 0);
__decorate$4([
    index.SyncWithStore()
], DyteSpinner.prototype, "size", void 0);
DyteSpinner.style = DyteSpinnerStyle0;

const dyteSwitchCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{box-sizing:border-box;display:inline-flex;height:var(--dyte-space-6, 24px);width:var(--dyte-space-10, 40px);align-items:center;padding:var(--dyte-space-1, 4px);border-radius:9999px;background-color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52));cursor:pointer}.switch{box-sizing:border-box;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);background-color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));border-radius:9999px;transition-property:var(--dyte-transition-property, all);transition-duration:200ms}:host(.checked){--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}:host(.checked) .switch{transform:translateX(100%)}:host([readonly]),:host([disabled]){cursor:not-allowed;opacity:0.6}";
const DyteSwitchStyle0 = dyteSwitchCss;

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSwitch = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.dyteChange = index$1.createEvent(this, "dyteChange", 4);
        /** Whether the switch is enabled/checked */
        this.checked = false;
        /** Whether switch is readonly */
        this.readonly = false;
        /** Whether switch is readonly */
        this.disabled = false;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.onClick = () => {
            if (!this.readonly && !this.disabled) {
                this.checked = !this.checked;
            }
        };
        this.onKeyPress = (e) => {
            if (this.readonly)
                return;
            switch (e.key) {
                // Enter or Space
                case 'Enter':
                case ' ':
                    this.checked = !this.checked;
                    break;
            }
        };
    }
    connectedCallback() {
        this.checkedChange(this.checked);
    }
    checkedChange(checked) {
        this.checked = checked;
        this.dyteChange.emit(checked);
    }
    render() {
        return (index$1.h(index$1.Host, { key: '873702f9dfe5cff8482944e50c3d18cdbcc83185', role: "switch", tabIndex: this.disabled && 0, "aria-readonly": this.readonly, "aria-checked": this.checked, "aria-disabled": this.disabled, class: { checked: this.checked }, onClick: this.onClick, onKeyPress: this.onKeyPress }, index$1.h("div", { key: '01d727f8cbe301d7a1134b522dabd0d9a202923f', class: "switch", part: "switch" })));
    }
    static get watchers() { return {
        "checked": ["checkedChange"]
    }; }
};
__decorate$3([
    index.SyncWithStore()
], DyteSwitch.prototype, "iconPack", void 0);
__decorate$3([
    index.SyncWithStore()
], DyteSwitch.prototype, "t", void 0);
DyteSwitch.style = DyteSwitchStyle0;

const dyteTextComposerViewCss = ".chat-input {\n  position: relative;\n  z-index: 10;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  border-top-left-radius: var(--dyte-border-radius-md, 8px);\n  border-top-right-radius: var(--dyte-border-radius-md, 8px)\n}\n\n  .chat-input textarea {\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  box-sizing: border-box;\n  padding: var(--dyte-space-3, 12px);\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255))\n}\n\n  .chat-input textarea::-moz-placeholder {\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255))\n}\n\n  .chat-input textarea::placeholder {\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255))\n}\n\n  .chat-input textarea {\n  font-family: var(--dyte-font-family, sans-serif);\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  resize: none;\n  overflow-y: auto;\n  border-width: var(--dyte-border-width-none, 0);\n  border-style: none;\n  min-height: 60px;\n  font-size: 14px\n}\n\n@container chatcontainer (height < 360px) {\n  textarea {\n    height: 30px !important;\n    min-height: 30px !important\n  }\n}\n\n.text-error {\n  left: var(--dyte-space-0, 0px);\n  z-index: 10;\n  margin-top: var(--dyte-space-1, 4px);\n  margin-left: var(--dyte-space-1, 4px);\n  display: flex;\n  width: -moz-fit-content;\n  width: fit-content;\n  align-items: center;\n  justify-content: flex-start;\n  border-radius: var(--dyte-border-radius-sm, 4px);\n  --tw-border-opacity: 1;\n  border-color: rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));\n  padding-left: var(--dyte-space-2, 8px);\n  padding-right: var(--dyte-space-2, 8px);\n  font-size: 12px;\n  font-weight: 600;\n  --tw-text-opacity: 1;\n  color: rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-text-opacity));\n  border: 1px solid\n}\n\n#warning-indicator {\n  margin-right: var(--dyte-space-1, 4px);\n  height: var(--dyte-space-3, 12px);\n  width: var(--dyte-space-3, 12px)\n}\n\n.text-error.breached {\n  --tw-border-opacity: 1;\n  border-color: rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-border-opacity));\n  --tw-text-opacity: 1;\n  color: rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))\n}";
const DyteTextComposerViewStyle0 = dyteTextComposerViewCss;

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteTextComposerView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.onTextChange = index$1.createEvent(this, "textChange", 7);
        /** Disable the text input (default = false) */
        this.disabled = false;
        /** Boolean to indicate if rate limit is breached */
        this.rateLimitBreached = false;
        /** Keydown event handler function */
        this.keyDownHandler = () => { };
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.maxLengthBreached = 0;
        this.onInputHandler = () => {
            const text = this.$textArea.value.trim();
            this.maybeResize(text);
            this.checkLength(text);
            this.onTextChange.emit(text);
        };
        this.maybeResize = (text) => {
            const newLines = [...text.matchAll(/\n/g)].length;
            this.$textArea.style.height = `${Math.min(200, 60 + 20 * newLines)}px`;
        };
    }
    componentDidLoad() {
        if (this.maxLength) {
            this.$textArea.maxLength = this.maxLength;
        }
        const text = this.$textArea.value.trim();
        if (text !== '') {
            this.maybeResize(text);
        }
        this.$textArea.focus();
    }
    /** Sets value of the text input */
    async setText(text, focus = false) {
        this.$textArea.value = text;
        this.maybeResize(text);
        if (focus) {
            this.$textArea.focus();
        }
        this.checkLength(text);
        this.onTextChange.emit(text);
    }
    checkLength(text) {
        // unicode code length
        const textLen = text.length;
        if (textLen + 10 >= this.maxLength) {
            this.maxLengthBreached = text.length;
        }
        else if (textLen + 10 < this.maxLength && this.maxLengthBreached > 0) {
            this.maxLengthBreached = 0;
        }
    }
    render() {
        return (index$1.h("div", { key: '61ed661cf0660b1fc1b4a7efb76ade09d536145d', class: "chat-input", part: "chat-input-container" }, this.maxLengthBreached > 0 && (index$1.h("div", { key: '97aecab3860485a146fe4725ebe05bfb010baefa', class: 'text-error ' + (this.maxLengthBreached === this.maxLength ? 'breached' : '') }, index$1.h("dyte-icon", { key: 'daebcf9e4728ea6a9efe79f0b1a781a863bd465d', id: "warning-indicator", icon: this.iconPack.warning, part: "warning-indicator" }), ' ', this.maxLengthBreached, " / ", this.maxLength, " ", this.t('chat.max_limit_warning'))), this.rateLimitBreached && (index$1.h("div", { key: '92f309d491682582352bdc48b73f06fa9ab49bde', class: 'text-error breached' }, index$1.h("dyte-icon", { key: '7ff7d2636801892348061ea60473dd846f0d2b1d', id: "warning-indicator", icon: this.iconPack.warning, part: "warning-indicator" }), ' ', this.t('chat.rate_limit_error'))), index$1.h("textarea", { key: '386477d46285c144ec055cf48bf59b5dbff3989c', ref: (el) => (this.$textArea = el), placeholder: this.placeholder, disabled: this.disabled, onInput: this.onInputHandler, onKeyDown: this.keyDownHandler, part: "chat-input", value: this.value })));
    }
};
__decorate$2([
    index.SyncWithStore()
], DyteTextComposerView.prototype, "iconPack", void 0);
__decorate$2([
    index.SyncWithStore()
], DyteTextComposerView.prototype, "t", void 0);
DyteTextComposerView.style = DyteTextComposerViewStyle0;

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteTextMessage = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Date object of now, to calculate distance between dates */
        this.now = new Date();
        /** Whether the message is continued by same user */
        this.isContinued = false;
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** show message in bubble */
        this.showBubble = false;
    }
    render() {
        return (index$1.h(index$1.Host, { key: 'e082f0075f22f97890614d9b15899a0ed09ade61' }, !this.isContinued && (index$1.h(ChatHead.ChatHead, { key: '4b825acf9ef68956ff3ce22227de8b411adb34a1', name: this.message.displayName, time: this.message.time, now: this.now })), index$1.h("div", { key: 'fdeaa70cd0f2b5bc0576e81269af073724081c5f', class: {
                body: true,
                bubble: this.showBubble,
            }, part: "body" }, index$1.h("div", { key: '6ecfefe0b50f26759757e88024e050551d32f370', class: { text: true, emoji: string.hasOnlyEmojis(this.message.message) } }, index$1.h(TextMessage.TextMessageView, { key: '8272d97cf01cd17426607194a9c39c6152db6e2c', message: this.message.message })))));
    }
};
__decorate$1([
    index.SyncWithStore()
], DyteTextMessage.prototype, "iconPack", void 0);
__decorate$1([
    index.SyncWithStore()
], DyteTextMessage.prototype, "t", void 0);

const dyteTextMessageViewCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.text{word-break:break-word;display:block;overflow-wrap:break-word;line-height:1.375}.text.emoji{font-size:24px}";
const DyteTextMessageViewStyle0 = dyteTextMessageViewCss;

const DyteTextMessageView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Renders text as markdown (default = true) */
        this.isMarkdown = false;
    }
    render() {
        return (index$1.h("p", { key: '0bfd2379f422f2ec89f13714fd40ca29b73bed0d', class: { text: true, emoji: string.hasOnlyEmojis(this.text) } }, this.isMarkdown ? index$1.h("dyte-markdown-view", { text: this.text }) : this.text));
    }
};
DyteTextMessageView.style = DyteTextMessageViewStyle0;

const dyteTooltipCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{--background-color:var(--dyte-tooltip-background-color, rgb(var(--dyte-colors-background-600, 60 60 60)));--color:var(--dyte-tooltip-color, rgb(var(--dyte-colors-text-1000, 255 255 255)));display:inline-flex}#trigger{display:block;width:100%;flex:1 1 0%}.tooltip{max-width:var(--dyte-space-64, 256px);position:fixed;z-index:20;display:none;width:-moz-max-content;width:max-content;padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-shadow:0 1px 2px 0 rgb(0 0 0 / 0.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);font-size:12px}.tooltip,#arrow{position:absolute;background-color:var(--background-color);color:var(--color)}#arrow{position:absolute;height:var(--dyte-space-2, 8px);width:var(--dyte-space-2, 8px);transform:rotate(45deg)}:host([variant='primary']){--background-color:rgb(var(--dyte-colors-brand-500, 33 96 253));--color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}:host([kind='block']){display:block}";
const DyteTooltipStyle0 = dyteTooltipCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMenu = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.dyteOpenChange = index$1.createEvent(this, "dyteOpenChange", 7);
        /** Tooltip label */
        this.label = '';
        /** Tooltip variant */
        this.variant = 'secondary';
        /** Disabled */
        this.disabled = false;
        /** Open */
        this.open = false;
        /** Tooltip kind */
        this.kind = 'inline';
        /** Placement of menu */
        this.placement = 'top';
        /** Delay before showing the tooltip */
        this.delay = 0;
        this.isInFocus = false;
        this.showMenu = () => {
            if (this.disabled)
                return;
            this.isInFocus = true;
            setTimeout(() => {
                if (this.isInFocus) {
                    this.tooltipEl.style.display = 'block';
                    this.update();
                    this.dyteOpenChange.emit(true);
                    if (this.size === 'sm') {
                        setTimeout(() => {
                            if (this.isInFocus) {
                                this.hideMenu();
                            }
                        }, 1000);
                    }
                }
            }, this.delay);
        };
        this.hideMenu = () => {
            if (this.open || this.disabled)
                return;
            this.isInFocus = false;
            this.tooltipEl.style.display = 'none';
            this.dyteOpenChange.emit(false);
        };
    }
    componentDidLoad() {
        this.triggerEl.addEventListener('focusin', this.showMenu);
        this.triggerEl.addEventListener('mouseenter', this.showMenu);
        this.triggerEl.addEventListener('focusout', this.hideMenu);
        this.triggerEl.addEventListener('mouseleave', this.hideMenu);
        index$1.writeTask(() => {
            this.openChanged(this.open);
        });
    }
    disconnectedCallback() {
        if (!this.triggerEl)
            return;
        this.triggerEl.removeEventListener('focusin', this.showMenu);
        this.triggerEl.removeEventListener('mouseenter', this.showMenu);
        this.triggerEl.removeEventListener('focusout', this.hideMenu);
        this.triggerEl.removeEventListener('mouseleave', this.hideMenu);
        this.triggerEl = undefined;
    }
    openChanged(open) {
        if (open) {
            this.showMenu();
        }
        else {
            this.hideMenu();
        }
    }
    update() {
        floatingUi_dom_esm.computePosition(this.triggerEl, this.tooltipEl, {
            placement: this.placement,
            middleware: [floatingUi_dom_esm.offset(8), floatingUi_dom_esm.flip(), floatingUi_dom_esm.shift({ padding: 5 }), floatingUi_dom_esm.arrow({ element: this.arrowEl })],
        }).then(({ x, y, placement, middlewareData }) => {
            Object.assign(this.tooltipEl.style, {
                left: `${x}px`,
                top: `${y}px`,
            });
            const { x: arrowX, y: arrowY } = middlewareData.arrow;
            const staticSide = {
                top: 'bottom',
                right: 'left',
                bottom: 'top',
                left: 'right',
            }[placement.split('-')[0]];
            Object.assign(this.arrowEl.style, {
                left: arrowX != null ? `${arrowX}px` : '',
                top: arrowY != null ? `${arrowY}px` : '',
                right: '',
                bottom: '',
                [staticSide]: '-4px',
            });
        });
    }
    render() {
        return (index$1.h(index$1.Host, { key: '408cc292b9ee81259eb1bb4b9df70eb2adf469a7' }, index$1.h("span", { key: '4fb7a6d6ebe5a15dfe2e016c6a8e83f6c1571463', part: "trigger", id: "trigger", ref: (el) => (this.triggerEl = el) }, index$1.h("slot", { key: '7cec3218611b38d3de272f80b21aaf2406d6ea46' })), index$1.h("div", { key: '0bcf3a675eb667b2604d9f69fc8cf5c125ef0c5c', part: "tooltip", class: "tooltip", id: "tooltip", role: "tooltip", ref: (el) => (this.tooltipEl = el) }, index$1.h("div", { key: '51965a748edbb9ec286fc3f89a34e93e30ec958e', id: "arrow", ref: (el) => (this.arrowEl = el), part: "arrow" }), this.label, index$1.h("slot", { key: '6149d55b7fa3b346161d02d793717f5f839fafff', name: "tooltip" }))));
    }
    static get watchers() { return {
        "open": ["openChanged"]
    }; }
};
__decorate([
    index.SyncWithStore()
], DyteMenu.prototype, "size", void 0);
DyteMenu.style = DyteTooltipStyle0;

exports.dyte_audio_visualizer = DyteAudioVisualizer;
exports.dyte_avatar = DyteAvatar;
exports.dyte_breakout_room_manager = DyteBreakoutRoomManager;
exports.dyte_breakout_room_participants = DyteBreakoutRoomParticipants;
exports.dyte_breakout_rooms_manager = DyteBreakoutRoomsManager;
exports.dyte_broadcast_message_modal = DyteBroadcastMessageModal;
exports.dyte_button = DyteButton;
exports.dyte_camera_selector = DyteCameraSelector;
exports.dyte_channel_creator = DyteChannelCreator;
exports.dyte_channel_details = DyteChannelDetails;
exports.dyte_channel_header = DyteChannelHeader;
exports.dyte_channel_selector_view = DyteChannelSelectorView;
exports.dyte_chat = DyteChat;
exports.dyte_chat_composer_view = DyteChatComposerView;
exports.dyte_chat_message = DyteChatMessage;
exports.dyte_chat_messages_ui = DyteChatMessagesUi;
exports.dyte_chat_messages_ui_paginated = DyteChatMessagesUiPaginated;
exports.dyte_chat_search_results = DyteChatSearchResults;
exports.dyte_confirmation_modal = DyteConfirmationModal;
exports.dyte_counter = DyteCounter;
exports.dyte_debugger = DyteDebugger;
exports.dyte_debugger_audio = DyteDebuggerAudio;
exports.dyte_debugger_screenshare = DyteDebuggerScreenShare;
exports.dyte_debugger_system = DyteDebuggerSystem;
exports.dyte_debugger_video = DyteDebuggerVideo;
exports.dyte_dialog = DyteDialog;
exports.dyte_dialog_manager = DyteDialogManager;
exports.dyte_draft_attachment_view = DyteDraftAttachmentView;
exports.dyte_emoji_picker = DyteEmojiPicker;
exports.dyte_emoji_picker_button = DyteEmojiPickerButton;
exports.dyte_file_message = DyteFileMessage;
exports.dyte_file_message_view = DyteFileMessageView;
exports.dyte_file_picker_button = DyteFilePickerButton;
exports.dyte_icon = DyteIcon;
exports.dyte_image_message = DyteImageMessage;
exports.dyte_image_message_view = DyteImageMessageView;
exports.dyte_image_viewer = DyteImageViewer;
exports.dyte_join_stage = DyteJoinStage;
exports.dyte_leave_meeting = DyteLeaveMeeting;
exports.dyte_logo = DyteLogo;
exports.dyte_markdown_view = DyteMarkdownView;
exports.dyte_meeting = DyteMeeting;
exports.dyte_menu = DyteMenu$1;
exports.dyte_menu_item = DyteMenuItem;
exports.dyte_menu_list = DyteMenuList;
exports.dyte_message_view = DyteMessageView;
exports.dyte_microphone_selector = DyteMicrophoneSelector;
exports.dyte_mute_all_confirmation = DyteMuteAllConfirmation;
exports.dyte_notification = DyteNotification;
exports.dyte_notifications = DyteNotifications;
exports.dyte_overlay_modal = DyteOverlayModal;
exports.dyte_paginated_list = DytePaginatedList;
exports.dyte_participant_tile = DyteParticipantTile;
exports.dyte_permissions_message = DytePermissionsMessage;
exports.dyte_settings = DyteSettings;
exports.dyte_settings_audio = DyteSettingsAudio;
exports.dyte_settings_video = DyteSettingsVideo;
exports.dyte_speaker_selector = DyteSpeakerSelector;
exports.dyte_spinner = DyteSpinner;
exports.dyte_switch = DyteSwitch;
exports.dyte_text_composer_view = DyteTextComposerView;
exports.dyte_text_message = DyteTextMessage;
exports.dyte_text_message_view = DyteTextMessageView;
exports.dyte_tooltip = DyteMenu;
