'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-1109742b.js');
const uiStore = require('./ui-store-c9fc6964.js');
const fullScreen = require('./full-screen-de3e9caf.js');
const index = require('./index-42dce5ce.js');

const dyteScreenshareViewCss = ":host {\n  line-height: initial;\n  font-family: var(--dyte-font-family, sans-serif);\n\n  font-feature-settings: normal;\n  font-variation-settings: normal;\n}\n\np {\n  margin: var(--dyte-space-0, 0px);\n  padding: var(--dyte-space-0, 0px);\n}\n\n\n:host {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  border-radius: var(--dyte-border-radius-lg, 12px);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-video-bg, 24 24 24) / var(--tw-bg-opacity));\n  container-type: inline-size;\n  container-name: screentile;\n}\n\n::slotted(dyte-name-tag) {\n  position: absolute;\n  left: var(--dyte-space-3, 12px);\n  bottom: var(--dyte-space-3, 12px);\n  opacity: 0.8;\n}\n\n#video-container {\n  position: absolute;\n  display: block;\n  height: 100%;\n  width: 100%;\n}\n\n#video-container .fit-in-container {\n  -o-object-fit: fill;\n     object-fit: fill;\n}\n\nvideo {\n  height: 100%;\n  width: 100%;\n  -o-object-fit: contain;\n     object-fit: contain;\n}\n\n:host([variant='gradient']) ::slotted(dyte-audio-visualizer) {\n  position: absolute;\n  top: var(--dyte-space-2, 8px);\n  right: var(--dyte-space-2, 8px);\n  border-radius: 9999px;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));\n  padding: var(--dyte-space-2, 8px);\n}\n\n:host([variant='gradient']) ::slotted(dyte-name-tag) {\n  bottom: var(--dyte-space-0, 0px);\n  left: var(--dyte-space-0, 0px);\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  background-color: transparent;\n  background-image: linear-gradient(to top, var(--tw-gradient-stops));\n  --tw-gradient-from: rgb(var(--dyte-colors-background-1000, 8 8 8));\n  --tw-gradient-to: rgba(var(--dyte-colors-background-1000, 8 8 8) / 0);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n  --tw-gradient-to: transparent;\n}\n\n:host([size='sm'][variant='gradient']) ::slotted(dyte-audio-visualizer) {\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n}\n\nvideo.visible {\n  animation: video-fadein 0.4s ease;\n}\n\n#controls {\n  display: none;\n  position: absolute;\n  top: var(--dyte-space-3, 12px);\n  right: var(--dyte-space-3, 12px);\n  align-items: center;\n  justify-content: flex-end;\n  gap: var(--dyte-space-2, 8px);\n}\n\n:host(:hover) #controls, \n:host(:active) #controls, \n:host(:focus-visible) #controls {\n  display: flex;\n}\n\n#full-screen-btn {\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));\n}\n\n/** For self view */\n\nh3 {\n  margin-top: var(--dyte-space-10, 40px);\n  margin-bottom: var(--dyte-space-6, 24px);\n  text-align: center;\n  font-size: 20px;\n  font-weight: 500;\n}\n\n:host([size='sm']) h3 {\n  font-size: 16px;\n}\n\n#self-message {\n  padding-left: var(--dyte-space-4, 16px);\n  padding-right: var(--dyte-space-4, 16px);\n}\n\n:host(.isSelf) #self-view {\n  flex: 1 1 0%;\n}\n\n:host(.isSelf) #video-container {\n  position: static;\n  aspect-ratio: auto;\n  height: auto;\n  width: 50%;\n  max-width: var(--dyte-space-96, 384px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  transition: 0.6s ease;\n}\n\n:host(.isSelf) #video-container.expand {\n  width: 60%;\n  max-width: 100%;\n}\n\n.actions {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: var(--dyte-space-2, 8px);\n}\n\n:host([size='sm'].isSelf) #video-container,\n:host([size='md'].isSelf) #video-container,\n:host([size='sm'].isSelf) #expand-btn,\n:host([size='md'].isSelf) #expand-btn {\n  /** Hide video, fullscreen buttons in sm and md breakpoints */\n  display: none;\n}\n\n/** Remote control */\n\np {\n  margin: var(--dyte-space-0, 0px);\n  padding: var(--dyte-space-0, 0px);\n}\n\n.remote-control {\n  z-index: 10;\n  height: 100%;\n  max-height: 100%;\n  flex: 0 1 auto;\n}\n\n#remote-control-self {\n  position: absolute;\n  top: var(--dyte-space-0, 0px);\n  left: 50%;\n  z-index: 10;\n  width: -moz-max-content;\n  width: max-content;\n  max-width: 100%;\n  box-sizing: border-box;\n  display: flex;\n  height: var(--dyte-space-8, 32px);\n  align-items: center;\n  overflow: hidden;\n  border-radius: var(--dyte-border-radius-sm, 4px);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-bg-opacity));\n  font-size: 12px;\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n  transform: translateX(-50%);\n}\n\n#remote-control-self p {\n  padding-left: var(--dyte-space-3, 12px);\n  padding-right: var(--dyte-space-3, 12px);\n  padding-top: var(--dyte-space-2, 8px);\n  padding-bottom: var(--dyte-space-2, 8px);\n}\n\n#remote-control-self dyte-button {\n  height: 100%;\n  border-radius: var(--dyte-border-radius-none, 0);\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-bg-opacity));\n  font-size: 12px;\n}\n\n:host([size='sm']) #remote-control-self {\n  height: auto;\n  flex-direction: column;\n}\n\n:host([size='sm']) #remote-control-self dyte-button {\n  width: 100%;\n  padding-top: var(--dyte-space-1, 4px);\n  padding-bottom: var(--dyte-space-1, 4px);\n}\n\n/** Name tag positions */\n\n:host([name-tag-position='bottom-right']) ::slotted(dyte-name-tag) {\n  left: auto;\n  right: var(--dyte-space-3, 12px);\n}\n\n:host([name-tag-position='bottom-center']) ::slotted(dyte-name-tag) {\n  left: auto;\n  right: auto;\n}\n\n:host([name-tag-position='top-left']) ::slotted(dyte-name-tag) {\n  top: var(--dyte-space-3, 12px);\n  bottom: auto;\n}\n\n:host([name-tag-position='top-right']) ::slotted(dyte-name-tag) {\n  top: var(--dyte-space-3, 12px);\n  right: var(--dyte-space-3, 12px);\n  left: auto;\n  bottom: auto;\n}\n\n:host([name-tag-position='top-center']) ::slotted(dyte-name-tag) {\n  left: auto;\n  right: auto;\n  bottom: auto;\n  top: var(--dyte-space-3, 12px);\n}\n\n/** Keyframes */\n\n@keyframes video-fadein {\n  0% {\n    opacity: 0;\n    transform: scale(1.4) translateY(20px);\n  }\n\n  100% {\n    opacity: 1;\n    transform: scale(1) translateY(0);\n  }\n}\n\n::slotted(dyte-network-indicator) {\n  position: absolute;\n  right: var(--dyte-space-3, 12px);\n  bottom: var(--dyte-space-3, 12px);\n}\n\n@media only screen and (max-height: 480px) and (orientation: landscape) {\n    :host([size='sm'][variant='solid']) ::slotted(dyte-name-tag), \n    :host([size='sm'][variant='solid']) dyte-name-tag {\n    left: var(--dyte-space-0, 0px);\n    bottom: var(--dyte-space-0, 0px);\n    border-radius: var(--dyte-border-radius-none, 0);\n      transform-origin: 0% 110%;\n      transform: scale(0.6);\n  }\n}\n\n@container screentile (max-width: 400px) {\n  ::slotted(dyte-name-tag) {\n    transform-origin: 0 130%;\n    transform: scale(0.7);\n  }\n}\n";
const DyteScreenshareViewStyle0 = dyteScreenshareViewCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteScreenshareView = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.stateUpdate = index$1.createEvent(this, "dyteStateUpdate", 7);
        this.play = index$1.createEvent(this, "screensharePlay", 7);
        this.fullScreenListener = () => {
            this.isFullScreen = fullScreen.isFullScreenEnabled();
        };
        this.participantScreenshareUpdate = (p) => {
            if (p.id !== this.participant.id)
                return;
            this.screenShareListener(p);
        };
        /** Hide full screen button */
        this.hideFullScreenButton = false;
        /** Position of name tag */
        this.nameTagPosition = 'bottom-left';
        /** Variant */
        this.variant = 'solid';
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.videoExpanded = false;
        this.screenShareEnabled = false;
        this.isFullScreen = false;
        this.toggleFullScreen = () => {
            if (!this.isFullScreen) {
                fullScreen.requestFullScreen(this.host);
                this.isFullScreen = true;
            }
            else {
                fullScreen.exitFullSreen();
                this.isFullScreen = false;
            }
        };
    }
    connectedCallback() {
        window === null || window === void 0 ? void 0 : window.addEventListener('fullscreenchange', this.fullScreenListener);
        window === null || window === void 0 ? void 0 : window.addEventListener('webkitfullscreenchange', this.fullScreenListener);
    }
    componentDidLoad() {
        this.participantChanged(this.participant);
    }
    disconnectedCallback() {
        if (!this.meeting)
            return;
        const { self } = this.meeting;
        if (this.participant.id === self.id && this.screenShareListener)
            this.participant.removeListener('screenShareUpdate', this.screenShareListener);
        else
            this.meeting.participants.joined.removeListener('screenShareUpdate', this.participantScreenshareUpdate);
        window === null || window === void 0 ? void 0 : window.removeEventListener('fullscreenchange', this.fullScreenListener);
        window === null || window === void 0 ? void 0 : window.removeEventListener('webkitfullscreenchange', this.fullScreenListener);
    }
    participantChanged(participant) {
        if (participant != null && this.meeting) {
            const { self } = this.meeting;
            this.screenShareListener = ({ screenShareEnabled, screenShareTracks }) => {
                const enabled = screenShareEnabled && screenShareTracks.video != null;
                index$1.writeTask(() => {
                    this.screenShareEnabled = enabled;
                });
                if (enabled) {
                    const stream = new MediaStream();
                    stream.addTrack(screenShareTracks.video);
                    if (this.videoEl != null) {
                        this.videoEl.srcObject = stream;
                        this.videoEl.play();
                    }
                }
                else if (this.videoEl != null) {
                    this.videoEl.srcObject = undefined;
                }
            };
            this.screenShareListener(participant);
            if (participant.id === self.id)
                participant.addListener('screenShareUpdate', this.screenShareListener);
            else
                this.meeting.participants.joined.addListener('screenShareUpdate', this.participantScreenshareUpdate);
        }
    }
    render() {
        var _a, _b;
        const isSelf = ((_a = this.participant) === null || _a === void 0 ? void 0 : _a.id) === ((_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self.id);
        const text = this.isFullScreen ? this.t('full_screen.exit') : this.t('full_screen');
        const icon = this.isFullScreen
            ? this.iconPack.full_screen_minimize
            : this.iconPack.full_screen_maximize;
        return (index$1.h(index$1.Host, { key: '1210e9acb51881828eafe0c8edcc5db51cfe67e5', class: { isSelf } }, index$1.h("div", { key: "video-container", id: "video-container", class: { expand: this.videoExpanded } }, index$1.h("video", { key: 'edc1140a680fedb720626725ba33dee2c60a450f', ref: (el) => (this.videoEl = el), class: {
                visible: this.screenShareEnabled,
                'fit-in-container': this.participant.supportsRemoteControl,
            }, playsInline: true, onPlay: () => {
                this.play.emit({
                    screenshareParticipant: this.participant,
                    participant: this.meeting.self,
                });
            }, autoPlay: true, muted: true, id: `screen-share-video-${this.participant.id}` })), index$1.h("div", { id: "controls", key: "controls" }, !this.hideFullScreenButton && !isSelf && fullScreen.isFullScreenSupported() && (index$1.h("dyte-tooltip", { key: '5de7a66022531afd334d32119fe26c44d47871c0', label: text }, index$1.h("dyte-button", { key: '1e2287ca95bf8bce3ebcd6fdfc9e601fabb8759b', id: "full-screen-btn", kind: "icon", onClick: this.toggleFullScreen, title: text }, index$1.h("dyte-icon", { key: '4605f1c6eaa61d400b514da1553a3142ff377c20', icon: icon, "aria-hidden": true, tabIndex: -1 }))))), isSelf && (index$1.h("div", { id: "self-message", key: "self-message" }, index$1.h("h3", { key: '2e7cf4252fd106d9a86c4ecbb34d38c1b70004c8' }, this.t('screenshare.shared')), index$1.h("div", { key: '56f069b3022daec515ff8b44875e7b046e075125', class: "actions" }, this.meeting != null && (index$1.h("dyte-button", { key: 'b54f30fb5b44cec31f1708581220753189d9c2b5', variant: "danger", onClick: () => {
                this.meeting.self.disableScreenShare();
            } }, index$1.h("dyte-icon", { key: 'cebfb5a509801fb74d1855fa0b6526f55c6e601e', icon: this.iconPack.share_screen_stop, slot: "start" }), this.t('screenshare.stop'))), index$1.h("dyte-button", { key: '058c0ce2362e38b4829b31b894251d87212108c3', variant: "secondary", id: "expand-btn", onClick: () => {
                this.videoExpanded = !this.videoExpanded;
            } }, index$1.h("dyte-icon", { key: '71e4ffe64eb29dcdc7963eb3131234abfecf1792', icon: this.videoExpanded
                ? this.iconPack.full_screen_minimize
                : this.iconPack.full_screen_maximize, slot: "start" }), this.videoExpanded
            ? this.t('screenshare.min_preview')
            : this.t('screenshare.max_preview'))))), index$1.h("slot", { key: 'a12bec813c857700cf57ba36968526c308be5494' })));
    }
    get host() { return index$1.getElement(this); }
    static get watchers() { return {
        "participant": ["participantChanged"]
    }; }
};
__decorate([
    index.SyncWithStore()
], DyteScreenshareView.prototype, "meeting", void 0);
__decorate([
    index.SyncWithStore()
], DyteScreenshareView.prototype, "size", void 0);
__decorate([
    index.SyncWithStore()
], DyteScreenshareView.prototype, "iconPack", void 0);
__decorate([
    index.SyncWithStore()
], DyteScreenshareView.prototype, "t", void 0);
DyteScreenshareView.style = DyteScreenshareViewStyle0;

exports.dyte_screenshare_view = DyteScreenshareView;
