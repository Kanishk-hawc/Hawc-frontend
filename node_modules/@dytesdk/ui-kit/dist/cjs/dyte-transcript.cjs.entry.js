'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-1109742b.js');
const uiStore = require('./ui-store-c9fc6964.js');
const index = require('./index-42dce5ce.js');

const dyteTranscriptCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{pointer-events:none;display:block;color:rgb(var(--dyte-colors-text-1000, 255 255 255));display:flex;justify-content:center;vertical-align:middle;animation:show 0.4s ease;transition:0.4s;z-index:5;width:100%}.ctr{box-sizing:border-box;display:inline-flex;height:100%;align-items:center;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);-webkit-user-select:none;-moz-user-select:none;user-select:none;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));--tw-shadow:0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:rgb(var(--dyte-colors-background-1000, 8 8 8));--tw-shadow:var(--tw-shadow-colored);pointer-events:auto;padding:var(--dyte-space-3, 12px);overflow:auto;max-width:50%}.message{margin:var(--dyte-space-0, 0px);display:inline-block;justify-content:center;max-width:100%;text-wrap:wrap;line-height:1.5rem}.message .name{font-weight:bold}:host(.exit){animation:exit 0.4s ease}@keyframes show{0%{opacity:0;transform:translateY(120px)}100%{opacity:1;transform:translateY(0px)}}@keyframes exit{0%{opacity:1;transform:translateY(0)}100%{opacity:0;transform:translateY(-120px)}}:host([size='sm']){font-size:14px}";
const DyteTranscriptStyle0 = dyteTranscriptCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteTranscript = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.dismiss = index$1.createEvent(this, "dyteTranscriptDismiss", 7);
        /** Language */
        this.t = uiStore.useLanguage();
    }
    connectedCallback() {
        this.transcriptChanged(this.transcript);
    }
    transcriptChanged(transcript, oldTranscript) {
        if ((oldTranscript === null || oldTranscript === void 0 ? void 0 : oldTranscript.renderedId) === transcript.renderedId &&
            (oldTranscript === null || oldTranscript === void 0 ? void 0 : oldTranscript.transcript) === transcript.transcript) {
            return;
        }
        clearTimeout(this.timeout);
        if (!(transcript === null || transcript === void 0 ? void 0 : transcript.name) || !(transcript === null || transcript === void 0 ? void 0 : transcript.transcript)) {
            return;
        }
        const { id, renderedId } = transcript;
        this.timeout = setTimeout(() => {
            this.dismiss.emit({ id, renderedId });
        }, 10000);
    }
    render() {
        return (index$1.h(index$1.Host, { key: '45824f40e948a34c138417969042157d6a43643b' }, index$1.h("div", { key: 'e82cf7acd7d52810941ab8debae55c87216003f6', class: "ctr" }, index$1.h("p", { key: '5be2f02fe841b3a54776c978fb9e5b19c1a17f88', class: "message" }, index$1.h("span", { key: 'cc581a69a6cca46dc07d698ccf1b10bc71d16f56', class: "name" }, this.transcript.name), ": ", this.transcript.transcript))));
    }
    static get watchers() { return {
        "transcript": ["transcriptChanged"]
    }; }
};
__decorate([
    index.SyncWithStore()
], DyteTranscript.prototype, "t", void 0);
DyteTranscript.style = DyteTranscriptStyle0;

exports.dyte_transcript = DyteTranscript;
