'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-1109742b.js');
const uiStore = require('./ui-store-c9fc6964.js');
const index = require('./index-42dce5ce.js');

const dyteParticipantSetupCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;align-items:center;justify-content:center;aspect-ratio:16 / 9;height:var(--dyte-space-56, 224px);overflow:hidden;border-radius:var(--dyte-border-radius-lg, 12px);-webkit-user-select:none;-moz-user-select:none;user-select:none;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-video-bg, 24 24 24) / var(--tw-bg-opacity));transition-property:var(--dyte-transition-property, all);transition-duration:150ms}@media (prefers-reduced-motion){:host{--dyte-transition-property:none}}:host([size='sm'][variant='solid']) ::slotted(dyte-name-tag){left:var(--dyte-space-2, 8px);bottom:var(--dyte-space-2, 8px);height:var(--dyte-space-4, 16px)}video{display:none;position:absolute;height:100%;width:100%;border-radius:var(--dyte-border-radius-lg, 12px)}video.contain{-o-object-fit:contain;object-fit:contain}video.cover{-o-object-fit:cover;object-fit:cover}video.visible{display:block}video::-webkit-media-controls{display:none !important}:host([variant='gradient']) ::slotted(dyte-audio-visualizer){position:absolute;top:var(--dyte-space-2, 8px);right:var(--dyte-space-2, 8px);border-radius:9999px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));padding:var(--dyte-space-2, 8px)}:host([variant='gradient']) ::slotted(dyte-name-tag){bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);display:flex;width:100%;align-items:center;justify-content:center;text-align:center;background-color:transparent;background-image:linear-gradient(to top, var(--tw-gradient-stops));--tw-gradient-from:rgb(var(--dyte-colors-background-1000, 8 8 8));--tw-gradient-to:rgba(var(--dyte-colors-background-1000, 8 8 8) / 0);--tw-gradient-stops:var(--tw-gradient-from), var(--tw-gradient-to);--tw-gradient-to:transparent}video.mirror{transform:scaleX(-1)}@media (orientation: portrait){:host{height:var(--dyte-space-44, 176px)}}";
const DyteParticipantSetupStyle0 = dyteParticipantSetupCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipantSetup = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.isPinned = false;
        /** Position of name tag */
        this.nameTagPosition = 'bottom-left';
        /** Whether tile is used for preview */
        this.isPreview = false;
        /** Config object */
        this.config = uiStore.defaultConfig;
        /** Variant */
        this.variant = 'solid';
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.onVideoUpdate = (videoState) => {
            this.videoState = videoState;
        };
    }
    connectedCallback() {
        // set videoState before initial render and initialize listeners
        this.participantsChanged(this.participant);
    }
    componentDidLoad() {
        // load videoState into video element after first render
        this.videoStateChanged(this.videoState);
    }
    disconnectedCallback() {
        if (this.participant == null)
            return;
        this.participant.removeListener('videoUpdate', this.onVideoUpdate);
    }
    async participantsChanged(participant) {
        if (participant != null) {
            this.videoState = {
                videoEnabled: participant.videoEnabled,
                videoTrack: participant.videoTrack,
            };
            this.isPinned = participant.isPinned;
            participant.addListener('videoUpdate', this.onVideoUpdate);
        }
    }
    videoStateChanged(videoState) {
        if (videoState != null && this.videoEl != null) {
            if (videoState.videoEnabled) {
                const stream = new MediaStream();
                stream.addTrack(videoState.videoTrack);
                this.videoEl.srcObject = stream;
            }
            else {
                this.videoEl.srcObject = undefined;
            }
        }
    }
    isMirrored() {
        var _a;
        if (this.participant != null) {
            const isSelf = 'preview' in this.participant || this.isPreview;
            if (isSelf) {
                const states = this.states;
                const mirrorVideo = (_a = states === null || states === void 0 ? void 0 : states.prefs) === null || _a === void 0 ? void 0 : _a.mirrorVideo;
                if (typeof mirrorVideo === 'boolean') {
                    return mirrorVideo;
                }
            }
        }
        return false;
    }
    render() {
        var _a, _b, _c, _d;
        return (index$1.h(index$1.Host, { key: 'e9aca0a99a67a4f2fd5c7f3bd006975db783a1e9' }, index$1.h("video", { key: '9e291950e6ad07c8ed37d6da2987507d5fc657e4', ref: (el) => (this.videoEl = el), class: {
                visible: (_a = this.videoState) === null || _a === void 0 ? void 0 : _a.videoEnabled,
                mirror: this.isMirrored(),
                [(_d = (_c = (_b = this.config) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c.videoFit) !== null && _d !== void 0 ? _d : 'cover']: true,
            }, autoPlay: true, playsInline: true, muted: true }), index$1.h("slot", { key: '915126d45b8bb08844d526408132e5c259eaa950' })));
    }
    static get watchers() { return {
        "participant": ["participantsChanged"],
        "videoState": ["videoStateChanged"]
    }; }
};
__decorate([
    index.SyncWithStore()
], DyteParticipantSetup.prototype, "states", void 0);
__decorate([
    index.SyncWithStore()
], DyteParticipantSetup.prototype, "size", void 0);
__decorate([
    index.SyncWithStore()
], DyteParticipantSetup.prototype, "iconPack", void 0);
__decorate([
    index.SyncWithStore()
], DyteParticipantSetup.prototype, "t", void 0);
DyteParticipantSetup.style = DyteParticipantSetupStyle0;

exports.dyte_participant_setup = DyteParticipantSetup;
