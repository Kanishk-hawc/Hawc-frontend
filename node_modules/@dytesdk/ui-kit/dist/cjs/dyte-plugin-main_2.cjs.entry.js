'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-1109742b.js');
const uiStore = require('./ui-store-c9fc6964.js');
const index = require('./index-42dce5ce.js');
const string = require('./string-a410fab6.js');

const dytePluginMainCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;width:100%;flex-direction:column;overflow:hidden;border-radius:var(--dyte-border-radius-lg, 12px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}header{display:flex;height:var(--dyte-space-8, 32px);align-items:center;justify-content:space-between;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}header>div{display:flex;align-items:center}dyte-button{display:flex;height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);flex-direction:column;align-items:center;border-radius:9999px}dyte-button dyte-icon{height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px)}iframe{display:block;flex:1 1 0%;margin:var(--dyte-space-0, 0px);border-width:var(--dyte-border-width-none, 0);border-style:none;padding:var(--dyte-space-0, 0px);outline:2px solid transparent;outline-offset:2px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-video-bg, 24 24 24) / var(--tw-bg-opacity))}.iframe-container{position:relative;height:100%;width:100%}.block-inputs{position:absolute;z-index:10;height:100%;width:100%;border-left-width:var(--dyte-border-width-none, 0);border-top-width:var(--dyte-border-width-lg, 4px);border-style:solid;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-border-opacity))}iframe{height:100%;width:100%}";
const DytePluginMainStyle0 = dytePluginMainCss;

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DytePluginMain = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        this.canClosePlugin = false;
        this.viewModeEnabled = false;
        this.onIframeRef = (el) => {
            var _a;
            if (el === this.iframeEl)
                return;
            this.iframeEl = el;
            (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.addPluginView(el, 'plugin-main');
        };
        this.canInteractWithPlugin = () => {
            const pluginId = this.plugin.id;
            if (!pluginId)
                return true;
            /**
             * For v1 canStartPlugins is the controller
             * For v2 the controller is within plugin config
             */
            const pluginConfig = this.meeting.self.permissions.plugins
                .config[pluginId];
            /**
             * In some cases plugin config is undefined, specifically seen in cases of self
             * hosted plugins, in that case just return true
             */
            if (!pluginConfig)
                return true;
            /**
             * In V2 config currently in dev portal when a preset is saved without opening the
             * config menu then it gets added with access control undefined, to handle this case
             * the following has been done
             */
            if (!pluginConfig.accessControl)
                return true;
            /**
             * If access conrol is defined then return the permission
             */
            return pluginConfig.accessControl === 'FULL_ACCESS';
        };
    }
    componentDidLoad() {
        this.meetingChanged(this.meeting);
        this.pluginChanged(this.plugin);
    }
    meetingChanged(meeting) {
        if (meeting == undefined)
            return;
        const enabled = this.canInteractWithPlugin();
        this.viewModeEnabled = !enabled;
        index$1.writeTask(() => {
            this.canClosePlugin =
                meeting.self.permissions.plugins.canClose || this.plugin.enabledBy === meeting.self.id;
        });
    }
    pluginChanged(plugin) {
        this.toggleViewModeListener = (enable) => {
            const enabled = this.canInteractWithPlugin();
            if (enabled)
                return;
            this.viewModeEnabled = enable;
        };
        if (plugin != null) {
            this.iframeEl && plugin.addPluginView(this.iframeEl, 'plugin-main');
            plugin.addListener('toggleViewMode', this.toggleViewModeListener);
        }
    }
    disconnectedCallback() {
        var _a, _b;
        (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.removePluginView('plugin-main');
        (_b = this.plugin) === null || _b === void 0 ? void 0 : _b.removeListener('toggleViewMode', this.toggleViewModeListener);
    }
    render() {
        if (this.plugin == null)
            return null;
        return (index$1.h(index$1.Host, null, index$1.h("header", { part: "header" }, index$1.h("div", null, this.plugin.name), this.canClosePlugin && (index$1.h("div", null, index$1.h("dyte-button", { kind: "icon", onClick: () => this.plugin.deactivate(), part: "button" }, index$1.h("dyte-icon", { icon: this.iconPack.dismiss }))))), index$1.h("div", { class: 'iframe-container' }, !(this.canInteractWithPlugin() || !this.viewModeEnabled) ? (index$1.h("div", { class: "block-inputs" })) : null, index$1.h("iframe", { ref: (el) => this.onIframeRef(el), part: "iframe" }))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"],
        "plugin": ["pluginChanged"]
    }; }
};
__decorate$1([
    index.SyncWithStore()
], DytePluginMain.prototype, "meeting", void 0);
__decorate$1([
    index.SyncWithStore()
], DytePluginMain.prototype, "iconPack", void 0);
__decorate$1([
    index.SyncWithStore()
], DytePluginMain.prototype, "t", void 0);
DytePluginMain.style = DytePluginMainStyle0;

const dyteTabBarCss = ".scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{box-sizing:border-box;display:flex;height:100%;width:var(--dyte-space-16, 64px);flex-direction:column;gap:var(--dyte-space-2, 8px);overflow-y:auto;font-family:var(--dyte-font-family, sans-serif)}dyte-button{z-index:10}.col{display:flex;flex-direction:column;align-items:center}.tab{display:flex;height:var(--dyte-space-16, 64px);width:var(--dyte-space-16, 64px);align-items:center;justify-content:center;margin-bottom:var(--dyte-space-2, 8px);font-size:12px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}.tab.active{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}.tab img{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px);border-radius:var(--dyte-border-radius-sm, 4px)}.tab .name{margin-top:var(--dyte-space-0\\.5, 2px)}:host([size='sm']){flex-direction:column;margin-top:var(--dyte-space-4, 16px);height:var(--dyte-space-16, 64px);width:100%;flex-direction:row;gap:var(--dyte-space-2, 8px);overflow-x:auto}:host([size='sm']) .tab{margin:var(--dyte-space-0, 0px);text-overflow:clip;min-width:100px;height:40px}:host([size='sm']) .tab .col{display:flex;flex-direction:row;align-items:center;gap:var(--dyte-space-2, 8px)}:host([size='sm']) .tab .col img,:host([size='sm']) .tab .col dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}:host([size='sm']) .tab .col .name{gap:var(--dyte-space-1, 4px)}:host([layout='column']){flex-direction:column}:host([layout='column']) .aside{flex:2;max-width:100%;width:100%}@media (orientation: portrait){:host([size='sm']){margin-top:var(--dyte-space-2, 8px);height:var(--dyte-space-16, 64px);width:100%;flex-direction:row;transition:all 0.3s linear}:host([size='md']){height:var(--dyte-space-24, 96px);width:100%;flex-direction:row;transition:all 0.3s linear}:host .tab{margin:var(--dyte-space-0, 0px)}}@media (orientation: landscape){:host([size='sm']){margin-right:var(--dyte-space-4, 16px);height:100%;width:var(--dyte-space-14, 56px);flex-direction:row;gap:var(--dyte-space-2, 8px);overflow-y:auto;overflow-x:hidden;transition:all 0.3s linear}:host([size='md']){margin-right:var(--dyte-space-4, 16px);height:100%;width:var(--dyte-space-14, 56px);flex-direction:row;gap:var(--dyte-space-2, 8px);overflow-y:auto;overflow-x:hidden;transition:all 0.3s linear}:host .tab{margin:var(--dyte-space-0, 0px)}:host([size='sm']) .tab{margin:var(--dyte-space-0, 0px);width:100%;text-overflow:clip;min-width:0px;min-height:40px}:host([size='sm']) .tab .col{display:flex;flex-direction:column;align-items:center;gap:var(--dyte-space-2, 8px);font-size:10px}:host([size='sm']) .tab .col img,:host([size='sm']) .tab .col dyte-icon{height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px)}:host([size='sm']) .tab .col .name{gap:var(--dyte-space-1, 4px)}}";
const DyteTabBarStyle0 = dyteTabBarCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteTabBar = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.tabChange = index$1.createEvent(this, "tabChange", 7);
        /** UI Config */
        this.config = uiStore.defaultConfig;
        /** Grid Layout */
        this.layout = 'row';
        /** Icon Pack */
        this.iconPack = uiStore.defaultIconPack;
        /** Language */
        this.t = uiStore.useLanguage();
        /** Tabs */
        this.tabs = [];
    }
    render() {
        return (index$1.h(index$1.Host, { key: '8bdec657a4b6635cc2d3d73e79b4be08db404cb9' }, index$1.h("dyte-spotlight-indicator", { key: '958fa41423f075e8110d272ea521cbfc8aa67aa4', meeting: this.meeting, iconPack: this.iconPack, t: this.t, size: this.size }), this.tabs.map((tab) => {
            var _a, _b, _c, _d, _e;
            let isActive = false;
            if (((_a = this.activeTab) === null || _a === void 0 ? void 0 : _a.type) === 'plugin' &&
                tab.plugin &&
                ((_b = this.activeTab) === null || _b === void 0 ? void 0 : _b.plugin.id) === tab.plugin.id)
                isActive = true;
            else if (((_c = this.activeTab) === null || _c === void 0 ? void 0 : _c.type) === 'screenshare' &&
                tab.participant &&
                ((_d = this.activeTab) === null || _d === void 0 ? void 0 : _d.participant.id) === tab.participant.id)
                isActive = true;
            if (tab.type === 'screenshare') {
                const participant = tab.participant;
                const name = string.formatName(participant.name);
                return (index$1.h("dyte-button", { title: `${name}'s Screen Share`, key: tab.participant.id, kind: "icon", variant: isActive ? 'primary' : 'secondary', class: {
                        tab: true,
                        active: isActive,
                    }, onClick: () => this.tabChange.emit(tab) }, index$1.h("div", { class: "center col" }, index$1.h("dyte-icon", { icon: this.iconPack.share_screen_person }), index$1.h("span", { class: "name" }, participant.id === ((_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self.id) ? this.t('you') : string.shorten(name, 6)))));
            }
            else if (tab.type === 'plugin') {
                const plugin = tab.plugin;
                return (index$1.h("dyte-button", { title: plugin.name, key: plugin.id, kind: "icon", variant: isActive ? 'primary' : 'secondary', class: {
                        tab: true,
                        active: isActive,
                    }, onClick: () => this.tabChange.emit(tab) }, index$1.h("div", { class: "center col" }, index$1.h("img", { src: plugin.picture }), index$1.h("span", { class: "name" }, string.shorten(plugin.name, 6)))));
            }
        })));
    }
};
__decorate([
    index.SyncWithStore()
], DyteTabBar.prototype, "size", void 0);
__decorate([
    index.SyncWithStore()
], DyteTabBar.prototype, "meeting", void 0);
__decorate([
    index.SyncWithStore()
], DyteTabBar.prototype, "states", void 0);
__decorate([
    index.SyncWithStore()
], DyteTabBar.prototype, "iconPack", void 0);
__decorate([
    index.SyncWithStore()
], DyteTabBar.prototype, "t", void 0);
DyteTabBar.style = DyteTabBarStyle0;

exports.dyte_plugin_main = DytePluginMain;
exports.dyte_tab_bar = DyteTabBar;
