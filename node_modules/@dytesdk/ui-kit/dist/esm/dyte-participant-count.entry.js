import { r as registerInstance, h, H as Host } from './index-08f4416b.js';
import { a as defaultIconPack, c as useLanguage, v as isLiveStreamViewer } from './ui-store-9dd5dd86.js';
import { S as SyncWithStore } from './index-39fa23f1.js';

const dyteParticipantCountCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);display:inline-flex;height:var(--dyte-space-10, 40px);-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center}:host([size='sm']){margin-left:var(--dyte-space-1, 4px);margin-right:var(--dyte-space-1, 4px);font-size:12px}dyte-icon{margin-right:var(--dyte-space-1, 4px);height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px)}:host([size='sm']) dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}";
const DyteParticipantCountStyle0 = dyteParticipantCountCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteParticipantCount = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.participantCount = 0;
        this.isViewer = false;
        this.disconnectMeeting = (meeting) => {
            if (meeting != null && this.countListener != null) {
                meeting.participants.joined.removeListener('participantJoined', this.countListener);
                meeting.participants.joined.removeListener('participantLeft', this.countListener);
                (meeting === null || meeting === void 0 ? void 0 : meeting.stage) &&
                    this.stageUpdateListener &&
                    meeting.stage.removeListener('stageStatusUpdate', this.stageUpdateListener);
                meeting.self.removeListener('roomJoined', this.countListener);
            }
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        this.disconnectMeeting(this.meeting);
    }
    meetingChanged(meeting, oldMeeting) {
        this.disconnectMeeting(oldMeeting);
        if (meeting != null) {
            this.countListener = () => {
                this.participantCount =
                    meeting.participants.joined.size + (meeting.self.roomJoined ? 1 : 0);
            };
            this.countListener();
            this.isViewer = isLiveStreamViewer(this.meeting);
            meeting.participants.joined.addListener('participantJoined', this.countListener);
            meeting.participants.joined.addListener('participantLeft', this.countListener);
            if (meeting === null || meeting === void 0 ? void 0 : meeting.stage) {
                this.stageUpdateListener = () => {
                    this.isViewer = isLiveStreamViewer(this.meeting);
                };
                meeting === null || meeting === void 0 ? void 0 : meeting.stage.addListener('stageStatusUpdate', this.stageUpdateListener);
            }
            meeting.self.addListener('roomJoined', this.countListener);
        }
    }
    render() {
        if (this.isViewer)
            return null;
        return (h(Host, { tabIndex: 0, role: "log", "aria-label": `${this.participantCount} ${this.t('participants')}` }, h("dyte-icon", { icon: this.iconPack.people, tabIndex: -1, "aria-hidden": true, part: "icon" }), this.participantCount));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate([
    SyncWithStore()
], DyteParticipantCount.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantCount.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantCount.prototype, "t", void 0);
__decorate([
    SyncWithStore()
], DyteParticipantCount.prototype, "size", void 0);
DyteParticipantCount.style = DyteParticipantCountStyle0;

export { DyteParticipantCount as dyte_participant_count };
