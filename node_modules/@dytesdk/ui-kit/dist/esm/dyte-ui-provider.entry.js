import { r as registerInstance, c as createEvent, h, H as Host, a as getElement } from './index-08f4416b.js';
import { d as defaultConfig, l as uiState, u as uiStore } from './ui-store-9dd5dd86.js';
import { g as generateConfig, p as provideDyteDesignSystem, d as deepMerge } from './config-12515769.js';
import { g as getSize } from './size-505ade24.js';
import './keysIn-310f65c1.js';
import './isObjectLike-773b9473.js';

const dyteUiProviderCss = "dyte-ui-provider{display:block;width:100%;height:100%}";
const DyteUiProviderStyle0 = dyteUiProviderCss;

const LEAVE_ROOM_TIMER = 10000;
const DyteUiProvider = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.statesUpdate = createEvent(this, "dyteStatesUpdate", 7);
        /** Config */
        this.config = defaultConfig;
        /** Whether to show setup screen or not */
        this.showSetupScreen = false;
        /**
         * Do not render children until meeting is initialized
         * @default false
         */
        this.noRenderUntilMeeting = false;
        this.handleResize = () => {
            this.size = getSize(this.host.clientWidth);
        };
        this.loadTheme = () => {
            var _a;
            if (this.config === defaultConfig) {
                const { config } = generateConfig(this.meeting.self.config, this.meeting);
                this.config = config;
            }
            if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.designTokens) {
                provideDyteDesignSystem(document.documentElement, this.config.designTokens);
            }
        };
        this.roomJoinedListener = () => {
            this.updateStates({ meeting: 'joined' });
        };
        this.waitlistedListener = () => {
            this.updateStates({ meeting: 'waiting' });
        };
        this.roomLeftListener = ({ state }) => {
            // Let socketConnectionUpdate listener handle this case.
            if (state === 'disconnected' || state === 'failed')
                return;
            this.updateStates({ meeting: 'ended', roomLeftState: state });
        };
        this.mediaPermissionUpdateListener = ({ kind, message }) => {
            if (['audio', 'video'].includes(kind)) {
                if ((message === 'DENIED' || message === 'SYSTEM_DENIED') &&
                    uiState.states.activeDebugger !== true) {
                    const permissionModalSettings = {
                        enabled: true,
                        kind,
                    };
                    this.updateStates({ activePermissionsMessage: permissionModalSettings });
                }
            }
        };
        this.socketConnectionUpdateListener = ({ state }) => {
            if (state === 'failed') {
                setTimeout(() => {
                    this.meeting.leave('disconnected');
                }, LEAVE_ROOM_TIMER);
            }
        };
        this.handleChangingMeeting = (destinationMeetingId) => {
            this.updateStates({
                activeBreakoutRoomsManager: Object.assign(Object.assign({}, uiState.states.activeBreakoutRoomsManager), { destinationMeetingId }),
            });
        };
    }
    listenState(e) {
        this.updateStates(e.detail);
    }
    updateStates(states) {
        const newStates = Object.assign({}, uiState.states);
        uiState.states = deepMerge(newStates, states);
        this.statesUpdate.emit(uiState.states);
    }
    connectedCallback() {
        if (typeof window !== 'undefined') {
            this.authErrorListener = (ev) => {
                if (ev.detail.message.includes('401')) {
                    this.updateStates({ meeting: 'ended', roomLeftState: 'unauthorized' });
                }
            };
            window.addEventListener('dyteError', this.authErrorListener);
        }
        this.onMeetingChange(this.meeting);
        this.onIconPackChange(this.iconPack);
        this.onTChange(this.t);
        this.onConfigChange(this.config);
        this.onSizeChange(this.size);
        this.resizeObserver = new ResizeObserver(() => this.handleResize());
        this.resizeObserver.observe(this.host);
    }
    disconnectedCallback() {
        this.resizeObserver.disconnect();
        window.removeEventListener('dyteError', this.authErrorListener);
        if (!this.meeting)
            return;
        this.meeting.self.removeListener('roomLeft', this.roomLeftListener);
        this.meeting.self.removeListener('roomJoined', this.roomJoinedListener);
        this.meeting.self.removeListener('waitlisted', this.waitlistedListener);
        this.meeting.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
        this.meeting.meta.removeListener('socketConnectionUpdate', this.socketConnectionUpdateListener);
    }
    onMeetingChange(meeting) {
        uiStore.state.meeting = meeting;
        if (!meeting)
            return;
        this.updateStates({ viewType: meeting.meta.viewType });
        this.loadTheme();
        meeting.self.addListener('roomJoined', this.roomJoinedListener);
        meeting.self.addListener('waitlisted', this.waitlistedListener);
        meeting.self.addListener('roomLeft', this.roomLeftListener);
        meeting.self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
        meeting.meta.addListener('socketConnectionUpdate', this.socketConnectionUpdateListener);
        if (meeting.connectedMeetings.supportsConnectedMeetings) {
            meeting.connectedMeetings.once('changingMeeting', this.handleChangingMeeting);
        }
        if (meeting.self.roomJoined) {
            this.updateStates({ meeting: 'joined' });
        }
        else {
            if (this.showSetupScreen) {
                this.updateStates({ meeting: 'setup' });
            }
            else {
                meeting.joinRoom();
            }
        }
        window.removeEventListener('dyteError', this.authErrorListener);
    }
    onIconPackChange(newIconPack) {
        uiStore.state.iconPack = newIconPack;
    }
    onTChange(newT) {
        uiStore.state.t = newT;
    }
    onConfigChange(config) {
        uiStore.state.config = config;
    }
    onSizeChange(newSize) {
        uiStore.state.size = newSize;
    }
    render() {
        return h(Host, { key: 'aa4172c4b0395a5262697346a2731c1829edb369' }, this.noRenderUntilMeeting && !this.meeting ? null : h("slot", null));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "meeting": ["onMeetingChange"],
        "iconPack": ["onIconPackChange"],
        "t": ["onTChange"],
        "config": ["onConfigChange"],
        "size": ["onSizeChange"]
    }; }
};
DyteUiProvider.style = DyteUiProviderStyle0;

export { DyteUiProvider as dyte_ui_provider };
