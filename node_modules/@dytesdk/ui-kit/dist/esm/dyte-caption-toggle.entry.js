import { r as registerInstance, c as createEvent, h, H as Host } from './index-08f4416b.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './ui-store-9dd5dd86.js';
import { S as SyncWithStore } from './index-39fa23f1.js';

const dyteCaptionToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";
const DyteCaptionToggleStyle0 = dyteCaptionToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteCaptionToggle = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Variant */
        this.variant = 'button';
        /** Config */
        this.config = defaultConfig;
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.captionEnabled = false;
        this.permissionsUpdateListener = () => {
            var _a;
            this.captionEnabled =
                (_a = this.meeting.self.permissions.transcriptionEnabled) !== null && _a !== void 0 ? _a : false;
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    meetingChanged(meeting) {
        if (meeting === null)
            return;
        this.permissionsUpdateListener();
        this.meeting.self.permissions.addListener('permissionsUpdate', this.permissionsUpdateListener);
    }
    disconnectedCallback() {
        var _a;
        (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.permissions.removeListener('permissionsUpdate', this.permissionsUpdateListener);
    }
    toggleCaptions() {
        this.stateUpdate.emit({ activeCaptions: !this.states.activeCaptions, activeMoreMenu: false });
    }
    render() {
        if (!this.captionEnabled)
            return null;
        const captionsEnabled = this.states.activeCaptions;
        return (h(Host, { tabIndex: 0, role: "log", "aria-label": `Picture-in-Picture mode` }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, onClick: () => this.toggleCaptions(), icon: captionsEnabled ? this.iconPack.captionsOff : this.iconPack.captionsOn, label: captionsEnabled ? this.t('transcript.off') : this.t('transcript.on'), variant: this.variant })));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate([
    SyncWithStore()
], DyteCaptionToggle.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteCaptionToggle.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteCaptionToggle.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteCaptionToggle.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteCaptionToggle.prototype, "t", void 0);
DyteCaptionToggle.style = DyteCaptionToggleStyle0;

export { DyteCaptionToggle as dyte_caption_toggle };
