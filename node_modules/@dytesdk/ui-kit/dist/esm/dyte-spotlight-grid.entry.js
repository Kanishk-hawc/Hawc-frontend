import { r as registerInstance, h, H as Host, a as getElement } from './index-08f4416b.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './ui-store-9dd5dd86.js';
import { d as defaultGridSize } from './grid-a3ca5a3e.js';
import { R as Render } from './index-e2bee3ae.js';
import { S as SyncWithStore } from './index-39fa23f1.js';

const dyteSpotlightGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;width:100%}main{flex:1 1 0%}.grid-width-sm{width:25%}.grid-width-md{width:50%}.grid-width-lg{width:66.666667%}:host([size='sm']),:host([size='md']){flex-direction:column}:host([size='md']) aside{max-height:var(--dyte-space-96, 384px);width:100%;max-width:100%}:host([size='md']) .grid-width-sm{height:25%}:host([size='md']) .grid-width-md{height:50%}:host([size='md']) .grid-width-lg{height:66.666667%}:host([size='sm']) aside{max-height:var(--dyte-space-96, 384px);width:100%;max-width:100%}:host([size='sm']) .grid-width-sm,:host([size='sm']) .grid-width-md,:host([size='sm']) .grid-width-lg{height:50%}:host([size='xl']) .grid-width-sm,:host([size='xl']) .grid-width-md,:host([size='xl']) .grid-width-lg{width:400px}:host([layout='column']){flex-direction:column}:host([layout='column']) main{flex:4}:host([layout='column']) aside{flex:2;max-width:100%;width:100%}";
const DyteSpotlightGridStyle0 = dyteSpotlightGridCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSpotlightGrid = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /** Grid Layout */
        this.layout = 'row';
        /** Participants */
        this.participants = [];
        /** Pinned Participants */
        this.pinnedParticipants = [];
        /**
         * Aspect Ratio of participant tile
         *
         * Format: `width:height`
         */
        this.aspectRatio = '16:9';
        /** Gap between participant tiles */
        this.gap = 8;
        /** UI Config */
        this.config = defaultConfig;
        /** Icon Pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        /** Grid size */
        this.gridSize = defaultGridSize;
        this.getAdaptiveSize = (length) => {
            if (this.size === 'sm') {
                return 'sm';
            }
            if (length > 3) {
                return 'sm';
            }
            else {
                if (this.size === 'md') {
                    return 'sm';
                }
                return 'md';
            }
        };
    }
    render() {
        const defaults = {
            meeting: this.meeting,
            config: this.config,
            states: this.states,
            size: this.size,
            iconPack: this.iconPack,
            t: this.t,
        };
        const nonPinnedParticipants = this.participants.filter((p) => this.pinnedParticipants.some((pt) => pt.id != p.id));
        return (h(Host, { key: 'dbae02de6986b50f91073c0d3e397b0bba1b8dae' }, h("main", { key: '3aab79ea8fb10a418c7e128b7825baf6ef9b9ccf', part: "main" }, h(Render, { key: 'a416ee3b0eef6fc99cf04bce32d88a26ee3b50c9', element: "dyte-simple-grid", defaults: defaults, props: {
                part: 'main-grid',
                participants: this.pinnedParticipants,
                aspectRatio: this.aspectRatio,
                gap: this.gap,
                size: this.getAdaptiveSize(this.pinnedParticipants.length),
            } })), nonPinnedParticipants.length > 0 && (h("aside", { key: '266b02b5d0737b31c573028fef1d11b820ac7e39', part: "aside", class: this.gridSize.spotlight ? `grid-width-${this.gridSize.spotlight}` : 'grid-width-md' }, h(Render, { key: '283f6a3f085291b1b450f21f39459953a3423915', element: "dyte-simple-grid", defaults: defaults, props: {
                part: 'aside-grid',
                participants: nonPinnedParticipants,
                aspectRatio: this.aspectRatio,
                gap: this.gap,
                size: this.getAdaptiveSize(nonPinnedParticipants.length),
            } })))));
    }
    get host() { return getElement(this); }
};
__decorate([
    SyncWithStore()
], DyteSpotlightGrid.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteSpotlightGrid.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteSpotlightGrid.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteSpotlightGrid.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteSpotlightGrid.prototype, "t", void 0);
DyteSpotlightGrid.style = DyteSpotlightGridStyle0;

export { DyteSpotlightGrid as dyte_spotlight_grid };
