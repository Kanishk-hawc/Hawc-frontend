import { r as registerInstance, c as createEvent, h, H as Host } from './index-08f4416b.js';
import { a as defaultIconPack, c as useLanguage } from './ui-store-9dd5dd86.js';
import { S as SyncWithStore } from './index-39fa23f1.js';

const dyteMuteAllButtonCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";
const DyteMuteAllButtonStyle0 = dyteMuteAllButtonCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteMuteAllButton = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Variant */
        this.variant = 'button';
        /** Icon pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.canDisable = false;
        this.permissionsUpdateListener = () => {
            var _a;
            this.canDisable = !!((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.permissions.canDisableParticipantAudio);
        };
        this.onMuteAll = () => {
            this.stateUpdate.emit({ activeMuteAllConfirmation: true });
        };
    }
    connectedCallback() {
        this.meetingChanged(this.meeting);
    }
    disconnectedCallback() {
        var _a, _b, _c;
        (_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.removeListener('permissionsUpdate', this.permissionsUpdateListener);
    }
    meetingChanged(meeting) {
        if (!meeting)
            return;
        this.canDisable = !!(meeting === null || meeting === void 0 ? void 0 : meeting.self.permissions.canDisableParticipantAudio);
        meeting.self.permissions.addListener('permissionsUpdate', this.permissionsUpdateListener);
    }
    render() {
        if (!this.canDisable) {
            return null;
        }
        const label = this.t('mute_all');
        return (h(Host, { title: label }, h("dyte-tooltip", { kind: "block", label: label, part: "tooltip" }, h("dyte-controlbar-button", { part: "controlbar-button", icon: this.iconPack.speaker_off, label: label, size: this.size, iconPack: this.iconPack, variant: this.variant, onClick: this.onMuteAll }))));
    }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate([
    SyncWithStore()
], DyteMuteAllButton.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteMuteAllButton.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteMuteAllButton.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteMuteAllButton.prototype, "t", void 0);
DyteMuteAllButton.style = DyteMuteAllButtonStyle0;

export { DyteMuteAllButton as dyte_mute_all_button };
