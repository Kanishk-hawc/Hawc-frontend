import { r as registerInstance, h, H as Host, a as getElement } from './index-08f4416b.js';
import { d as defaultConfig, a as defaultIconPack, c as useLanguage } from './ui-store-9dd5dd86.js';
import { R as Render } from './index-e2bee3ae.js';
import { u as useGrid } from './grid-a3ca5a3e.js';
import { i as index } from './ResizeObserver.es-02979d4e.js';
import { S as SyncWithStore } from './index-39fa23f1.js';

const dyteSimpleGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block;height:100%;width:100%}";
const DyteSimpleGridStyle0 = dyteSimpleGridCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteSimpleGrid = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /** Participants */
        this.participants = [];
        /**
         * Aspect Ratio of participant tile
         *
         * Format: `width:height`
         */
        this.aspectRatio = '16:9';
        /** Gap between participant tiles */
        this.gap = 8;
        /** UI Config */
        this.config = defaultConfig;
        /** Icon Pack */
        this.iconPack = defaultIconPack;
        /** Language */
        this.t = useLanguage();
        this.dimensions = { width: 0, height: 0 };
        this.setHostDimensions = () => {
            const { clientWidth: width, clientHeight: height } = this.host;
            this.dimensions = { width, height };
        };
    }
    connectedCallback() {
        this.resizeObserver = new index(this.setHostDimensions);
        this.resizeObserver.observe(this.host);
        this.meetingChanged(this.meeting);
    }
    meetingChanged(meeting) {
        const meta = meeting === null || meeting === void 0 ? void 0 : meeting.meta;
        if (meta)
            this.mediaConnection = Object.assign({}, meta.mediaState);
    }
    disconnectedCallback() {
        var _a;
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    render() {
        const defaults = {
            meeting: this.meeting,
            config: this.config,
            states: this.states,
            size: this.size,
            iconPack: this.iconPack,
            t: this.t,
        };
        const { width, height, getPosition } = useGrid({
            dimensions: this.dimensions,
            count: this.participants.length,
            aspectRatio: this.aspectRatio,
            gap: this.gap,
        });
        return (h(Host, { key: '966acd8e36eb46608d9dc7aa026497b86b062be5' }, h("slot", { key: 'b67280589e7b5ecd630da8584ea34755400c9a33' }, this.participants.map((participant, index) => {
            const { top, left } = getPosition(index);
            return (h(Render, { element: "dyte-participant-tile", defaults: defaults, props: {
                    participant,
                    style: {
                        position: 'absolute',
                        top: `${top}px`,
                        left: `${left}px`,
                        width: `${width}px`,
                        height: `${height}px`,
                    },
                    key: participant.id,
                    'data-participant': participant.id,
                    mediaConnection: this.mediaConnection,
                }, childProps: { participant }, deepProps: true }));
        }))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "meeting": ["meetingChanged"]
    }; }
};
__decorate([
    SyncWithStore()
], DyteSimpleGrid.prototype, "size", void 0);
__decorate([
    SyncWithStore()
], DyteSimpleGrid.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteSimpleGrid.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteSimpleGrid.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteSimpleGrid.prototype, "t", void 0);
DyteSimpleGrid.style = DyteSimpleGridStyle0;

export { DyteSimpleGrid as dyte_simple_grid };
