import { r as registerInstance, c as createEvent, h, H as Host } from './index-08f4416b.js';
import { c as useLanguage, a as defaultIconPack } from './ui-store-9dd5dd86.js';
import { S as SyncWithStore } from './index-39fa23f1.js';

const dyteDebuggerToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";
const DyteDebuggerToggleStyle0 = dyteDebuggerToggleCss;

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const DyteDebuggerToggle = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
        /** Variant */
        this.variant = 'button';
        /** Language */
        this.t = useLanguage();
        /** Icon pack */
        this.iconPack = defaultIconPack;
    }
    toggleDebugger() {
        var _a;
        this.stateUpdate.emit({
            activeDebugger: !((_a = this.states) === null || _a === void 0 ? void 0 : _a.activeDebugger),
            activeMoreMenu: false,
        });
    }
    render() {
        return (h(Host, { key: 'e4f3441ebff39ea51b49aa9a015b6875b433b7dd', title: this.t('Troubleshooting') }, h("dyte-controlbar-button", { key: '7441cd4adf6a3d1b7d2c4f2b957f1561ef0d4ae1', size: this.size, iconPack: this.iconPack, onClick: () => this.toggleDebugger(), icon: this.iconPack.debug, label: this.t('Troubleshooting'), variant: this.variant })));
    }
};
__decorate([
    SyncWithStore()
], DyteDebuggerToggle.prototype, "meeting", void 0);
__decorate([
    SyncWithStore()
], DyteDebuggerToggle.prototype, "states", void 0);
__decorate([
    SyncWithStore()
], DyteDebuggerToggle.prototype, "t", void 0);
__decorate([
    SyncWithStore()
], DyteDebuggerToggle.prototype, "iconPack", void 0);
__decorate([
    SyncWithStore()
], DyteDebuggerToggle.prototype, "size", void 0);
DyteDebuggerToggle.style = DyteDebuggerToggleStyle0;

export { DyteDebuggerToggle as dyte_debugger_toggle };
