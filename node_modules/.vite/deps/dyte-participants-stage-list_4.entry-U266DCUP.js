import {
  Render
} from "./chunk-3STK22JP.js";
import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import {
  Host,
  defaultConfig,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-participants-stage-list_4.entry.js
var dyteParticipantsStageListCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;width:100%;flex-direction:column;font-size:14px}.participants-container{margin-bottom:var(--dyte-space-4, 16px);height:100%;width:100%}h3,.heading-count{margin:var(--dyte-space-0, 0px);display:flex;align-items:center;justify-content:center;padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));text-align:center}.heading-count{font-size:14px}.participants{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.empty-stage-list{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);text-align:center;font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}dyte-participant{width:100%}";
var DyteParticipantsStageListStyle0 = dyteParticipantsStageListCss;
var __decorate$3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteParticipants = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.config = defaultConfig;
    this.hideHeader = false;
    this.iconPack = defaultIconPack;
    this.view = "sidebar";
    this.t = useLanguage();
    this.search = "";
    this.participants = [];
    this.createParticipantNode = (participant) => {
      const defaults = {
        meeting: this.meeting,
        view: this.view,
        t: this.t,
        config: this.config,
        states: this.states,
        size: this.size,
        iconPack: this.iconPack
      };
      return h("div", null, h(Render, { element: "dyte-participant", defaults, props: { role: "listitem", participant, key: participant.id }, childProps: Object.assign(Object.assign({}, defaults), { participant, size: this.size }), deepProps: true }));
    };
    this.updateStageList = () => {
      this.getParticipants(this.search);
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.searchChanged(this.search);
  }
  disconnectedCallback() {
    const { participants, stage } = this.meeting;
    if (this.meeting == null)
      return;
    this.participantJoinedListener && this.meeting.participants.joined.removeListener("participantJoined", this.participantJoinedListener);
    this.participantLeftListener && this.meeting.participants.joined.removeListener("participantLeft", this.participantLeftListener);
    participants.joined.removeListener("stageStatusUpdate", this.updateStageList);
    stage === null || stage === void 0 ? void 0 : stage.removeListener("stageStatusUpdate", this.updateStageList);
  }
  meetingChanged(meeting) {
    if (meeting == null)
      return;
    this.participantJoinedListener = (participant) => {
      if (participant.stageStatus !== "ON_STAGE")
        return;
      const lowerCaseSearch = this.search.toLowerCase();
      if (!participant.name.toLowerCase().includes(lowerCaseSearch) || !participant.id.toLowerCase().includes(lowerCaseSearch))
        return;
      this.participants = [
        ...this.participants.filter((p) => p.id !== participant.id),
        participant
      ];
    };
    this.participantLeftListener = (participant) => {
      this.participants = this.participants.filter((p) => p.id !== participant.id);
    };
    meeting.participants.joined.addListener("participantJoined", this.participantJoinedListener);
    meeting.participants.joined.addListener("participantLeft", this.participantLeftListener);
    this.updateStageList();
    meeting === null || meeting === void 0 ? void 0 : meeting.participants.joined.on("stageStatusUpdate", this.updateStageList);
    meeting === null || meeting === void 0 ? void 0 : meeting.stage.on("stageStatusUpdate", this.updateStageList);
  }
  searchChanged(search) {
    this.getParticipants(search);
  }
  getParticipants(search = this.search) {
    let list = this.meeting.stage.status === "ON_STAGE" ? [this.meeting.self] : [];
    list = [
      ...list,
      ...this.meeting.participants.joined.toArray().filter((p) => p.stageStatus === "ON_STAGE")
    ];
    if (search === "")
      this.participants = list;
    else {
      this.participants = list.filter((p) => {
        var _a;
        return ((_a = p.name) !== null && _a !== void 0 ? _a : p.id).toLowerCase().includes(search.toLowerCase());
      });
    }
  }
  render() {
    return h(Host, { key: "1cfe52f6c91528ce8d5e733beba07f1bb7d3e080" }, h("div", { key: "5883133588f2b11d045244d30b5a0fa118dd4d4c", class: "participants-container" }, !this.hideHeader && h("div", { key: "5bc3c5b64c68496d32abd2e8921c45c0a1c078a5", class: "heading-count", part: "heading-count" }, this.t("participants"), " (", this.participants.length, ")"), h("dyte-virtualized-participant-list", { key: "4e709fdb9c5b04920f9ce06a7ca359e6c57d84e5", items: this.participants, renderItem: this.createParticipantNode, part: "participants", class: "participants", emptyListElement: h("div", { class: "empty-stage-list" }, this.search.length > 0 ? this.t("search.could_not_find") : this.t("search.empty")) })));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"],
      "search": ["searchChanged"]
    };
  }
};
__decorate$3([
  SyncWithStore()
], DyteParticipants.prototype, "meeting", void 0);
__decorate$3([
  SyncWithStore()
], DyteParticipants.prototype, "states", void 0);
__decorate$3([
  SyncWithStore()
], DyteParticipants.prototype, "size", void 0);
__decorate$3([
  SyncWithStore()
], DyteParticipants.prototype, "iconPack", void 0);
__decorate$3([
  SyncWithStore()
], DyteParticipants.prototype, "t", void 0);
DyteParticipants.style = DyteParticipantsStageListStyle0;
var dyteParticipantsStageQueueCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-top:var(--dyte-space-2, 8px);display:flex;width:100%;flex-direction:column;font-size:14px}.stage-requested-participants{margin-bottom:var(--dyte-space-8, 32px)}.stage-requested-participants .bulk-actions{display:flex;gap:var(--dyte-space-2, 8px)}.stage-requested-participants .bulk-actions .accept-all-button{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}.stage-requested-participants .bulk-actions dyte-button{flex:1 1 0%}h3,.heading-count{margin:var(--dyte-space-0, 0px);display:flex;align-items:center;justify-content:center;padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));text-align:center}.heading-count{font-size:14px}.participants{margin-top:var(--dyte-space-2, 8px);padding:var(--dyte-space-0, 0px)}.waiting-participant{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);display:flex;align-items:center}.waiting-participant .participant-details{margin-right:auto;display:flex;align-items:center}.waiting-participant .participant-details dyte-avatar{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);flex-shrink:0;font-size:14px}.waiting-participant .participant-details .name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}@media (min-width: 1080px){.waiting-participant .participant-details .name{max-width:var(--dyte-space-40, 160px)}}.waiting-participant .waitlist-controls{display:flex}.waiting-participant .waitlist-controls dyte-button{margin-left:var(--dyte-space-2, 8px);cursor:pointer;border-radius:var(--dyte-border-radius-sm, 4px)}.waiting-participant .waitlist-controls dyte-icon.accept{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}.waiting-participant .waitlist-controls dyte-icon.deny{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}";
var DyteParticipantsStageQueueStyle0 = dyteParticipantsStageQueueCss;
var __decorate$2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteParticipantsStaged = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.view = "sidebar";
    this.t = useLanguage();
    this.stageRequestedParticipants = [];
    this.updateStageRequestedParticipants = () => {
      this.stageRequestedParticipants = this.meeting.participants.joined.toArray().filter((p) => p.stageStatus === "REQUESTED_TO_JOIN_STAGE");
    };
    this.acceptStageRequest = async (p) => {
      const { userId } = p;
      await this.meeting.stage.grantAccess([userId]);
      this.updateStageRequestedParticipants();
    };
    this.rejectStageRequest = async (p) => {
      const { userId } = p;
      await this.meeting.stage.denyAccess([userId]);
      this.updateStageRequestedParticipants();
    };
    this.acceptAllStageRequest = async () => {
      await this.meeting.stage.grantAccess(this.stageRequestedParticipants.map((p) => p.userId));
      this.updateStageRequestedParticipants();
    };
    this.denyAllStageRequest = async () => {
      var _a;
      await ((_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.denyAccess(this.stageRequestedParticipants.map((p) => p.userId)));
      this.updateStageRequestedParticipants();
    };
    this.shouldShowStageRequests = () => {
      return this.meeting.self.permissions.stageEnabled && this.meeting.self.permissions.acceptStageRequests && this.stageRequestedParticipants.length > 0;
    };
    this.updateRequestList = async (stageRequests) => {
      var _a, _b, _c, _d, _e, _f, _g;
      if (!this.meeting.self.permissions.acceptStageRequests || !this.meeting.self.permissions.stageEnabled) {
        this.stageRequestedParticipants = [];
        return;
      }
      if (this.meeting.meta.viewType === "LIVESTREAM" || ((_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.mediaRoomType) === "HIVE") {
        if (!stageRequests) {
          stageRequests = (_f = (_e = await ((_d = this.meeting.stage) === null || _d === void 0 ? void 0 : _d.getAccessRequests())) === null || _e === void 0 ? void 0 : _e.stageRequests) !== null && _f !== void 0 ? _f : [];
        }
        this.stageRequestedParticipants = stageRequests.map((p) => {
          return Object.assign(Object.assign({}, p), { name: p.displayName });
        });
      } else {
        this.stageRequestedParticipants = (_g = [
          this.meeting.self,
          ...this.meeting.participants.joined.toArray()
        ]) === null || _g === void 0 ? void 0 : _g.filter((p) => p.stageStatus === "REQUESTED_TO_JOIN_STAGE");
      }
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    const { stage } = this.meeting;
    stage === null || stage === void 0 ? void 0 : stage.removeListener("stageAccessRequestUpdate", this.updateRequestList);
  }
  meetingChanged(meeting) {
    var _a;
    if (meeting == null)
      return;
    this.updateRequestList();
    (_a = meeting.stage) === null || _a === void 0 ? void 0 : _a.on("stageAccessRequestUpdate", this.updateRequestList);
  }
  render() {
    if (this.view !== "sidebar" || !this.shouldShowStageRequests())
      return;
    return h("div", { class: "stage-requested-participants" }, h("div", { class: "heading-count", part: "staged-heading-count" }, this.t("stage_request.header_title"), " (", this.stageRequestedParticipants.length, ")"), h("ul", { class: "participants", part: "staged-participants" }, this.stageRequestedParticipants.map((participant) => h("li", { class: "waiting-participant", key: participant.id }, h("div", { class: "participant-details" }, h("dyte-avatar", { participant, size: "sm", iconPack: this.iconPack, t: this.t }), h("p", { class: "name", title: participant.name }, participant.name)), h("div", { class: "waitlist-controls" }, h("dyte-tooltip", { label: this.t("stage_request.deny_request"), variant: "secondary" }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: () => this.rejectStageRequest(participant) }, h("dyte-icon", { class: "deny", icon: this.iconPack.dismiss }))), h("dyte-tooltip", { label: this.t("stage_request.accept_request"), variant: "secondary" }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: () => this.acceptStageRequest(participant) }, h("dyte-icon", { class: "accept", icon: this.iconPack.checkmark }))))))), h("div", { class: "bulk-actions" }, h("dyte-button", { class: "accept-all-button", variant: "secondary", onClick: this.acceptAllStageRequest }, this.t("stage_request.accept_all")), h("dyte-button", { class: "deny-all-button", variant: "danger", onClick: this.denyAllStageRequest }, this.t("stage_request.deny_all"))));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"]
    };
  }
};
__decorate$2([
  SyncWithStore()
], DyteParticipantsStaged.prototype, "meeting", void 0);
__decorate$2([
  SyncWithStore()
], DyteParticipantsStaged.prototype, "size", void 0);
__decorate$2([
  SyncWithStore()
], DyteParticipantsStaged.prototype, "iconPack", void 0);
__decorate$2([
  SyncWithStore()
], DyteParticipantsStaged.prototype, "t", void 0);
DyteParticipantsStaged.style = DyteParticipantsStageQueueStyle0;
var dyteParticipantsViewerListCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;width:100%;flex-direction:column;font-size:14px}.list{margin-bottom:var(--dyte-space-4, 16px);display:flex;height:100%;flex-direction:column}h3,.heading-count{margin:var(--dyte-space-0, 0px);align-items:center;justify-content:center;padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));text-align:center}.heading-count{font-size:14px}.participants{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.empty-viewers-list{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);text-align:center;font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}";
var DyteParticipantsViewerListStyle0 = dyteParticipantsViewerListCss;
var __decorate$1 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteParticipantsViewers = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.updateStageViewers = () => {
      this.getViewers(this.search);
    };
    this.config = defaultConfig;
    this.hideHeader = false;
    this.iconPack = defaultIconPack;
    this.view = "sidebar";
    this.search = "";
    this.t = useLanguage();
    this.stageViewers = [];
    this.createParticipantNode = (participant) => {
      return h("dyte-participant", { role: "listitem", key: participant.id, meeting: this.meeting, participant, view: this.view, iconPack: this.iconPack, config: this.config, t: this.t });
    };
    this.shouldShowViewers = () => {
      var _a, _b, _c;
      return (_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions) === null || _c === void 0 ? void 0 : _c.stageEnabled;
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.searchChanged(this.search);
  }
  meetingChanged(meeting) {
    if (meeting == null)
      return;
    this.participantJoinedListener = (participant) => {
      if (participant.stageStatus === "ON_STAGE")
        return;
      const lowerCaseSearch = this.search.toLowerCase();
      if (lowerCaseSearch.length > 0 && !participant.name.toLowerCase().includes(lowerCaseSearch))
        return;
      this.stageViewers = [
        ...this.stageViewers.filter((p) => p.id !== participant.id),
        participant
      ];
    };
    this.participantLeftListener = (participant) => {
      this.stageViewers = this.stageViewers.filter((p) => p.id !== participant.id);
    };
    meeting.participants.joined.addListener("participantJoined", this.participantJoinedListener);
    meeting.participants.joined.addListener("participantLeft", this.participantLeftListener);
    meeting.participants.joined.on("stageStatusUpdate", this.updateStageViewers);
    meeting.stage.on("stageStatusUpdate", this.updateStageViewers);
  }
  searchChanged(search) {
    this.getViewers(search);
  }
  disconnectedCallback() {
    const { participants, stage } = this.meeting;
    this.participantJoinedListener && this.meeting.participants.joined.removeListener("participantJoined", this.participantJoinedListener);
    this.participantLeftListener && this.meeting.participants.joined.removeListener("participantLeft", this.participantLeftListener);
    participants.joined.removeListener("stageStatusUpdate", this.updateStageViewers);
    stage.removeListener("stageStatusUpdate", this.updateStageViewers);
  }
  getViewers(search) {
    let list = this.meeting.stage.status === "ON_STAGE" ? [] : [this.meeting.self];
    list = [...list, ...this.meeting.participants.joined.toArray()].filter((p) => p.stageStatus !== "ON_STAGE");
    if (search === "") {
      this.stageViewers = list;
    } else {
      this.stageViewers = list.filter((p) => {
        var _a;
        return ((_a = p.name) !== null && _a !== void 0 ? _a : p.id).toLowerCase().includes(search.toLowerCase());
      });
    }
  }
  render() {
    if (this.view !== "sidebar" || !this.shouldShowViewers())
      return;
    return h("div", { class: "list" }, !this.hideHeader && h("div", { class: "heading-count", part: "heading-count" }, this.t("viewers"), " (", this.stageViewers.length, ")"), h("dyte-virtualized-participant-list", { items: this.stageViewers, renderItem: this.createParticipantNode, class: "participants", part: "participants", style: { height: "100%" }, emptyListElement: h("div", { class: "empty-viewers-list" }, this.search.length > 0 ? this.t("participants.errors.empty_results") : this.t("participants.empty_list")) }));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"],
      "search": ["searchChanged"]
    };
  }
};
__decorate$1([
  SyncWithStore()
], DyteParticipantsViewers.prototype, "meeting", void 0);
__decorate$1([
  SyncWithStore()
], DyteParticipantsViewers.prototype, "size", void 0);
__decorate$1([
  SyncWithStore()
], DyteParticipantsViewers.prototype, "iconPack", void 0);
__decorate$1([
  SyncWithStore()
], DyteParticipantsViewers.prototype, "t", void 0);
DyteParticipantsViewers.style = DyteParticipantsViewerListStyle0;
var dyteParticipantsWaitingListCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-top:var(--dyte-space-4, 16px);margin-bottom:calc(var(--dyte-space-2, 8px) * -1);display:flex;width:100%;flex-direction:column;font-size:14px}.waiting-participants{margin-bottom:var(--dyte-space-8, 32px)}.waiting-participants .accept-all-button{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}h3,.heading-count{margin:var(--dyte-space-0, 0px);display:flex;align-items:center;justify-content:center;padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));text-align:center}.heading-count{font-size:14px}.participants{margin-top:var(--dyte-space-2, 8px);padding:var(--dyte-space-0, 0px)}.waiting-participant{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);display:flex;align-items:center}.waiting-participant .participant-details{margin-right:auto;display:flex;align-items:center}.waiting-participant .participant-details dyte-avatar{margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);flex-shrink:0;font-size:14px}.waiting-participant .participant-details .name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width: 1080px){.waiting-participant .participant-details .name{max-width:var(--dyte-space-40, 160px)}}.waiting-participant .waitlist-controls{display:flex}.waiting-participant .waitlist-controls dyte-button{margin-left:var(--dyte-space-2, 8px);cursor:pointer;border-radius:var(--dyte-border-radius-sm, 4px)}.waiting-participant .waitlist-controls dyte-icon.accept{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}.waiting-participant .waitlist-controls dyte-icon.deny{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}";
var DyteParticipantsWaitingListStyle0 = dyteParticipantsWaitingListCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteParticipantsWaitlisted = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.view = "sidebar";
    this.t = useLanguage();
    this.acceptWaitingRoomRequest = async (id) => {
      await this.meeting.participants.acceptWaitingRoomRequest(id);
    };
    this.waitlistedParticipants = [];
    this.acceptAllWaitingRoomRequests = async () => {
      await this.meeting.participants.acceptAllWaitingRoomRequest(this.waitlistedParticipants.map((p) => p.id));
    };
    this.rejectWaitingRoomRequest = async (id) => {
      await this.meeting.participants.rejectWaitingRoomRequest(id);
    };
    this.shouldShowWaitlist = () => {
      if (this.meeting.meta.viewType === "LIVESTREAM")
        return false;
      return this.meeting.self.permissions.acceptWaitingRequests && this.waitlistedParticipants.length !== 0;
    };
  }
  disconnectedCallback() {
    const { participants } = this.meeting;
    this.waitlistedParticipantJoinedListener && participants.waitlisted.removeListener("participantJoined", this.waitlistedParticipantJoinedListener);
    this.waitlistedParticipantLeftListener && participants.waitlisted.removeListener("participantLeft", this.waitlistedParticipantLeftListener);
    this.waitlistedParticipantsClearedListener && participants.waitlisted.removeListener("participantsCleared", this.waitlistedParticipantsClearedListener);
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  meetingChanged(meeting) {
    if (meeting == null)
      return;
    this.waitlistedParticipants = meeting.participants.waitlisted.toArray();
    this.waitlistedParticipantJoinedListener = (participant) => {
      if (!this.waitlistedParticipants.some((p) => p.id === participant.id)) {
        this.waitlistedParticipants = [...this.waitlistedParticipants, participant];
      }
    };
    this.waitlistedParticipantLeftListener = (participant) => {
      this.waitlistedParticipants = this.waitlistedParticipants.filter((p) => p.id !== participant.id);
    };
    this.waitlistedParticipantsClearedListener = () => {
      this.waitlistedParticipants = [];
    };
    meeting.participants.waitlisted.addListener("participantJoined", this.waitlistedParticipantJoinedListener);
    meeting.participants.waitlisted.addListener("participantLeft", this.waitlistedParticipantLeftListener);
    meeting.participants.waitlisted.addListener("participantsCleared", this.waitlistedParticipantsClearedListener);
  }
  render() {
    if (this.view !== "sidebar" || !this.shouldShowWaitlist())
      return;
    return h("div", { class: "waiting-participants" }, h("div", { class: "heading-count", part: "waitlisted-heading-count" }, this.t("waitlist.header_title"), " (", this.waitlistedParticipants.length, ")"), h("ul", { class: "participants", part: "waitlisted-participants" }, this.waitlistedParticipants.map((participant) => h("li", { class: "waiting-participant", key: participant.id }, h("div", { class: "participant-details" }, h("dyte-avatar", { participant, size: "sm", iconPack: this.iconPack, t: this.t }), h("p", { class: "name", title: participant.name }, participant.name)), h("div", { class: "waitlist-controls" }, h("dyte-tooltip", { label: this.t("waitlist.deny_request"), variant: "secondary" }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: () => this.rejectWaitingRoomRequest(participant.id) }, h("dyte-icon", { class: "deny", icon: this.iconPack.dismiss }))), h("dyte-tooltip", { label: this.t("waitlist.accept_request"), variant: "secondary" }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: () => this.acceptWaitingRoomRequest(participant.id) }, h("dyte-icon", { class: "accept", icon: this.iconPack.checkmark }))))))), h("dyte-button", { class: "accept-all-button", variant: "secondary", kind: "wide", onClick: this.acceptAllWaitingRoomRequests }, this.t("waitlist.accept_all")));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteParticipantsWaitlisted.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DyteParticipantsWaitlisted.prototype, "size", void 0);
__decorate([
  SyncWithStore()
], DyteParticipantsWaitlisted.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DyteParticipantsWaitlisted.prototype, "t", void 0);
DyteParticipantsWaitlisted.style = DyteParticipantsWaitingListStyle0;
export {
  DyteParticipants as dyte_participants_stage_list,
  DyteParticipantsStaged as dyte_participants_stage_queue,
  DyteParticipantsViewers as dyte_participants_viewer_list,
  DyteParticipantsWaitlisted as dyte_participants_waiting_list
};
//# sourceMappingURL=dyte-participants-stage-list_4.entry-U266DCUP.js.map
