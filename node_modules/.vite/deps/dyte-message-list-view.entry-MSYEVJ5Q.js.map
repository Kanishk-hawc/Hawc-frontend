{
  "version": 3,
  "sources": ["../../@dytesdk/ui-kit/dist/esm/dyte-message-list-view.entry.js"],
  "sourcesContent": ["import { r as registerInstance, w as writeTask, h } from './index-08f4416b.js';\nimport { a as defaultIconPack } from './ui-store-9dd5dd86.js';\nimport { S as SyncWithStore } from './index-39fa23f1.js';\nimport { d as debounce } from './debounce-ea0579b2.js';\nimport './isObjectLike-773b9473.js';\n\nconst dyteMessageListViewCss = \":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\\\.5, 6px);width:var(--dyte-space-1\\\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}.loading{cursor:wait}.content-wrapper{height:100%;overflow-y:auto;position:relative;contain:strict}.scroller{width:1px;opacity:0}.content{position:absolute;top:0;width:100%}.smallest-dom-element{width:100%;height:2px;background:red}.loader{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);display:flex;justify-content:center}\";\nconst DyteMessageListViewStyle0 = dyteMessageListViewCss;\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n        r = Reflect.decorate(decorators, target, key, desc);\n    else\n        for (var i = decorators.length - 1; i >= 0; i--)\n            if (d = decorators[i])\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst MAX_VISIBLE_ITEMS = 20;\nconst OVERSCAN_BUFFER = 5;\nconst DyteMessageListView = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Maximum visible messages */\n        this.visibleItemsCount = MAX_VISIBLE_ITEMS;\n        /** Estimated height of an item */\n        this.estimateItemSize = 100;\n        /** Icon pack */\n        this.iconPack = defaultIconPack;\n        this.isFetching = false;\n        this.autoScroll = true;\n        this.totalHeight = 0;\n        this.sizes = new Map();\n        this.lastScrollTop = 0;\n        this.scrollToBottomRetries = 0;\n        this.elementObserver = (() => {\n            let _ro = null;\n            const get = () => {\n                if (_ro) {\n                    return _ro;\n                }\n                else if (typeof ResizeObserver !== 'undefined') {\n                    return (_ro = new ResizeObserver((entries) => {\n                        entries.forEach((entry) => {\n                            this.measureElement(entry.target, entry);\n                        });\n                    }));\n                }\n                else {\n                    return null;\n                }\n            };\n            return {\n                disconnect: () => { var _a; return (_a = get()) === null || _a === void 0 ? void 0 : _a.disconnect(); },\n                observe: (target) => { var _a; return (_a = get()) === null || _a === void 0 ? void 0 : _a.observe(target, { box: 'border-box' }); },\n                unobserve: (target) => { var _a; return (_a = get()) === null || _a === void 0 ? void 0 : _a.unobserve(target); },\n            };\n        })();\n        this.measureElement = (node, entry) => {\n            if (!node)\n                return;\n            const id = node.dataset.id;\n            if (this.sizes.has(id)) {\n                this.elementObserver.unobserve(node);\n                return;\n            }\n            if (entry) {\n                const box = entry.borderBoxSize[0];\n                if (box && box.blockSize > 0) {\n                    this.saveItemSize(id, box.blockSize);\n                    this.elementObserver.unobserve(node);\n                    return;\n                }\n            }\n            const rect = node.getBoundingClientRect();\n            if (rect.height > 0)\n                this.saveItemSize(id, rect.height);\n        };\n        this.getVisibleItems = () => {\n            return this.messages.slice(this.range.start, this.range.end + 1);\n        };\n        this.updateVisibleItems = (start, end) => {\n            const total = this.messages.length;\n            let newStart = start;\n            let newEnd = end;\n            if (total <= this.visibleItemsCount) {\n                // render all\n                newStart = 0;\n                newEnd = total - 1;\n            }\n            else if (end - start < this.visibleItemsCount - 1) {\n                // if range is less then visible, adjust start based on end\n                newStart = this.range.end - this.visibleItemsCount + 1;\n            }\n            if (this.range.start !== newStart) {\n                this.range = { start: newStart, end: newEnd };\n                this.totalHeight = this.getRangeSize(0, total);\n            }\n        };\n        this.getEstimatedItemSize = () => {\n            return this.estimateItemSize;\n        };\n        this.getRangeSize = (start, end) => {\n            let total = 0;\n            let itemSize = 0;\n            for (let index = start; index < end; index++) {\n                itemSize = this.sizes.get(this.messages[index].id);\n                total = total + (!!itemSize ? itemSize : this.getEstimatedItemSize());\n            }\n            return total;\n        };\n        this.getScrollTop = () => {\n            return this.$listRef ? Math.ceil(this.$listRef.scrollTop) : 0;\n        };\n        this.getClientHeight = () => {\n            return this.$listRef ? Math.ceil(this.$listRef.clientHeight) : 0;\n        };\n        this.getScrollHeight = () => {\n            return this.$listRef ? Math.ceil(this.$listRef.scrollHeight) : 0;\n        };\n        this.getItemsScrolled = () => {\n            const offset = this.lastScrollTop;\n            if (offset <= 0) {\n                return 0;\n            }\n            let low = 0;\n            let middle = 0;\n            let middleOffset = 0;\n            let high = this.messages.length;\n            while (low <= high) {\n                middle = (low + high) >>> 1;\n                middleOffset = this.getRangeSize(0, middle);\n                if (middleOffset === offset) {\n                    return middle;\n                }\n                else if (middleOffset < offset) {\n                    low = middle + 1;\n                }\n                else if (middleOffset > offset) {\n                    high = middle - 1;\n                }\n            }\n            return low > 0 ? --low : 0;\n        };\n        this.getEndByStart = (start) => {\n            return Math.min(start + this.visibleItemsCount, this.messages.length - 1);\n        };\n        this.scrollToOffset = (offset) => {\n            if (this.$listRef) {\n                this.$listRef.scrollTop = offset;\n            }\n        };\n        this.scrollToIndex = (index) => {\n            if (index >= this.messages.length - 1) {\n                this.scrollToBottom();\n            }\n            else {\n                const offset = index < 1 ? 0 : this.getRangeSize(0, index);\n                this.scrollToOffset(offset);\n            }\n        };\n        this.scrollToBottom = () => {\n            if (!this.$listEndRef)\n                return;\n            writeTask(() => {\n                this.$listEndRef.scrollIntoView();\n                if (this.getScrollHeight() - (this.getScrollTop() + this.getClientHeight()) > 0 &&\n                    this.scrollToBottomRetries < 10) {\n                    setTimeout(() => {\n                        this.scrollToBottom();\n                    }, 1000 / 60);\n                }\n                else {\n                    this.scrollToBottomRetries = 0;\n                    this.autoScroll = true;\n                }\n            });\n        };\n        this.handleScroll = async () => {\n            if (this.isFetching)\n                return;\n            const scrollTop = this.getScrollTop();\n            const direction = scrollTop < this.lastScrollTop || scrollTop === 0 ? 'UP' : 'DOWN';\n            this.lastScrollTop = scrollTop;\n            if (this.loadMore && scrollTop === 0 && direction === 'UP' && this.isFetching === false) {\n                this.isFetching = true;\n                const newMessages = await this.loadMore(this.messages[0]);\n                if (newMessages && newMessages.length) {\n                    this.messages = [...newMessages, ...this.messages];\n                }\n                this.isFetching = false;\n            }\n            if (direction === 'UP') {\n                this.handleTop();\n            }\n            else if (direction === 'DOWN') {\n                this.handleBottom();\n            }\n        };\n        this.handleTop = () => {\n            const scrolledItems = this.getItemsScrolled();\n            if (scrolledItems <= this.range.end - OVERSCAN_BUFFER) {\n                this.autoScroll = false;\n            }\n            if (scrolledItems > this.range.start + OVERSCAN_BUFFER) {\n                return;\n            }\n            const newStart = Math.max(this.range.start - OVERSCAN_BUFFER, 0);\n            this.updateVisibleItems(newStart, this.getEndByStart(newStart));\n        };\n        this.handleBottom = () => {\n            const scrolledItems = this.getItemsScrolled();\n            if (scrolledItems < this.range.start + OVERSCAN_BUFFER) {\n                return;\n            }\n            const newStart = this.range.start + OVERSCAN_BUFFER;\n            const newEnd = this.getEndByStart(newStart);\n            if (newEnd === this.messages.length - 1) {\n                this.updateVisibleItems(newEnd - this.visibleItemsCount, newEnd);\n            }\n            else {\n                this.updateVisibleItems(newStart, newEnd);\n            }\n        };\n        this.updateTotalHeight = debounce(() => {\n            this.totalHeight = this.getRangeSize(0, this.messages.length);\n        }, 1000 / 30, { leading: true });\n        this.rendererInternal = (containerElement, message, index) => {\n            if (!containerElement)\n                return;\n            if (containerElement.dataset.id === message.id)\n                return;\n            const viewElement = this.renderer(message, index);\n            if (containerElement.hasChildNodes) {\n                containerElement.innerHTML = '';\n            }\n            this.elementObserver.observe(containerElement);\n            containerElement.dataset.id = message.id;\n            containerElement.appendChild(viewElement);\n        };\n    }\n    connectedCallback() {\n        const total = this.messages.length - 1;\n        this.range = { start: total - this.visibleItemsCount, end: total };\n        this.updateVisibleItems(this.range.start, this.range.end);\n        this.totalHeight = this.getRangeSize(0, total);\n    }\n    componentDidLoad() {\n        if (this.autoScroll) {\n            this.scrollToBottom();\n        }\n    }\n    messagesUpdated(newValue, previousValue) {\n        if (newValue.length > previousValue.length) {\n            const diff = newValue.length - previousValue.length;\n            this.updateVisibleItems(diff, this.getEndByStart(diff));\n            this.scrollToIndex(this.range.start);\n        }\n    }\n    saveItemSize(id, height) {\n        this.sizes.set(id, Math.round(height));\n        this.updateTotalHeight();\n    }\n    render() {\n        return (h(\"div\", { key: '02660589d69e1290972669e40d032341aef9265f', class: \"scrollbar content-wrapper\", ref: (el) => (this.$listRef = el), onScroll: this.handleScroll }, h(\"div\", { key: '7e0741ead290cf3050001dd3990a87fa41bd00db', class: \"scroller\" }, h(\"div\", { key: '18a4d58c6ff888d1e11757eb4f4dd94d7f36ad42', style: {\n                height: `${this.totalHeight}px`,\n            } }), h(\"div\", { key: '44db5507f72fdd916e27dd1100dd34997b2c9e18', class: \"smallest-dom-element\", id: \"list-end\", ref: (el) => (this.$listEndRef = el) })), h(\"div\", { key: '64cb94699d06d72bf1559fa0d2c7dfff517d3c36', class: \"content\", style: {\n                transform: `translateY(${this.getRangeSize(0, this.range.start)}px)`,\n            } }, this.isFetching && (h(\"div\", { key: 'f55148d694e0e323882d9e2521cd9b5ef6779d3a', class: \"loader\" }, h(\"dyte-spinner\", { key: '84978cbf9a49e1552bdf39a5969ccf7bb152c475', size: \"md\" }))), this.getVisibleItems().map((msg, index) => (h(\"div\", { key: msg.id, ref: (el) => this.rendererInternal(el, msg, index) }))))));\n    }\n    static get watchers() { return {\n        \"messages\": [\"messagesUpdated\"]\n    }; }\n};\n__decorate([\n    SyncWithStore()\n], DyteMessageListView.prototype, \"iconPack\", void 0);\nDyteMessageListView.style = DyteMessageListViewStyle0;\n\nexport { DyteMessageListView as dyte_message_list_view };\n"],
  "mappings": "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",
  "names": []
}
