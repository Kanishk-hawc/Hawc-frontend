import {
  clone
} from "./chunk-N3RLKLVD.js";
import {
  SyncWithStore
} from "./chunk-LFTNBGM5.js";
import "./chunk-HWMB33MY.js";
import "./chunk-EZQDJRA5.js";
import {
  Host,
  defaultConfig,
  getElement,
  h,
  registerInstance,
  useLanguage,
  writeTask
} from "./chunk-55A3BFCU.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-transcripts.entry.js
var dyteTranscriptsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:absolute;top:var(--dyte-space-4, 16px);right:var(--dyte-space-4, 16px);bottom:var(--dyte-space-4, 16px);left:var(--dyte-space-4, 16px);top:auto;display:flex;flex-direction:column;pointer-events:none;justify-content:center;width:100%;z-index:5}dyte-transcript{margin-top:var(--dyte-space-2, 8px)}";
var DyteTranscriptsStyle0 = dyteTranscriptsCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteTranscripts = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.config = defaultConfig;
    this.t = useLanguage();
    this.transcripts = [];
    this.listenerAttached = false;
    this.onTranscript = (transcript) => {
      if (transcript.transcript) {
        this.add(transcript);
      }
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  addListener(meeting) {
    var _a;
    (_a = meeting === null || meeting === void 0 ? void 0 : meeting.ai) === null || _a === void 0 ? void 0 : _a.addListener("transcript", this.onTranscript);
    this.listenerAttached = true;
  }
  clearListeners(meeting) {
    var _a;
    this.onTranscript && ((_a = meeting === null || meeting === void 0 ? void 0 : meeting.ai) === null || _a === void 0 ? void 0 : _a.removeListener("transcript", this.onTranscript));
    this.listenerAttached = false;
    clearTimeout(this.disconnectTimeout);
    this.transcripts = [];
  }
  disconnectedCallback() {
    if (this.meeting == null)
      return;
    this.clearListeners(this.meeting);
  }
  meetingChanged(meeting, oldMeeting) {
    clearTimeout(this.disconnectTimeout);
    if (oldMeeting !== void 0)
      this.clearListeners(oldMeeting);
    if (meeting == null)
      return;
    if (this.states.activeCaptions) {
      this.addListener(meeting);
    }
  }
  statesChanged(states) {
    if (!states)
      return;
    if (states.activeCaptions && !this.listenerAttached) {
      this.addListener(this.meeting);
    }
    if (!states.activeCaptions && this.listenerAttached) {
      this.clearListeners(this.meeting);
    }
  }
  transcriptionsReducer(acc, t) {
    if (!acc.length) {
      return [t];
    }
    let lastElement = acc[acc.length - 1];
    if (lastElement.peerId !== t.peerId) {
      return acc.concat(t);
    }
    if (lastElement.id === t.id) {
      lastElement.transcript = t.transcript;
      acc.pop();
      return acc.concat(clone(lastElement));
    }
    return acc.concat(t);
  }
  add(transcript) {
    this.transcripts = this.transcriptionsReducer(this.transcripts, transcript);
  }
  remove(renderedId) {
    this.transcripts = this.transcripts.filter((transcript) => transcript.renderedId !== renderedId);
  }
  handleDismiss(e) {
    e.stopPropagation();
    const { id, renderedId } = e.detail;
    const el = this.host.shadowRoot.querySelector(`[data-id="${id}"]`);
    el === null || el === void 0 ? void 0 : el.classList.add("exit");
    setTimeout(() => {
      writeTask(() => {
        this.remove(renderedId);
      });
    }, 400);
  }
  renderTranscripts() {
    const renderedTranscripts = [];
    this.transcripts.forEach((transcript) => {
      const t = {
        name: transcript.name,
        date: transcript.date,
        peerId: transcript.peerId,
        transcript: transcript.transcript,
        id: transcript.id,
        renderedId: transcript.id
      };
      if (!renderedTranscripts.length) {
        transcript.renderedId = t.renderedId;
        renderedTranscripts.push(t);
        return;
      }
      const lastTranscript = renderedTranscripts[renderedTranscripts.length - 1];
      const maxTranscriptLength = 400;
      if (lastTranscript.transcript.length + t.transcript.length > maxTranscriptLength || lastTranscript.peerId !== transcript.peerId) {
        transcript.renderedId = t.renderedId;
        renderedTranscripts.push(t);
        return;
      }
      lastTranscript.transcript += " " + transcript.transcript;
      transcript.renderedId = lastTranscript.renderedId;
    });
    renderedTranscripts.splice(0, renderedTranscripts.length - 2);
    return renderedTranscripts === null || renderedTranscripts === void 0 ? void 0 : renderedTranscripts.map((transcript) => h("dyte-transcript", { key: transcript.id, "data-id": transcript.id, transcript, onDyteTranscriptDismiss: (e) => this.handleDismiss(e), t: this.t }));
  }
  render() {
    if (!this.states.activeCaptions)
      return;
    return h(Host, null, this.renderTranscripts());
  }
  get host() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"],
      "states": ["statesChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteTranscripts.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DyteTranscripts.prototype, "states", void 0);
__decorate([
  SyncWithStore()
], DyteTranscripts.prototype, "t", void 0);
DyteTranscripts.style = DyteTranscriptsStyle0;
export {
  DyteTranscripts as dyte_transcripts
};
//# sourceMappingURL=dyte-transcripts.entry-OA5EVQ4G.js.map
