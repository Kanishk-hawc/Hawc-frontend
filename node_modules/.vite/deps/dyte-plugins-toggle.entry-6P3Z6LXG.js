import {
  canViewPlugins
} from "./chunk-U3YG42NB.js";
import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import {
  Host,
  createEvent,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-plugins-toggle.entry.js
var dytePluginsToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}:host([data-hidden]){display:none}";
var DytePluginsToggleStyle0 = dytePluginsToggleCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DytePluginsToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.variant = "button";
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.pluginsActive = false;
    this.canViewPlugins = false;
    this.updateCanView = () => {
      this.canViewPlugins = canViewPlugins(this.meeting);
    };
  }
  disconnectedCallback() {
    var _a, _b, _c, _d;
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.removeListener("stageStatusUpdate", this.updateCanView);
    (_d = (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self) === null || _d === void 0 ? void 0 : _d.permissions.removeListener("pluginsUpdate", this.updateCanView);
  }
  connectedCallback() {
    this.statesChanged(this.states);
    this.meetingChanged(this.meeting);
  }
  meetingChanged(meeting) {
    var _a, _b;
    if (meeting == null)
      return;
    this.canViewPlugins = canViewPlugins(meeting);
    (_a = meeting === null || meeting === void 0 ? void 0 : meeting.stage) === null || _a === void 0 ? void 0 : _a.on("stageStatusUpdate", this.updateCanView);
    (_b = meeting === null || meeting === void 0 ? void 0 : meeting.self) === null || _b === void 0 ? void 0 : _b.permissions.addListener("pluginsUpdate", this.updateCanView);
  }
  statesChanged(states) {
    if (states != null) {
      this.pluginsActive = states.activeSidebar === true && states.sidebar === "plugins";
    }
  }
  togglePlugins() {
    const states = this.states;
    this.pluginsActive = !((states === null || states === void 0 ? void 0 : states.activeSidebar) && (states === null || states === void 0 ? void 0 : states.sidebar) === "plugins");
    this.stateUpdate.emit({
      activeSidebar: this.pluginsActive,
      sidebar: this.pluginsActive ? "plugins" : void 0,
      activeMoreMenu: false,
      activeAI: false
    });
  }
  render() {
    if (!this.canViewPlugins)
      return h(Host, { "data-hidden": true });
    const text = this.t("plugins");
    return h(Host, { title: text }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, class: { active: this.pluginsActive }, onClick: () => this.togglePlugins(), icon: this.iconPack.rocket, label: text, variant: this.variant }));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"],
      "states": ["statesChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DytePluginsToggle.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DytePluginsToggle.prototype, "states", void 0);
__decorate([
  SyncWithStore()
], DytePluginsToggle.prototype, "size", void 0);
__decorate([
  SyncWithStore()
], DytePluginsToggle.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DytePluginsToggle.prototype, "t", void 0);
DytePluginsToggle.style = DytePluginsToggleStyle0;
export {
  DytePluginsToggle as dyte_plugins_toggle
};
//# sourceMappingURL=dyte-plugins-toggle.entry-6P3Z6LXG.js.map
