import {
  smoothScrollToBottom
} from "./chunk-4TVM64J3.js";
import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import {
  Host,
  createEvent,
  defaultConfig,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-plugins_2.entry.js
var dytePluginsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);display:flex;height:100%;width:100%;flex-direction:column;font-size:14px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}h3{margin-left:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);display:block;padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));text-align:center}ul{overflow-y:auto;padding:var(--dyte-space-0, 0px);flex-grow:1;flex-basis:0}.metadata{display:flex;align-items:center}.metadata img{height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);border-radius:var(--dyte-border-radius-sm, 4px)}.metadata .name{margin-left:var(--dyte-space-2, 8px);font-weight:500}.plugin{display:flex;align-items:center;justify-content:space-between;padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px);padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px)}.plugin .buttons{display:flex;align-items:center}dyte-button:hover{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);--tw-ring-opacity:1;--tw-ring-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-ring-opacity));--tw-ring-offset-width:2px;--tw-ring-offset-color:rgb(var(--dyte-colors-background-1000, 8 8 8))}";
var DytePluginsStyle0 = dytePluginsCss;
var __decorate$1 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DytePlugins = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.plugins = [];
    this.canStartPlugins = false;
    this.canClosePlugins = false;
    this.activatedPluginsId = [];
    this.close = () => {
      this.stateUpdate.emit({ activeSidebar: false, sidebar: void 0 });
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.plugins.all.removeListener("stateUpdate", this.updateActivePlugins);
  }
  meetingChanged(meeting) {
    if (meeting != null) {
      this.canStartPlugins = meeting.self.permissions.plugins.canStart;
      this.canClosePlugins = meeting.self.permissions.plugins.canClose;
      this.plugins = meeting.plugins.all.toArray().filter((plugin) => {
        var _a;
        return !((_a = meeting.self.config.disabledPlugins) === null || _a === void 0 ? void 0 : _a.includes(plugin.id));
      });
      this.updateActivePlugins = () => {
        this.activatedPluginsId = meeting.plugins.active.toArray().map((p) => p.id);
      };
      this.updateActivePlugins();
      meeting.plugins.all.addListener("stateUpdate", this.updateActivePlugins);
    }
  }
  render() {
    return h(Host, { key: "2bca2470b4a694420b70f85c42c16c5e8ec9f079" }, h("ul", { key: "c9d0ce582decd898e158375a42a428c404f11288", class: "scrollbar" }, this.plugins.map((plugin) => h("li", { key: plugin.name, class: "plugin" }, h("div", { class: "metadata" }, h("img", { src: plugin.picture }), h("div", { class: "name" }, plugin.name)), !this.activatedPluginsId.includes(plugin.id) && this.canStartPlugins && h("div", { class: "buttons" }, h("dyte-button", { kind: "icon", size: "lg", onClick: () => {
      plugin.activate();
      this.close();
    }, "aria-label": `${this.t("activate")} ${plugin.name}` }, h("dyte-icon", { icon: this.iconPack.rocket, tabIndex: -1, "aria-hidden": true }))), this.activatedPluginsId.includes(plugin.id) && this.canClosePlugins && h("div", { class: "buttons" }, h("dyte-button", { kind: "icon", size: "lg", onClick: () => {
      plugin.deactivate();
    }, "aria-label": `${this.t("close")} ${plugin.name}` }, h("dyte-icon", { icon: this.iconPack.dismiss, tabIndex: -1, "aria-hidden": true })))))));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"]
    };
  }
};
__decorate$1([
  SyncWithStore()
], DytePlugins.prototype, "meeting", void 0);
__decorate$1([
  SyncWithStore()
], DytePlugins.prototype, "size", void 0);
__decorate$1([
  SyncWithStore()
], DytePlugins.prototype, "iconPack", void 0);
__decorate$1([
  SyncWithStore()
], DytePlugins.prototype, "t", void 0);
DytePlugins.style = DytePluginsStyle0;
var dytePollsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{margin-top:var(--dyte-space-2, 8px);display:flex;height:100%;width:100%;flex-direction:column;font-size:14px}*{box-sizing:border-box}.ctr{box-sizing:border-box;padding:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-0, 0px);display:flex;flex:1 1 0%;flex-direction:column}.polls-view{overflow-y:auto;flex:1 1 0%;flex-basis:0}.empty-polls{display:flex;height:100%;width:100%;align-items:center;justify-content:center}";
var DytePollsStyle0 = dytePollsCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DytePolls = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.create = false;
    this.onPollsUpdate = (data) => {
      this.polls = [...data.polls];
    };
    this.onUpdatePermissions = () => {
      this.permissions = this.meeting.self.permissions;
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    var _a;
    if (this.meeting == null)
      return;
    (_a = this.meeting.polls) === null || _a === void 0 ? void 0 : _a.removeListener("pollsUpdate", this.onPollsUpdate);
    this.meeting.self.permissions.removeListener("pollsUpdate", this.onUpdatePermissions);
  }
  meetingChanged(meeting) {
    if (meeting == void 0)
      return;
    if (meeting && !meeting.polls)
      return;
    this.permissions = this.meeting.self.permissions;
    this.polls = [...meeting.polls.items];
    meeting.polls.addListener("pollsUpdate", this.onPollsUpdate);
    this.meeting.self.permissions.addListener("pollsUpdate", this.onUpdatePermissions);
    this.onCreate = async (data) => {
      this.create = false;
      await meeting.polls.create(data.question, data.options, data.anonymous, data.hideVotes);
    };
    this.onVote = async (id, index) => {
      await meeting.polls.vote(id, index);
    };
  }
  toggleCreateState() {
    this.create = !this.create;
  }
  componentDidRender() {
    smoothScrollToBottom(this.pollEl);
  }
  render() {
    return h(Host, { key: "a0488904cbdbdbe67b2ec50da2bfa318cff4f493" }, h("div", { key: "05f6bdf2b6a1eeaff40abf9b9ea7c3f13da3d0da", class: "ctr", part: "container" }, h("div", { key: "ec21f4d593a30189e5b8891cd7d9bc1cbca6f0c2", class: "polls-view scrollbar", ref: (el) => this.pollEl = el, part: "polls" }, this.polls.length == 0 && this.create !== true && h("div", { key: "1f76f9fcb60d8e0e862a673c2582e23bacbd6009", class: "empty-polls" }, this.t("polls.empty")), this.polls.map((item) => {
      var _a;
      return h("dyte-poll", { key: item.id, poll: item, onDyteVotePoll: (e) => {
        this.onVote(e.detail.id, e.detail.index);
      }, self: (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.userId, iconPack: this.iconPack, t: this.t, permissions: this.permissions });
    }), this.create && h("dyte-poll-form", { key: "51d1a36308edaf71cf4bb2b607ff50c362ec55ed", part: "poll-form", onDyteCreatePoll: (e) => {
      this.onCreate(e.detail);
    }, iconPack: this.iconPack, t: this.t })), this.permissions.polls.canCreate && h("dyte-button", { key: "8bb94218977ac5b90e5e5365aad490916ac62f65", kind: "wide", onClick: () => this.toggleCreateState(), variant: this.create ? "secondary" : "primary", part: "button" }, this.create ? this.t("polls.cancel") : this.t("polls.create"))));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DytePolls.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DytePolls.prototype, "size", void 0);
__decorate([
  SyncWithStore()
], DytePolls.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DytePolls.prototype, "t", void 0);
DytePolls.style = DytePollsStyle0;
export {
  DytePlugins as dyte_plugins,
  DytePolls as dyte_polls
};
//# sourceMappingURL=dyte-plugins_2.entry-D6XZ5UYE.js.map
