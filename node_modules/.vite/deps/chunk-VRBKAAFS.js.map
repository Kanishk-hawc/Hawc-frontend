{
  "version": 3,
  "sources": ["../../@dytesdk/ui-kit/dist/esm/grid-a3ca5a3e.js"],
  "sourcesContent": ["function roundDown(num, places) {\n    const factor = Math.pow(10, places);\n    return Math.floor(num * factor) / factor;\n}\nfunction useGrid({ dimensions, count, aspectRatio, gap }) {\n    const { width, height, rows, cols } = useGridItemDimensions({\n        dimensions,\n        count,\n        aspectRatio,\n        gap,\n    });\n    const getPosition = useGridPositioning({\n        parentDimensions: dimensions,\n        dimensions: { width, height },\n        rows,\n        cols,\n        count,\n        gap,\n    });\n    return { width, height, getPosition };\n}\nfunction useGridItemDimensions({ count, dimensions, aspectRatio, gap, }) {\n    let { width: W, height: H } = dimensions;\n    if (W === 0 || H === 0)\n        return { width: 0, height: 0, rows: 1, cols: 1 };\n    W -= gap * 2;\n    H -= gap * 2;\n    const s = gap, N = count;\n    const r = getAspectRatio(aspectRatio);\n    let w = 0, h = 0;\n    let a = 1, b = 1;\n    const widths = [];\n    for (let n = 1; n <= N; n++) {\n        widths.push((W - s * (n - 1)) / n);\n        widths.push((H - s * (n - 1)) / (n * r));\n    }\n    // sort in descending order, largest first\n    widths.sort((a, b) => b - a);\n    for (const width of widths) {\n        // We fix the precision to 4 decimal places to prevent\n        // floating point overflow errors. Anyway, accuracy above\n        // 4 decimal places does not really matter.\n        w = roundDown(width, 4);\n        h = roundDown(w * r, 4);\n        a = Math.floor((W + s) / (w + s));\n        b = Math.floor((H + s) / (h + s));\n        if (a * b >= N) {\n            // recalculate rows, as row calculated above can be inaccurate\n            b = Math.ceil(N / a);\n            break;\n        }\n    }\n    return { width: w, height: h, rows: b, cols: a };\n}\nfunction useGridPositioning({ parentDimensions, dimensions, rows, cols, count, gap, }) {\n    const { width: W, height: H } = parentDimensions;\n    const { width: w, height: h } = dimensions;\n    const firstTop = (H - (h * rows + (rows - 1) * gap)) / 2;\n    let firstLeft = (W - (w * cols + (cols - 1) * gap)) / 2;\n    const topAdd = h + gap;\n    const leftAdd = w + gap;\n    let col = 0, row = 0;\n    const incompleteRowCols = count % cols;\n    function getPosition(index) {\n        const remaining = count - index;\n        if (remaining === incompleteRowCols) {\n            // in last row with incomplete columns, recalculate firstLeft to make it centered\n            firstLeft = (W - (w * remaining + (remaining - 1) * gap)) / 2;\n        }\n        const top = firstTop + row * topAdd;\n        const left = firstLeft + col * leftAdd;\n        col++;\n        if ((index + 1) % cols === 0) {\n            // if a row has been traversed completely, increment row, reset col\n            row++;\n            col = 0;\n        }\n        return { top, left };\n    }\n    return getPosition;\n}\n/**\n * Parses the Aspect Ratio value\n * @param ratio The aspect ratio in the format of `16:9` where `width:height`\n * @returns The parsed value of aspect ratio\n */\nconst getAspectRatio = (ratio) => {\n    const [width, height] = ratio.split(':');\n    return Number.parseInt(height) / Number.parseInt(width);\n};\nconst defaultGridSize = {\n    spotlight: 'sm',\n    mixed: 'sm',\n};\n\nexport { defaultGridSize as d, useGrid as u };\n"],
  "mappings": "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",
  "names": ["a", "b"]
}
