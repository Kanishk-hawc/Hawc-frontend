import {
  autoPlacement,
  computePosition,
  hide,
  offset,
  shift
} from "./chunk-5MM6NM25.js";
import {
  formatName,
  shorten
} from "./chunk-G3PIBVWD.js";
import {
  debounce
} from "./chunk-7ASNTWIK.js";
import {
  Render,
  lenChildren
} from "./chunk-SKOJFCA3.js";
import {
  SyncWithStore
} from "./chunk-LFTNBGM5.js";
import "./chunk-EZQDJRA5.js";
import {
  FlagsmithFeatureFlags,
  Host,
  createEvent,
  defaultConfig,
  defaultIconPack,
  getElement,
  h,
  registerInstance,
  useLanguage
} from "./chunk-55A3BFCU.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-participant_2.entry.js
var dyteParticipantCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;height:var(--dyte-space-14, 56px);align-items:center;justify-content:space-between;cursor:pointer;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}:host dyte-avatar{height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);font-size:14px}.left{display:flex;align-items:center}.left>*{margin-right:var(--dyte-space-2, 8px)}.left>*:last-child{margin-right:var(--dyte-space-0, 0px)}.right{display:flex;align-items:center;justify-content:flex-end}.right>*{margin-left:var(--dyte-space-2, 8px)}.right>*:first-child{margin-left:var(--dyte-space-0, 0px)}.name{overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}dyte-icon.red{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}dyte-icon.more{cursor:pointer}.menu{position:relative;display:inline-block;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}#menu-list{position:absolute;top:var(--dyte-space-8, 32px) !important;right:var(--dyte-space-4, 16px) !important;z-index:20}";
var DyteParticipantStyle0 = dyteParticipantCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteParticipant = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dyteSendNotification = createEvent(this, "dyteSendNotification", 7);
    this.pinnedListener = ({ isPinned }) => {
      this.isPinned = isPinned;
    };
    this.toggleTileListener = ({ hidden }) => {
      this.isHidden = hidden;
    };
    this.stageListener = ({ stageStatus }) => {
      this.isOnStage = stageStatus === "ON_STAGE";
    };
    this.view = "sidebar";
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.config = defaultConfig;
    this.audioEnabled = false;
    this.videoEnabled = false;
    this.isPinned = false;
    this.isHidden = false;
    this.isOnStage = false;
    this.canDisableParticipantAudio = false;
    this.canDisableParticipantVideo = false;
    this.canKickParticipant = false;
    this.canPinParticipant = false;
    this.canAllowParticipantOnStage = false;
    this.menuOpen = false;
    this.permissionsUpdateListener = () => {
      this.meetingChanged(this.meeting);
    };
    this.inviteToStageToggle = async () => {
      const p = this.participant;
      const { stage } = this.meeting;
      if (p.stageStatus === "ACCEPTED_TO_JOIN_STAGE") {
        this.dyteSendNotification.emit({
          message: `${p.name} ${this.t("stage.invited_notification")}`,
          trace: `join-stage-${p.id}`
        });
        return;
      }
      if (this.isOnStage) {
        if (p.isPinned)
          p.unpin();
        await stage.kick([p.userId]);
      } else {
        await stage.grantAccess([p.userId]);
        this.dyteSendNotification.emit({
          message: `${p.name} ${this.t("stage.invited_notification")}`,
          trace: `join-stage-invite-${p.id}`
        });
      }
      this.isOnStage = p.stageStatus === "ON_STAGE";
    };
    this.handleOutsideClick = (event) => {
      const path = event.composedPath();
      const clickedOutside = !path.includes(this.host);
      if (clickedOutside && this.menuOpen) {
        this.menuOpen = false;
      }
    };
    this.update = () => {
      const triggerEl = this.host.shadowRoot.getElementById("trigger");
      const menuListEl = this.host.shadowRoot.getElementById("menu-list");
      computePosition(triggerEl, menuListEl, {
        placement: "bottom-end",
        // Default placement
        middleware: [
          autoPlacement({
            allowedPlacements: ["bottom-end", "top-end"],
            // Prioritize bottom alignment
            alignment: "end"
            // Align to start of the trigger
          }),
          offset(4),
          // Add space between the trigger and menu
          shift({ padding: 8 }),
          // Adjust if the menu is too close to the viewport edges
          hide()
        ]
      }).then(({ x, y, placement }) => {
        let position = null;
        if (placement === "bottom-end") {
          position = {
            right: `${x}px`,
            top: `${y}px`
          };
        } else {
          position = {
            right: `${x}px`,
            bottom: `${y}px`
          };
        }
        Object.assign(menuListEl.style, position);
      });
    };
    this.onMenuToggle = () => {
      this.menuOpen = !this.menuOpen;
      if (this.menuOpen) {
        this.update();
      }
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.participantChanged(this.participant);
    document.addEventListener("click", this.handleOutsideClick);
  }
  disconnectedCallback() {
    var _a;
    document.removeEventListener("click", this.handleOutsideClick);
    (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.permissions.removeListener("permissionsUpdate", this.permissionsUpdateListener);
    if (this.participant == null || this.participant.removeListener == void 0)
      return;
    this.audioUpdateListener && this.participant.removeListener("audioUpdate", this.audioUpdateListener);
    this.videoUpdateListener && this.participant.removeListener("videoUpdate", this.videoUpdateListener);
    this.participant.removeListener("pinned", this.pinnedListener);
    this.participant.removeListener("unpinned", this.pinnedListener);
    this.participant.removeListener("stageStatusUpdate", this.stageListener);
    this.participant.removeListener("toggleTile", this.toggleTileListener);
  }
  meetingChanged(meeting) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (meeting != null) {
      const { self } = meeting;
      this.canDisableParticipantAudio = self.permissions.canAllowParticipantAudio || self.permissions.canDisableParticipantAudio;
      this.canDisableParticipantVideo = self.permissions.canAllowParticipantVideo || self.permissions.canDisableParticipantVideo;
      this.canKickParticipant = self.permissions.kickParticipant && ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.__internals__.features.hasFeature(FlagsmithFeatureFlags.DISABLE_KICKING)) !== true && (((_b = this.meeting) === null || _b === void 0 ? void 0 : _b.__internals__.features.hasFeature(FlagsmithFeatureFlags.ADMIN_CANTREMOVE_ADMIN)) !== true || ((_c = this.participant) === null || _c === void 0 ? void 0 : _c.presetName) !== "webinar_admin");
      this.canPinParticipant = self.permissions.pinParticipant;
      this.canAllowParticipantOnStage = self.permissions.acceptStageRequests && self.permissions.stageEnabled && (((_d = this.meeting) === null || _d === void 0 ? void 0 : _d.__internals__.features.hasFeature(FlagsmithFeatureFlags.ADMIN_CANTREMOVE_ADMIN)) !== true || ((_e = this.participant) === null || _e === void 0 ? void 0 : _e.presetName) !== "webinar_admin") && (((_f = this.meeting) === null || _f === void 0 ? void 0 : _f.__internals__.features.hasFeature(FlagsmithFeatureFlags.CANTINVITE_VIEWER)) !== true || ((_g = this.participant) === null || _g === void 0 ? void 0 : _g.presetName) !== "webinar_viewer");
      meeting.self.permissions.addListener("permissionsUpdate", this.permissionsUpdateListener);
    }
  }
  participantChanged(participant) {
    var _a;
    if (participant != null) {
      this.audioEnabled = participant.audioEnabled;
      this.videoEnabled = participant.videoEnabled;
      this.isPinned = participant.isPinned;
      this.isHidden = (_a = participant.hidden) !== null && _a !== void 0 ? _a : false;
      this.isOnStage = participant.stageStatus === "ON_STAGE";
      this.audioUpdateListener = ({ audioEnabled }) => {
        this.audioEnabled = audioEnabled;
      };
      this.videoUpdateListener = ({ videoEnabled }) => {
        this.videoEnabled = videoEnabled;
      };
      if (participant.addListener == void 0)
        return;
      participant.addListener("audioUpdate", this.audioUpdateListener);
      participant.addListener("videoUpdate", this.videoUpdateListener);
      participant.addListener("pinned", this.pinnedListener);
      participant.addListener("unpinned", this.pinnedListener);
      participant.addListener("stageStatusUpdate", this.stageListener);
      this.participant.addListener("toggleTile", this.toggleTileListener);
    }
  }
  render() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const isAudioRoom = ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta.viewType) === "AUDIO_ROOM";
    const isSelf = ((_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self.id) === this.participant.id;
    const showMenu = this.canDisableParticipantAudio && this.audioEnabled || this.canDisableParticipantVideo && this.videoEnabled && !isAudioRoom || this.canKickParticipant || this.canPinParticipant && this.isOnStage || this.canAllowParticipantOnStage;
    const name = formatName(((_c = this.participant) === null || _c === void 0 ? void 0 : _c.name) || "");
    const isActiveParticipant = this.isOnStage || ["GROUP_CALL", "AUDIO_ROOM"].includes((_d = this.meeting) === null || _d === void 0 ? void 0 : _d.meta.viewType);
    const defaults = {
      meeting: this.meeting,
      size: "sm",
      states: this.states,
      config: this.config,
      iconPack: this.iconPack,
      t: this.t
    };
    return h(Host, { key: "6d2a340a09306d4981227b3048faeed243a14cce" }, h("div", { class: "left", key: (_e = this.participant) === null || _e === void 0 ? void 0 : _e.id }, h("dyte-avatar", { key: "bc8453dc32910051b58cf61fdd282a32955d1612", participant: this.participant, size: "sm", iconPack: this.iconPack, t: this.t }), h("p", { key: "ca4a796d5354d0fbe8d3358a321245a3d841a3f1", class: "name", title: name }, shorten(name, 16), " ", ((_f = this.meeting) === null || _f === void 0 ? void 0 : _f.self.id) === ((_g = this.participant) === null || _g === void 0 ? void 0 : _g.id) && this.t("(you)"))), this.view === "sidebar" && h("div", { key: "febaee3e2c6c2fd398d1fb05f846fbef796d73fd", class: "right" }, isActiveParticipant && h("dyte-icon", { key: "7eeb84f4a67cd6fdc4b2175ac5de5e32afd50486", class: {
      red: !this.audioEnabled
    }, icon: this.audioEnabled ? this.iconPack.mic_on : this.iconPack.mic_off }), isActiveParticipant && !isAudioRoom && h("dyte-icon", { key: "21aaa6cca2ed53deb8b1276f8f1786c1089e2dd6", class: {
      red: !this.videoEnabled
    }, icon: this.videoEnabled ? this.iconPack.video_on : this.iconPack.video_off }), (showMenu || lenChildren({
      element: "dyte-participant",
      defaults,
      childProps: {
        participant: this.participant
      }
    }) > 0) && h("div", { key: "6c7cc6c9a02e83fb1c87416b601dd1e016c3a549", class: "menu" }, h("span", { key: "0dc87f46b4f0ceb1100a1a204f3b0dc92e042b12", id: "trigger", onClick: this.onMenuToggle }, h("dyte-button", { key: "6e15059d18d929005ec8c820011de9046d69c5c6", variant: "ghost", kind: "icon", slot: "trigger" }, h("dyte-icon", { key: "2424eb5e59c79fff940435486befc709b24dd5f5", class: "more", icon: this.iconPack.more_vertical }))), h("span", { key: "972e9250b7b434b1a6673b3924563535def9f114", id: "menu-list" }, this.menuOpen && h("dyte-menu-list", { key: "eb12f27f3eec66530257a9dc653f049a9b691569", iconPack: this.iconPack, t: this.t }, this.canPinParticipant && isActiveParticipant && !isAudioRoom && h("dyte-menu-item", { key: "6fd8046b97eb6d97a872cf9b6b8d550d853aeaed", onClick: () => {
      if (this.isPinned) {
        this.participant.unpin();
      } else {
        this.participant.pin();
      }
    }, iconPack: this.iconPack, t: this.t }, h("dyte-icon", { key: "80f2a8d9b3a6ec7c4da6ca162865b296949ab07b", icon: this.isPinned ? this.iconPack.pin_off : this.iconPack.pin, slot: "start" }), this.isPinned ? this.t("unpin") : this.t("pin")), isSelf && h("dyte-menu-item", { key: "e784419ef130de759f507650de1bc92c6ac07c2a", iconPack: this.iconPack, t: this.t, onClick: () => {
      this.isHidden ? this.participant.show() : this.participant.hide();
    } }, h("dyte-icon", { key: "b349973219fb497d83b2a8852da0fc8558a1a51c", icon: this.isHidden ? this.iconPack.minimize : this.iconPack.maximize, slot: "start" }), !this.meeting.self.hidden ? this.t("minimize") : this.t("maximize")), this.canDisableParticipantAudio && isActiveParticipant && this.audioEnabled && h("dyte-menu-item", { key: "a6aa845f9ed193e7aaecb8dfc13390b2aab672c3", iconPack: this.iconPack, t: this.t, onClick: () => {
      this.participant.disableAudio();
    } }, h("dyte-icon", { key: "e0ac24333a670684d60802edc085c0eb918571c0", icon: this.iconPack.mic_off, slot: "start" }), this.t("mute")), this.canDisableParticipantVideo && isActiveParticipant && this.videoEnabled && h("dyte-menu-item", { key: "07ec0b852abd9dc7739343ce5953fbdc8c4e9408", iconPack: this.iconPack, t: this.t, onClick: () => {
      this.participant.disableVideo();
    } }, h("dyte-icon", { key: "1cccc03618c740983971502a9bbb50ab86947170", icon: this.iconPack.video_off, slot: "start" }), this.t("participants.turn_off_video")), this.canAllowParticipantOnStage && ((_h = this.participant) === null || _h === void 0 ? void 0 : _h.id) !== ((_j = this.meeting) === null || _j === void 0 ? void 0 : _j.self.id) && h("dyte-menu-item", { key: "2ee271afaf0b99eb6b793abe337777251b4d2ce8", iconPack: this.iconPack, t: this.t, class: this.isOnStage ? "red" : "", onClick: this.inviteToStageToggle }, h("dyte-icon", { key: "3734c9fa9bb9654d2c7d1b75bf53ad051020a88d", icon: this.isOnStage ? this.iconPack.leave_stage : this.iconPack.join_stage, slot: "start" }), this.isOnStage ? this.t("stage.remove_from_stage") : this.t("stage.add_to_stage")), !isSelf && this.canKickParticipant && h("dyte-menu-item", { key: "2ecb4ee36b844bd605c72a13049d1508d6bc9e62", iconPack: this.iconPack, t: this.t, class: "red", onClick: () => {
      var _a2, _b2;
      (_a2 = this.meeting) === null || _a2 === void 0 ? void 0 : _a2.participants.kick((_b2 = this.participant) === null || _b2 === void 0 ? void 0 : _b2.id);
    } }, h("dyte-icon", { key: "1e328de97168baf6c5bf66eb56eb3c6017ff4f90", icon: this.iconPack.dismiss, slot: "start" }), this.t("kick")), h("slot", { key: "73c6d605b84d57666f083484660f269a8bc9b36e" }, h(Render, { key: "8dbbbf398d6ff4cd6d98d353ebb31326e99f4742", element: "dyte-participant", defaults, childProps: {
      participant: this.participant
    }, deepProps: true, onlyChildren: true })))))));
  }
  get host() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"],
      "participant": ["participantChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteParticipant.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DyteParticipant.prototype, "states", void 0);
__decorate([
  SyncWithStore()
], DyteParticipant.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DyteParticipant.prototype, "t", void 0);
DyteParticipant.style = DyteParticipantStyle0;
var dyteVirtualizedParticipantListCss = ":host{height:100%;width:100%}";
var DyteVirtualizedParticipantListStyle0 = dyteVirtualizedParticipantListCss;
var DyteVirtualizedParticipantList = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.items = [];
    this.itemHeight = 55;
    this.bufferedItemsCount = 5;
    this.emptyListElement = null;
    this.visibleStart = 0;
    this.visibleEnd = 0;
    this.containerHeight = 0;
    this.lastScrollTop = 0;
    this.recalculatePositioning = () => {
      this.updateContainerHeight();
      requestAnimationFrame(() => {
        this.updateItemHeight();
      });
    };
    this.updateContainerHeight = () => {
      if (!this.el.querySelector(".virtual-list-container").clientHeight) {
        return;
      }
      requestAnimationFrame(() => {
        this.updateItemHeight();
      });
      this.containerHeight = this.el.querySelector(".virtual-list-container").clientHeight;
      this.updateVisibleRange();
    };
    this.onScroll = debounce(() => {
      const scrollTop = this.el.querySelector(".virtual-list-container").scrollTop;
      if (scrollTop > this.lastScrollTop && this.visibleEnd === this.items.length) {
        return;
      }
      this.lastScrollTop = scrollTop;
      this.updateVisibleRange();
    });
  }
  itemsChanged() {
    this.recalculatePositioning();
  }
  componentDidLoad() {
    this.recalculatePositioning();
    this.el.querySelector(".virtual-list-container").addEventListener("scroll", this.onScroll);
    window.addEventListener("resize", this.recalculatePositioning);
  }
  componentDidUpdate() {
    this.updateItemHeight();
  }
  disconnectedCallback() {
    this.el.querySelector(".virtual-list-container").removeEventListener("scroll", this.onScroll);
    window.removeEventListener("resize", this.recalculatePositioning);
  }
  updateVisibleRange() {
    const scrollTop = this.el.querySelector(".virtual-list-container").scrollTop;
    const startIndex = Math.floor(scrollTop / this.itemHeight);
    const visibleCount = Math.ceil(this.containerHeight / this.itemHeight);
    const endIndex = Math.min(this.items.length, startIndex + visibleCount + this.bufferedItemsCount);
    this.visibleStart = startIndex;
    this.visibleEnd = endIndex;
    this.el.querySelector(".virtual-list-container").scrollTop = this.lastScrollTop;
  }
  updateItemHeight() {
    const firstRenderedItem = this.el.querySelector(".virtual-list-item");
    if (firstRenderedItem) {
      const originalHeight = firstRenderedItem.style.height;
      firstRenderedItem.style.height = "auto";
      const naturalHeight = firstRenderedItem.getBoundingClientRect().height;
      if (originalHeight) {
        firstRenderedItem.style.height = originalHeight;
      }
      if (naturalHeight && Math.floor(naturalHeight) !== Math.floor(this.itemHeight)) {
        this.itemHeight = naturalHeight;
      }
    }
  }
  renderItems() {
    const visibleItems = this.items.slice(this.visibleStart, this.visibleEnd);
    return visibleItems.map((item, index) => {
      const itemIndex = this.visibleStart + index;
      return h("div", { class: "virtual-list-item", key: item.id, style: {
        position: "absolute",
        top: `${itemIndex * this.itemHeight}px`,
        height: `${this.itemHeight}px`,
        width: "100%"
      } }, this.renderItem(item, itemIndex));
    });
  }
  render() {
    var _a;
    const totalHeight = this.items.length * this.itemHeight;
    return h("div", { key: "1b37d3baa0af9ff413be304f5368849d20a47b23", class: "virtual-list-container", style: {
      position: "relative",
      height: "100%",
      overflowX: "hidden",
      overflowY: "auto"
    } }, h("div", { key: "6bfd8b0993b3a78ea2317715e54c68cb4458ec5a", style: { height: `${totalHeight}px`, position: "relative" } }, !((_a = this.items) === null || _a === void 0 ? void 0 : _a.length) ? this.emptyListElement : this.renderItems()), h("div", { key: "c6917ed47b4f3d579809f0b620f94aaf25779137", style: { height: `${this.itemHeight}px` } }));
  }
  get el() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "items": ["itemsChanged"]
    };
  }
};
DyteVirtualizedParticipantList.style = DyteVirtualizedParticipantListStyle0;
export {
  DyteParticipant as dyte_participant,
  DyteVirtualizedParticipantList as dyte_virtualized_participant_list
};
//# sourceMappingURL=dyte-participant_2.entry-EWQTKCIZ.js.map
