import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import {
  Host,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-spotlight-indicator.entry.js
var dyteSpotlightIndicatorCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{font-size:12px}#sync-button{flex-direction:row;border-radius:var(--dyte-border-radius-sm, 4px);padding-left:var(--dyte-space-1, 4px);display:flex;align-items:center;justify-content:center;margin-bottom:var(--dyte-space-1, 4px);font-size:12px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}:host([size='sm']) dyte-tooltip,:host([size='md']) dyte-tooltip{width:100%}:host([size='sm'])>#sync-button{height:var(--dyte-space-8, 32px);width:var(--dyte-space-16, 64px);padding-left:var(--dyte-space-0, 0px)}:host([size='md'])>#sync-button{height:var(--dyte-space-8, 32px);width:var(--dyte-space-16, 64px)}:host([size='lg'])>#sync-button{flex-direction:row;height:var(--dyte-space-8, 32px);width:var(--dyte-space-16, 64px)}@media (orientation: portrait){:host([size='lg']) #sync-button{flex-direction:column-reverse;height:var(--dyte-space-16, 64px);width:var(--dyte-space-16, 64px)}:host([size='md']) #sync-button{height:var(--dyte-space-16, 64px);width:var(--dyte-space-16, 64px)}:host([size='sm']) #sync-button{height:var(--dyte-space-10, 40px);width:var(--dyte-space-16, 64px);flex-direction:row}}#sync-button>dyte-icon{max-height:14px}#sync-button dyte-icon{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}:host([size='sm']) #sync-button>dyte-icon{width:auto}#sync-button.active dyte-icon{color:rgb(var(--dyte-colors-text-1000, 255 255 255))}div{align-content:center;line-height:2rem}dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-8, 32px)}#sync-button.active{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-bg-opacity))}";
var DyteSpotlightIndicatorStyle0 = dyteSpotlightIndicatorCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteSpotlightIndicator = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.permissionsUpdateListener = () => {
      this.canSpotlight = this.meeting.self.permissions.canSpotlight;
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.permissions.removeListener("permissionsUpdate", this.permissionsUpdateListener);
  }
  meetingChanged(meeting) {
    var _a, _b;
    if (meeting != null) {
      this.canSpotlight = meeting.self.permissions.canSpotlight;
      this.isSpotlighted = (_b = (_a = meeting.meta) === null || _a === void 0 ? void 0 : _a.broadcastTabChanges) !== null && _b !== void 0 ? _b : false;
      meeting.self.permissions.addListener("permissionsUpdate", this.permissionsUpdateListener);
    }
  }
  updateSpotlightState(shouldBroadcastTabChanges) {
    var _a;
    try {
      (_a = this.meeting.meta) === null || _a === void 0 ? void 0 : _a.setBroadcastTabChanges(shouldBroadcastTabChanges);
      this.isSpotlighted = shouldBroadcastTabChanges;
    } catch (e) {
      console.error(e);
    }
  }
  render() {
    if (!this.canSpotlight)
      return;
    return h(Host, null, h("dyte-tooltip", { size: "md", label: this.t("remote_access.indicator") }, h("div", { id: "sync-button", class: {
      tab: true,
      active: this.isSpotlighted
    }, onClick: () => this.updateSpotlightState(!this.isSpotlighted) }, h("span", { class: "name" }, "Sync"), h("dyte-icon", { id: "icon", icon: this.isSpotlighted ? this.iconPack.checkmark : this.iconPack.warning, tabIndex: -1, "aria-hidden": true }))));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteSpotlightIndicator.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DyteSpotlightIndicator.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DyteSpotlightIndicator.prototype, "t", void 0);
__decorate([
  SyncWithStore()
], DyteSpotlightIndicator.prototype, "size", void 0);
DyteSpotlightIndicator.style = DyteSpotlightIndicatorStyle0;
export {
  DyteSpotlightIndicator as dyte_spotlight_indicator
};
//# sourceMappingURL=dyte-spotlight-indicator.entry-ARDWBOXV.js.map
