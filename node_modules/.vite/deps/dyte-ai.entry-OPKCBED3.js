import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import {
  Host,
  createEvent,
  defaultConfig,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-ai.entry.js
var dyteAiCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;box-sizing:border-box;display:flex;width:100%;max-width:var(--dyte-space-80, 320px);flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden}.close{position:absolute;top:var(--dyte-space-3, 12px);left:var(--dyte-space-3, 12px)}.title{margin-left:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-2, 8px);-webkit-user-select:none;-moz-user-select:none;user-select:none;padding:var(--dyte-space-0, 0px);text-align:center;font-size:14px;font-weight:400}dyte-ai-transcriptions{flex:1}:host([view='sidebar']){margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-lg, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}:host([view='full-screen']){position:absolute;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);z-index:50;max-width:100%;border:none}";
var DyteAiStyle0 = dyteAiCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteAi = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.view = "sidebar";
    this.close = () => {
      this.stateUpdate.emit({ activeAI: false });
    };
  }
  connectedCallback() {
    this.viewChanged(this.view);
  }
  disconnectedCallback() {
    this.keydownListener && document.removeEventListener("keydown", this.keydownListener);
  }
  viewChanged(view) {
    if (view === "full-screen") {
      this.keydownListener = (e) => {
        if (e.key === "Escape") {
          this.close();
        }
      };
      document.addEventListener("keydown", this.keydownListener);
    }
  }
  render() {
    var _a, _b, _c;
    if (!((_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions).transcriptionEnabled || !((_c = this.states) === null || _c === void 0 ? void 0 : _c.activeAI)) {
      return null;
    }
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states,
      size: this.size,
      t: this.t,
      iconPack: this.iconPack
    };
    return h(Host, null, h("h3", { class: "title" }, this.t("ai.transcriptions")), h("dyte-button", { variant: "ghost", kind: "icon", class: "close", onClick: this.close, "aria-label": this.t("close") }, h("dyte-icon", { icon: this.iconPack.dismiss })), h("dyte-ai-transcriptions", Object.assign({}, defaults)));
  }
  static get watchers() {
    return {
      "view": ["viewChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteAi.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DyteAi.prototype, "states", void 0);
__decorate([
  SyncWithStore()
], DyteAi.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DyteAi.prototype, "t", void 0);
__decorate([
  SyncWithStore()
], DyteAi.prototype, "size", void 0);
DyteAi.style = DyteAiStyle0;
export {
  DyteAi as dyte_ai
};
//# sourceMappingURL=dyte-ai.entry-OPKCBED3.js.map
