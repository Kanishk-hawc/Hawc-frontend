import {
  canViewChat
} from "./chunk-U3YG42NB.js";
import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import {
  Host,
  createEvent,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage,
  usePaginatedChat
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-chat-toggle.entry.js
var dyteChatToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block}:host([data-hidden]){display:none}.unread-count{position:absolute;right:var(--dyte-space-3, 12px);box-sizing:border-box;padding:var(--dyte-space-0\\.5, 2px);-webkit-user-select:none;-moz-user-select:none;user-select:none;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));font-size:12px;color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));display:flex;height:var(--dyte-space-5, 20px);min-width:var(--dyte-space-5, 20px);align-items:center;justify-content:center;border-radius:9999px;z-index:1}.unread-count-dot{position:absolute;right:var(--dyte-space-3, 12px);z-index:10;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));border-radius:50%;display:flex;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);align-items:center;justify-content:center}:host([variant='horizontal']) .unread-count{right:var(--dyte-space-4, 16px);top:auto}";
var DyteChatToggleStyle0 = dyteChatToggleCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteChatToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.unreadMessageCount = 0;
    this.variant = "button";
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.chatActive = false;
    this.canViewChat = false;
    this.hasNewMessages = false;
    this.onChatUpdate = ({ action, message }) => {
      var _a;
      if (this.chatActive)
        return;
      if (action === "add" && message.userId !== ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.userId)) {
        this.hasNewMessages = true;
        this.unreadMessageCount += 1;
      }
    };
    this.toggleChat = () => {
      const states = this.states;
      this.chatActive = !((states === null || states === void 0 ? void 0 : states.activeSidebar) && (states === null || states === void 0 ? void 0 : states.sidebar) === "chat");
      if (this.chatActive) {
        this.unreadMessageCount = 0;
        this.hasNewMessages = false;
      }
      this.stateUpdate.emit({
        activeSidebar: this.chatActive,
        sidebar: this.chatActive ? "chat" : void 0,
        activeMoreMenu: false,
        activeAI: false
      });
    };
    this.updateCanView = () => {
      this.canViewChat = canViewChat(this.meeting);
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.statesChanged(this.states);
  }
  disconnectedCallback() {
    var _a, _b, _c, _d, _e, _f;
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.chat) === null || _b === void 0 ? void 0 : _b.removeListener("chatUpdate", this.onChatUpdate);
    (_d = (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.stage) === null || _d === void 0 ? void 0 : _d.removeListener("stageStatusUpdate", this.updateCanView);
    (_f = (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self) === null || _f === void 0 ? void 0 : _f.permissions.removeListener("chatUpdate", this.updateCanView);
  }
  meetingChanged(meeting) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (meeting == null)
      return;
    if (usePaginatedChat(meeting)) {
      (_a = meeting.chat) === null || _a === void 0 ? void 0 : _a.getMessages((/* @__PURE__ */ new Date()).getTime(), 1, true).then((res) => {
        var _a2;
        if ((_a2 = res === null || res === void 0 ? void 0 : res.messages) === null || _a2 === void 0 ? void 0 : _a2.length)
          this.hasNewMessages = true;
      });
    }
    const meetingStartedTimeMs = (_c = (_b = meeting.meta) === null || _b === void 0 ? void 0 : _b.meetingStartedTimestamp.getTime()) !== null && _c !== void 0 ? _c : 0;
    const newMessages = (_d = meeting.chat) === null || _d === void 0 ? void 0 : _d.messages.filter((m) => m.timeMs > meetingStartedTimeMs);
    this.unreadMessageCount = newMessages.length || 0;
    (_e = meeting.chat) === null || _e === void 0 ? void 0 : _e.addListener("chatUpdate", this.onChatUpdate);
    this.canViewChat = canViewChat(meeting);
    (_f = meeting === null || meeting === void 0 ? void 0 : meeting.stage) === null || _f === void 0 ? void 0 : _f.on("stageStatusUpdate", this.updateCanView);
    (_g = meeting === null || meeting === void 0 ? void 0 : meeting.self) === null || _g === void 0 ? void 0 : _g.permissions.on("chatUpdate", this.updateCanView);
  }
  statesChanged(states) {
    if (states != null) {
      this.chatActive = states.activeSidebar === true && states.sidebar === "chat";
    }
  }
  render() {
    if (!this.canViewChat)
      return h(Host, { "data-hidden": true });
    return h(Host, { title: this.t("chat") }, usePaginatedChat(this.meeting) ? this.hasNewMessages && h("div", { class: "unread-count-dot", part: "unread-count-dot" }) : this.unreadMessageCount !== 0 && !this.chatActive && h("div", { class: "unread-count", part: "unread-count" }, h("span", null, this.unreadMessageCount <= 100 ? this.unreadMessageCount : "99+")), h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, class: { active: this.chatActive }, onClick: this.toggleChat, icon: this.iconPack.chat, label: this.t("chat"), variant: this.variant }));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"],
      "states": ["statesChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteChatToggle.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DyteChatToggle.prototype, "states", void 0);
__decorate([
  SyncWithStore()
], DyteChatToggle.prototype, "size", void 0);
__decorate([
  SyncWithStore()
], DyteChatToggle.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DyteChatToggle.prototype, "t", void 0);
DyteChatToggle.style = DyteChatToggleStyle0;
export {
  DyteChatToggle as dyte_chat_toggle
};
//# sourceMappingURL=dyte-chat-toggle.entry-XYSDAMXO.js.map
