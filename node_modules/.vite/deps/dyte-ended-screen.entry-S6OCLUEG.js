import {
  SyncWithStore
} from "./chunk-LFTNBGM5.js";
import {
  Host,
  defaultConfig,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage
} from "./chunk-55A3BFCU.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-ended-screen.entry.js
var dyteEndedScreenCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{height:100%;width:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none;display:flex;flex-direction:column;align-items:center;justify-content:center}.ctr{display:flex;flex-direction:column;align-items:center;gap:var(--dyte-space-8, 32px)}dyte-logo.loaded{height:var(--dyte-space-12, 48px)}.rejoin-button{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);padding-top:var(--dyte-space-6, 24px);padding-bottom:var(--dyte-space-6, 24px);padding-left:var(--dyte-space-16, 64px);padding-right:var(--dyte-space-16, 64px)}.rejoin-icon{margin-right:var(--dyte-space-2, 8px)}p{font-size:16px;border-radius:var(--dyte-border-radius-lg, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));padding-left:var(--dyte-space-8, 32px);padding-right:var(--dyte-space-8, 32px);padding-top:var(--dyte-space-4, 16px);padding-bottom:var(--dyte-space-4, 16px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}p.breakout{font-size:20px;display:flex;flex-direction:column;align-items:center}p.breakout span{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-0, 0px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}span{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);font-size:14px}";
var DyteEndedScreenStyle0 = dyteEndedScreenCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteEndedScreen = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.config = defaultConfig;
    this.icon = defaultIconPack;
    this.t = useLanguage();
    this.iconPack = defaultIconPack;
    this.message = "";
  }
  connectedCallback() {
    this.statesChanged(this.states);
  }
  getBreakoutRoomsMessage(states) {
    var _a;
    let message;
    if ((states === null || states === void 0 ? void 0 : states.roomLeftState) === "connected-meeting") {
      if (((_a = this.states.activeBreakoutRoomsManager) === null || _a === void 0 ? void 0 : _a.destinationMeetingId) === this.meeting.connectedMeetings.parentMeeting.id) {
        message = "breakout_rooms.move_reason.switch_main_room";
      } else {
        message = "breakout_rooms.move_reason.switch_room";
      }
    }
    return message;
  }
  statesChanged(states) {
    if (states != null) {
      switch (states === null || states === void 0 ? void 0 : states.roomLeftState) {
        case "left":
          this.message = "ended.left";
          break;
        case "kicked":
          this.message = "ended.kicked";
          break;
        case "disconnected":
          this.message = "ended.disconnected";
          break;
        case "rejected":
          this.message = "ended.rejected";
          break;
        case "connected-meeting":
          this.message = this.getBreakoutRoomsMessage(states);
          break;
        case "unauthorized":
          this.message = "ended.unauthorized";
          break;
        default:
          this.message = "ended";
      }
    }
  }
  renderBreakoutRoomScreen() {
    return h(Host, null, h("div", { class: "ctr", part: "container" }, h("dyte-icon", { icon: this.iconPack.breakout_rooms }), h("p", { part: "message", class: "breakout" }, this.t(this.message))));
  }
  render() {
    const states = this.states;
    if (states.roomLeftState === "connected-meeting") {
      return this.renderBreakoutRoomScreen();
    }
    return h(Host, null, h("div", { class: "ctr", part: "container" }, h("dyte-logo", { meeting: this.meeting, config: this.config, part: "logo", t: this.t }), h("p", { part: "message" }, this.t(this.message)), (states === null || states === void 0 ? void 0 : states.roomLeftState) === "disconnected" && h("span", { part: "description" }, this.t("ended.network"))));
  }
  static get watchers() {
    return {
      "states": ["statesChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteEndedScreen.prototype, "size", void 0);
__decorate([
  SyncWithStore()
], DyteEndedScreen.prototype, "states", void 0);
__decorate([
  SyncWithStore()
], DyteEndedScreen.prototype, "t", void 0);
__decorate([
  SyncWithStore()
], DyteEndedScreen.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DyteEndedScreen.prototype, "meeting", void 0);
DyteEndedScreen.style = DyteEndedScreenStyle0;
export {
  DyteEndedScreen as dyte_ended_screen
};
//# sourceMappingURL=dyte-ended-screen.entry-S6OCLUEG.js.map
