import {
  Stack,
  baseAssignValue,
  cloneBuffer,
  cloneTypedArray,
  copyArray,
  copyObject,
  defineProperty$1,
  eq,
  getPrototype$1,
  initCloneObject,
  isArguments$1,
  isArray$1,
  isArrayLike,
  isBuffer$1,
  isFunction,
  isIndex,
  isTypedArray$1,
  keysIn
} from "./chunk-HWMB33MY.js";
import {
  baseGetTag,
  isObject,
  isObjectLike
} from "./chunk-EZQDJRA5.js";
import {
  defaultConfig,
  isLiveStreamHost
} from "./chunk-55A3BFCU.js";

// node_modules/@dytesdk/ui-kit/dist/esm/config-12515769.js
var spacingScale = [
  0,
  0.5,
  1,
  1.5,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  12,
  14,
  16,
  20,
  24,
  28,
  32,
  36,
  40,
  44,
  48,
  52,
  56,
  60,
  64,
  72,
  80,
  96
];
var THEMES = {
  darkest: {
    background: {
      1e3: "#080808",
      900: "#1A1A1A",
      800: "#1E1E1E",
      700: "#2C2C2C",
      600: "#393939"
    },
    text: "#FFFFFF"
  },
  dark: {
    background: {
      1e3: "#252525",
      900: "#2F2F2F",
      800: "#323232",
      700: "#3E3E3E",
      600: "#4A4A4A"
    },
    text: "#F5F5F5",
    "video-bg": "#1C1C1C"
  },
  light: {
    background: {
      1e3: "#FFFFFF",
      900: "#F5F5F5",
      800: "#EBEBEB",
      700: "#E0E0E0",
      600: "#D6D6D6"
    },
    text: "#111111",
    "text-on-brand": "#ffffff",
    "video-bg": "#DADADA"
  }
};
var BORDER_WIDTHS = {
  none: {
    none: 0,
    sm: 0,
    md: 0,
    lg: 0
  },
  thin: {
    none: 0,
    sm: 1,
    md: 2,
    lg: 4
  },
  fat: {
    none: 0,
    sm: 2,
    md: 4,
    lg: 8
  }
};
var BORDER_RADII = {
  sharp: {
    none: 0,
    sm: 0,
    md: 0,
    lg: 0
  },
  rounded: {
    none: 0,
    sm: 4,
    md: 8,
    lg: 12
  },
  "extra-rounded": {
    none: 0,
    sm: 8,
    md: 16,
    lg: 24
  },
  circular: {
    none: 9999,
    sm: 9999,
    md: 9999,
    lg: 9999
  }
};
function hexToRGB(h) {
  h = h.trim();
  let r = "0", g = "0", b = "0";
  if (h.length == 4) {
    r = "0x" + h[1] + h[1];
    g = "0x" + h[2] + h[2];
    b = "0x" + h[3] + h[3];
  } else if (h.length > 6) {
    r = "0x" + h[1] + h[2];
    g = "0x" + h[3] + h[4];
    b = "0x" + h[5] + h[6];
  }
  return [+r, +g, +b];
}
var isValidHexColor = (color) => {
  return typeof color === "string" && color.length === 7 && color.startsWith("#");
};
var DEFAULT_CSS_TOKEN_PREFIX = "--dyte-";
function getToken(token, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) {
  return tokenPrefix + token;
}
var provideGoogleFont = (fontFamily) => {
  const weights = [400, 500, 700];
  const links = [];
  if (document.querySelector("link[data-dyte-font]") == null) {
    const p1 = document.createElement("link");
    p1.rel = "preconnect";
    p1.setAttribute("data-dyte-font", "true");
    p1.href = "https://fonts.googleapis.com";
    const p2 = p1.cloneNode(true);
    p2.href = "https://fonts.gstatic.com";
    p2.crossOrigin = "";
    links.push(p1, p2);
  }
  const link = document.createElement("link");
  link.rel = "stylesheet";
  link.setAttribute("data-dyte-font", fontFamily);
  link.href = encodeURI(`https://fonts.googleapis.com/css2?family=${fontFamily}:wght@${weights.join(";")}&display=swap`);
  links.push(link);
  document.head.append(...links);
};
var provideSpacing = (el, spacingBase, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) => {
  spacingScale.forEach((space) => {
    el.style.setProperty(getToken(`space-${space}`, tokenPrefix), `${space * spacingBase}px`);
  });
};
var provideBorderWidth = (el, borderWidth, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) => {
  if (borderWidth in BORDER_WIDTHS) {
    const widths = BORDER_WIDTHS[borderWidth];
    Object.keys(widths).forEach((type) => {
      el.style.setProperty(getToken(`border-width-${type}`, tokenPrefix), `${widths[type]}px`);
    });
  }
};
var provideBorderRadius = (el, borderRadius, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) => {
  if (borderRadius in BORDER_RADII) {
    const radii = BORDER_RADII[borderRadius];
    Object.keys(radii).forEach((type) => {
      el.style.setProperty(getToken(`border-radius-${type}`, tokenPrefix), `${radii[type]}px`);
    });
  }
};
var provideColors = (el, colors, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) => {
  Object.keys(colors).forEach((color) => {
    const colorValue = colors[color];
    if (typeof colorValue === "string") {
      if (color === "text" || color === "text-on-brand") {
        const rgb = hexToRGB(colorValue).join(" ");
        el.style.setProperty(getToken(`colors-${color}-1000`, tokenPrefix), `${rgb}`);
        el.style.setProperty(getToken(`colors-${color}-900`, tokenPrefix), `${rgb} / 0.88`);
        el.style.setProperty(getToken(`colors-${color}-800`, tokenPrefix), `${rgb} / 0.76`);
        el.style.setProperty(getToken(`colors-${color}-700`, tokenPrefix), `${rgb} / 0.64`);
        el.style.setProperty(getToken(`colors-${color}-600`, tokenPrefix), `${rgb} / 0.52`);
      } else {
        const rgb = hexToRGB(colorValue).join(" ");
        el.style.setProperty(getToken(`colors-${color}`, tokenPrefix), rgb);
      }
    } else if (typeof colorValue === "object") {
      Object.keys(colorValue).forEach((shade) => {
        const shadeValue = colorValue[shade];
        const rgb = hexToRGB(shadeValue).join(" ");
        el.style.setProperty(getToken(`colors-${color}-${shade}`, tokenPrefix), rgb);
      });
    }
  });
};
var provideDyteDesignSystem = (el, { spacingBase, borderRadius, borderWidth, colors, fontFamily, googleFont, theme, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX }) => {
  if (typeof el !== "object") {
    throw new Error("[dyte-ui-kit] (provideDyteDesignSystem): Passed element is not a valid HTML Element");
  }
  if (typeof googleFont === "string") {
    provideGoogleFont(googleFont);
    el.style.setProperty(getToken("font-family", tokenPrefix), googleFont);
  }
  if (typeof fontFamily === "string") {
    el.style.setProperty(getToken("font-family", tokenPrefix), fontFamily);
  }
  if (typeof spacingBase === "number") {
    provideSpacing(el, spacingBase, tokenPrefix);
  }
  if (typeof borderWidth === "string") {
    provideBorderWidth(el, borderWidth, tokenPrefix);
  }
  if (typeof borderRadius === "string") {
    provideBorderRadius(el, borderRadius, tokenPrefix);
  }
  if (typeof theme === "string") {
    const colors2 = THEMES[theme];
    if (colors2 != null)
      provideColors(el, colors2, tokenPrefix);
  }
  if (typeof colors === "object") {
    provideColors(el, colors, tokenPrefix);
  }
};
function assignMergeValue(object, key, value) {
  if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}
var baseFor = createBaseFor();
var baseFor$1 = baseFor;
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}
var objectTag = "[object Object]";
var funcProto = Function.prototype;
var objectProto = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty = objectProto.hasOwnProperty;
var objectCtorString = funcToString.call(Object);
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype$1(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
function safeGet(object, key) {
  if (key === "constructor" && typeof object[key] === "function") {
    return;
  }
  if (key == "__proto__") {
    return;
  }
  return object[key];
}
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
  var isCommon = newValue === void 0;
  if (isCommon) {
    var isArr = isArray$1(srcValue), isBuff = !isArr && isBuffer$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$1(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject(srcValue) || isArguments$1(srcValue)) {
      newValue = objValue;
      if (isArguments$1(objValue)) {
        newValue = toPlainObject(objValue);
      } else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    } else {
      isCommon = false;
    }
  }
  if (isCommon) {
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack["delete"](srcValue);
  }
  assignMergeValue(object, key, newValue);
}
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor$1(source, function(srcValue, key) {
    stack || (stack = new Stack());
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
      if (newValue === void 0) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}
function identity(value) {
  return value;
}
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var nativeMax = Math.max;
function overRest(func, start, transform) {
  start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}
function constant(value) {
  return function() {
    return value;
  };
}
var baseSetToString = !defineProperty$1 ? identity : function(func, string) {
  return defineProperty$1(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string),
    "writable": true
  });
};
var baseSetToString$1 = baseSetToString;
var HOT_COUNT = 800;
var HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var setToString = shortOut(baseSetToString$1);
var setToString$1 = setToString;
function baseRest(func, start) {
  return setToString$1(overRest(func, start, identity), func + "");
}
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
    return eq(object[index], value);
  }
  return false;
}
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
    customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? void 0 : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});
var deepMerge = merge;
var extendConfig = (config, baseConfig = defaultConfig) => {
  let newConfig = Object.assign({}, baseConfig);
  deepMerge(newConfig, config);
  return newConfig;
};
var generateConfig = (oldConfig, meeting, toExtend = {}, options = { grid_pagination: true, settings_toggle: true }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
  const data = { showSetupScreen: true };
  let logo;
  let meetingElements = ["dyte-stage"];
  let headerChildren = {}, controlBarChildren = {};
  const showSettingsToggle = (options === null || options === void 0 ? void 0 : options.settings_toggle) !== false;
  const showGridPagination = (options === null || options === void 0 ? void 0 : options.grid_pagination) !== false;
  if ((_a = oldConfig.controlBar) === null || _a === void 0 ? void 0 : _a.isEnabled) {
    meetingElements.push("dyte-controlbar");
    const { elements } = oldConfig.controlBar;
    const leftElements = [
      ...elements.fullscreen ? ["dyte-fullscreen-toggle"] : [],
      ...showSettingsToggle ? ["dyte-settings-toggle"] : []
    ];
    const rightElements = [];
    const moreElements = [];
    if (((_b = meeting.participants.pip) === null || _b === void 0 ? void 0 : _b.isSupported()) && ((_d = (_c = meeting.self) === null || _c === void 0 ? void 0 : _c.config) === null || _d === void 0 ? void 0 : _d.pipMode) && ((_e = meeting.self.config) === null || _e === void 0 ? void 0 : _e.viewType) !== "LIVESTREAM") {
      moreElements.push("dyte-pip-toggle");
    }
    if (meeting === null || meeting === void 0 ? void 0 : meeting.self.permissions.canDisableParticipantAudio) {
      moreElements.push("dyte-mute-all-button");
    }
    moreElements.push("dyte-breakout-rooms-toggle");
    if ((_f = meeting.self) === null || _f === void 0 ? void 0 : _f.permissions.canRecord) {
      moreElements.push("dyte-recording-toggle");
    }
    if ((_g = meeting.self.permissions.transcriptionEnabled) !== null && _g !== void 0 ? _g : false) {
      moreElements.push("dyte-caption-toggle");
    }
    if (navigator.product !== "ReactNative")
      moreElements.push("dyte-debugger-toggle");
    if (isLiveStreamHost(meeting)) {
      leftElements.push("dyte-livestream-toggle");
    }
    if (elements.screenshare) {
      leftElements.push("dyte-screen-share-toggle");
    }
    if (elements.chat) {
      rightElements.push("dyte-chat-toggle");
    }
    if (elements.polls) {
      rightElements.push("dyte-polls-toggle");
    }
    if (elements.participants) {
      rightElements.push("dyte-participants-toggle");
    }
    if (elements.plugins) {
      rightElements.push("dyte-plugins-toggle");
    }
    rightElements.push("dyte-ai-toggle");
    const centerElements = [
      "dyte-mic-toggle",
      "dyte-camera-toggle",
      "dyte-stage-toggle",
      "dyte-leave-button"
    ];
    if (moreElements.length > 0)
      centerElements.push("dyte-more-toggle");
    const allSideElements = leftElements.concat(rightElements).concat(moreElements);
    let hasMobileDrawer = false;
    if (allSideElements.length > 0) {
      hasMobileDrawer = true;
    }
    controlBarChildren = {
      "dyte-controlbar": {
        states: ["activeMoreMenu"],
        children: ["div#controlbar-left", "div#controlbar-center", "div#controlbar-right"]
      },
      "div#controlbar-left": leftElements,
      "div#controlbar-center": centerElements,
      "div#controlbar-right": rightElements,
      "dyte-more-toggle": {
        states: ["activeMoreMenu"],
        children: []
      },
      "dyte-more-toggle.activeMoreMenu": moreElements.map((el) => [
        el,
        { variant: "horizontal", slot: "more-elements" }
      ]),
      "dyte-controlbar.sm": ["div#controlbar-mobile"],
      "dyte-controlbar.md": ["div#controlbar-mobile"],
      "dyte-more-toggle.activeMoreMenu.md": allSideElements.map((el) => [
        el,
        { variant: "horizontal", slot: "more-elements" }
      ]),
      "dyte-more-toggle.activeMoreMenu.sm": allSideElements.map((el) => [
        el,
        { variant: "horizontal", slot: "more-elements" }
      ]),
      "div#controlbar-mobile": [
        "dyte-mic-toggle",
        "dyte-camera-toggle",
        "dyte-stage-toggle",
        ...[hasMobileDrawer && "dyte-more-toggle"],
        "dyte-leave-button"
      ]
    };
  }
  if ((_h = oldConfig.header) === null || _h === void 0 ? void 0 : _h.isEnabled) {
    meetingElements.unshift("dyte-header");
    const { elements } = oldConfig.header;
    let leftElements = ["dyte-recording-indicator", "dyte-livestream-indicator"], centerElements = [], rightElements = [];
    if (showGridPagination) {
      rightElements.push("dyte-grid-pagination");
    }
    if (elements.title) {
      centerElements.push("dyte-meeting-title");
    }
    if (typeof elements.logo === "string" && elements.logo.length > 0) {
      logo = elements.logo;
      leftElements.unshift("dyte-logo");
    }
    if (elements.participantCount) {
      rightElements.push("dyte-participant-count", "dyte-viewer-count");
    }
    if (elements.timer) {
      rightElements.push("dyte-clock");
    }
    headerChildren = {
      "dyte-header": ["div#header-left", "div#header-center", "div#header-right"],
      "dyte-header.sm": { remove: ["div#header-center"] },
      "div#header-left": leftElements,
      "div#header-center": centerElements,
      "div#header-right": rightElements,
      "div#header-left.sm": {
        remove: ["dyte-logo"],
        prepend: ["dyte-meeting-title"]
      }
    };
  }
  meetingElements.push("dyte-participants-audio", "dyte-dialog-manager");
  let designTokens = {
    logo
  };
  designTokens = oldConfig.designTokens;
  if (isValidHexColor((_k = (_j = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _j === void 0 ? void 0 : _j.colors) === null || _k === void 0 ? void 0 : _k.textOnBrand)) {
    designTokens.colors["text-on-brand"] = (_m = (_l = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _l === void 0 ? void 0 : _l.colors) === null || _m === void 0 ? void 0 : _m.textOnBrand;
  }
  if (isValidHexColor((_p = (_o = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _o === void 0 ? void 0 : _o.colors) === null || _p === void 0 ? void 0 : _p.videoBg)) {
    designTokens.colors["video-bg"] = (_r = (_q = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _q === void 0 ? void 0 : _q.colors) === null || _r === void 0 ? void 0 : _r.videoBg;
  }
  let config = {
    designTokens,
    styles: {
      "dyte-header": {
        display: "grid",
        height: "48px",
        gridTemplateColumns: "repeat(3, 1fr)",
        gridTemplateRows: "1fr",
        alignItems: "center"
      },
      "dyte-header.sm": {
        display: "grid",
        gridArea: "header",
        gridTemplateColumns: "repeat(2, 1fr)",
        gridTemplateRows: "1fr",
        alignItems: "center"
      },
      "div#header-left": {
        display: "flex",
        alignItems: "center",
        height: "48px",
        wordBreak: "break-all"
      },
      "dyte-logo": {
        height: "26px"
      },
      "div#header-center": {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        wordBreak: "break-all"
      },
      "div#header-right": {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end"
      },
      "dyte-stage": {
        display: "flex",
        flex: "1"
      },
      "dyte-grid": {
        flex: "1",
        height: "auto"
      },
      "dyte-controlbar": {
        display: "grid",
        gridTemplateColumns: "repeat(3,1fr)",
        gridTemplateRows: "1fr",
        alignItems: "center",
        padding: "8px"
      },
      "dyte-controlbar.sm": {
        display: "flex",
        position: "relative",
        backgroundColor: "var(--dyte-colors-background-1000, #000)"
      },
      "dyte-controlbar.md": {
        display: "flex",
        position: "relative",
        backgroundColor: "var(--dyte-colors-background-1000, #000)"
      },
      "div#controlbar-left": {
        display: "flex",
        alignItems: "center",
        gap: "var(--dyte-space-1, 4px)"
      },
      "div#controlbar-center": {
        display: "flex",
        alignItems: "center",
        position: "relative",
        overflow: "visible",
        justifyContent: "center",
        gap: "var(--dyte-space-1, 4px)"
      },
      "div#controlbar-mobile": {
        display: "flex",
        flex: "1",
        alignItems: "center",
        justifyContent: "center",
        zIndex: "10000",
        gap: "var(--dyte-space-1, 4px)"
      },
      "div#controlbar-right": {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end",
        gap: "var(--dyte-space-1, 4px)"
      },
      "dyte-settings": {
        width: "720px",
        height: "480px"
      },
      "dyte-debugger": {
        width: "720px",
        height: "480px"
      },
      "div#setupcontrols-indicator": {
        position: "absolute",
        bottom: "12px",
        left: "12px",
        display: "flex",
        gap: "6px",
        background: "rgb(var(--dyte-colors-background-800, 0 0 0))",
        borderRadius: "100%"
      },
      "div#setupcontrols-media": {
        position: "absolute",
        bottom: "8px",
        right: "8px",
        display: "flex",
        gap: "6px"
      },
      "div#setupcontrols-settings": {
        position: "absolute",
        top: "8px",
        right: "8px",
        display: "flex",
        flexDirection: "column",
        gap: "6px"
      },
      "dyte-meeting-title.sm": {
        marginLeft: "0"
      },
      "dyte-clock": {
        marginRight: "0"
      }
    },
    root: Object.assign(Object.assign(Object.assign({ "dyte-meeting": {
      // if using key value pair, provide the key in `state`
      // else provide array of states in `states`
      state: "meeting",
      states: ["activeSidebar", "activeAI"]
    }, "dyte-meeting[meeting=idle]": ["dyte-idle-screen"], "dyte-meeting[meeting=waiting]": ["dyte-waiting-screen"], "dyte-meeting[meeting=setup]": ["dyte-setup-screen", "dyte-dialog-manager"], "dyte-meeting[meeting=joined]": meetingElements, "dyte-meeting[meeting=joined].activeSidebar.sm": {
      add: [["dyte-sidebar", { view: "full-screen" }]]
    }, "dyte-meeting[meeting=joined].activeSidebar.md": {
      add: [["dyte-sidebar", { view: "full-screen" }]]
    }, "dyte-meeting[meeting=joined].activeAI.sm": {
      add: [["dyte-ai", { view: "full-screen" }]]
    }, "dyte-meeting[meeting=joined].activeAI.md": {
      add: [["dyte-ai", { view: "full-screen" }]]
    }, "dyte-meeting[meeting=ended]": ["dyte-ended-screen"] }, headerChildren), controlBarChildren), {
      "dyte-stage": {
        states: ["activeSidebar", "activeAI"],
        children: ["dyte-grid", "dyte-notifications", "dyte-transcripts"]
      },
      "dyte-stage.activeSidebar": {
        add: [["dyte-sidebar", { view: "sidebar" }]]
      },
      // hide sidebar for smaller screens
      "dyte-stage.activeSidebar.sm": { remove: ["dyte-sidebar"] },
      "dyte-stage.activeAI": {
        add: [["dyte-ai", { view: "sidebar" }]]
      },
      // hide sidebar for smaller screens
      "dyte-stage.activeAI.sm": { remove: ["dyte-ai"] },
      "dyte-grid": {
        states: ["activeScreenShare", "activePlugin", "activeSpotlight"],
        state: "viewType",
        children: ["dyte-simple-grid"]
      },
      "dyte-grid[viewType=AUDIO_ROOM]": ["dyte-audio-grid"],
      "dyte-grid[viewType=AUDIO_ROOM].activePlugin": ["dyte-mixed-grid"],
      "dyte-grid[viewType=AUDIO_ROOM].activeScreenshare": ["dyte-mixed-grid"],
      "dyte-grid[viewType=AUDIO_ROOM].activeScreenShare.activeSpotlight": ["dyte-mixed-grid"],
      "dyte-grid[viewType=AUDIO_ROOM].activePlugin.activeSpotlight": ["dyte-mixed-grid"],
      "dyte-grid[viewType=AUDIO_ROOM].activePlugin.activeScreenShare.activeSpotlight": [
        "dyte-mixed-grid"
      ],
      "dyte-grid.activeSpotlight": ["dyte-spotlight-grid"],
      "dyte-grid.activeScreenShare": ["dyte-mixed-grid"],
      "dyte-grid.activePlugin": ["dyte-mixed-grid"],
      "dyte-grid.activeScreenShare.activeSpotlight": ["dyte-mixed-grid"],
      "dyte-grid.activePlugin.activeSpotlight": ["dyte-mixed-grid"],
      "dyte-grid.activePlugin.activeScreenShare.activeSpotlight": ["dyte-mixed-grid"],
      "dyte-mixed-grid": {
        states: ["activeSpotlight"],
        state: "viewType",
        children: ["dyte-simple-grid"]
      },
      "dyte-mixed-grid[viewType=AUDIO_ROOM]": ["dyte-audio-grid"],
      "dyte-mixed-grid.activeSpotlight": ["dyte-spotlight-grid"],
      "dyte-participant-tile": {
        state: "meeting",
        children: ["dyte-name-tag", "dyte-avatar", "dyte-network-indicator"]
      },
      "dyte-participant-setup": ["dyte-avatar", "div#setupcontrols-media"],
      "dyte-participant-tile[meeting=setup]": [
        "dyte-avatar",
        "div#setupcontrols-indicator",
        "div#setupcontrols-media",
        ...showSettingsToggle ? ["div#setupcontrols-settings"] : []
      ],
      "div#setupcontrols-indicator": [
        ["dyte-audio-visualizer", { slot: "start", hideMuted: true }]
      ],
      "div#setupcontrols-media": [
        ["dyte-mic-toggle", { size: "sm" }],
        ["dyte-camera-toggle", { size: "sm" }]
      ],
      "div#setupcontrols-settings": [["dyte-settings-toggle", { size: "sm" }]],
      "dyte-screenshare-view": ["dyte-name-tag", "dyte-network-indicator"],
      "dyte-name-tag": [["dyte-audio-visualizer", { slot: "start" }]]
    }),
    config: {
      notification_sounds: {
        participant_left: false
      },
      participant_joined_sound_notification_limit: 3,
      participant_chat_message_sound_notification_limit: 10,
      videoFit: "cover"
    }
  };
  config = extendConfig(toExtend, config);
  data.showSetupScreen = (_t = (_s = oldConfig.setupScreen) === null || _s === void 0 ? void 0 : _s.isEnabled) !== null && _t !== void 0 ? _t : true;
  return { config, data };
};

export {
  provideDyteDesignSystem,
  deepMerge,
  extendConfig,
  generateConfig
};
//# sourceMappingURL=chunk-XOFLUPWT.js.map
