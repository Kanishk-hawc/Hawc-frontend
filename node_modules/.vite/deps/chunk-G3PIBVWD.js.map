{
  "version": 3,
  "sources": ["../../@dytesdk/ui-kit/dist/esm/string-ed1380fb.js"],
  "sourcesContent": ["/**\n * Shorten a string upto a maximum length of characters and add `...` as suffix if it exceeds the maximum length\n * @param str The The string you want to shorten\n * @param maxLength Maximum length of character\n * @returns Formatted shortedned string\n */\nconst shorten = (str, maxLength = 20) => {\n    if (str == null)\n        return '';\n    if (str.length > maxLength) {\n        return `${str.substring(0, maxLength)}...`;\n    }\n    return str;\n};\n/**\n * Checks if a given string consists of only emojis.\n *\n * However this classifies a string with numbers as emoji as well.\n * Which works in our favour for now in chat as it enlarges messages with just numbers.\n * @param str String on which to perform the check on\n * @returns A Boolean value which indicates if string consists of only emojis\n */\nconst hasOnlyEmojis = (str) => {\n    const num = /^\\d+$/;\n    const re = /^\\p{Emoji}+$/u;\n    return re.test(str) && !num.test(str);\n};\nconst sanitizeLink = (link) => {\n    // TODO: needs more work\n    if (link === null || link === void 0 ? void 0 : link.trim().toLowerCase().startsWith('javascript:')) {\n        return 'https://dyte.io';\n    }\n    return link;\n};\n/**\n * Formats a given name and returns **Participant** for unnamed participants.\n * @param name Name of participant\n * @returns Name to use in the UI\n */\nconst formatName = (name) => {\n    name = name === null || name === void 0 ? void 0 : name.trim();\n    if (name === '')\n        return 'Participant';\n    return name;\n};\nconst whiteSpace = new RegExp(/[^\\u00BF-\\u1FFF\\u2C00-\\uD7FF\\w\\s]/, 'g');\nconst space = new RegExp(/\\s+/);\nfunction getInitials(name, maxInitials = 2) {\n    // removes any character that is not a letter, number or whitespace\n    const cleanedName = name.replace(whiteSpace, '');\n    const words = cleanedName.trim().split(space).slice(0, maxInitials);\n    return words\n        .map((word) => word.charAt(0))\n        .join('')\n        .toUpperCase();\n}\n\nexport { sanitizeLink as a, formatName as f, getInitials as g, hasOnlyEmojis as h, shorten as s };\n"],
  "mappings": ";AAMA,IAAM,UAAU,CAAC,KAAK,YAAY,OAAO;AACrC,MAAI,OAAO;AACP,WAAO;AACX,MAAI,IAAI,SAAS,WAAW;AACxB,WAAO,GAAG,IAAI,UAAU,GAAG,SAAS,CAAC;AAAA,EACzC;AACA,SAAO;AACX;AASA,IAAM,gBAAgB,CAAC,QAAQ;AAC3B,QAAM,MAAM;AACZ,QAAM,KAAK,WAAC,iBAAa,GAAC;AAC1B,SAAO,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,KAAK,GAAG;AACxC;AACA,IAAM,eAAe,CAAC,SAAS;AAE3B,MAAI,SAAS,QAAQ,SAAS,SAAS,SAAS,KAAK,KAAK,EAAE,YAAY,EAAE,WAAW,aAAa,GAAG;AACjG,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAMA,IAAM,aAAa,CAAC,SAAS;AACzB,SAAO,SAAS,QAAQ,SAAS,SAAS,SAAS,KAAK,KAAK;AAC7D,MAAI,SAAS;AACT,WAAO;AACX,SAAO;AACX;AACA,IAAM,aAAa,IAAI,OAAO,qCAAqC,GAAG;AACtE,IAAM,QAAQ,IAAI,OAAO,KAAK;AAC9B,SAAS,YAAY,MAAM,cAAc,GAAG;AAExC,QAAM,cAAc,KAAK,QAAQ,YAAY,EAAE;AAC/C,QAAM,QAAQ,YAAY,KAAK,EAAE,MAAM,KAAK,EAAE,MAAM,GAAG,WAAW;AAClE,SAAO,MACF,IAAI,CAAC,SAAS,KAAK,OAAO,CAAC,CAAC,EAC5B,KAAK,EAAE,EACP,YAAY;AACrB;",
  "names": []
}
