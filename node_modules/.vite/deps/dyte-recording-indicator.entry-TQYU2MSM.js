import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import {
  Host,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-recording-indicator.entry.js
var dyteRecordingIndicatorCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);display:block}:host[size='sm']{margin-left:var(--dyte-space-1, 4px);margin-right:var(--dyte-space-1, 4px)}.indicator{display:flex;flex-direction:row;align-items:center;font-size:14px;--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}dyte-icon{margin-right:var(--dyte-space-1, 4px);height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);animation:blink 4s linear infinite}:host([size='sm']) dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}:host([size='sm']) .indicator span{display:none}@keyframes blink{0%,10%{opacity:0}11%,100%{opacity:1}}";
var DyteRecordingIndicatorStyle0 = dyteRecordingIndicatorCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteRecordingIndicator = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.t = useLanguage();
    this.iconPack = defaultIconPack;
    this.setIsRecording = (recordingState) => {
      this.isRecording = recordingState === "RECORDING";
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.recording.removeListener("recordingUpdate", this.updateRecordingStatus);
  }
  meetingChanged(meeting) {
    if (meeting != null) {
      this.setIsRecording(meeting.recording.recordingState);
      this.updateRecordingStatus = (recordingState) => {
        this.setIsRecording(recordingState);
      };
      meeting.recording.addListener("recordingUpdate", this.updateRecordingStatus);
    }
  }
  render() {
    return h(Host, { key: "b08cb38ca93d2db33679ac266e18063c4a2756cf" }, this.isRecording && h("div", { key: "5ba29ae19d2b338f32ec07ec2ef2662c61a7b5f9", class: "indicator", "aria-label": this.t("recording.indicator"), part: "indicator" }, h("dyte-icon", { key: "d2309f97e7e6f8d3f6cb62e4766b69993e32d803", icon: this.iconPack.recording, "aria-hidden": true, tabIndex: -1, part: "icon" }), h("span", { key: "e8ddc6b7188df3f44ae0e6f3be0cdf0176cc8ebd" }, this.t("recording.label"))));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteRecordingIndicator.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DyteRecordingIndicator.prototype, "size", void 0);
__decorate([
  SyncWithStore()
], DyteRecordingIndicator.prototype, "t", void 0);
__decorate([
  SyncWithStore()
], DyteRecordingIndicator.prototype, "iconPack", void 0);
DyteRecordingIndicator.style = DyteRecordingIndicatorStyle0;
export {
  DyteRecordingIndicator as dyte_recording_indicator
};
//# sourceMappingURL=dyte-recording-indicator.entry-TQYU2MSM.js.map
