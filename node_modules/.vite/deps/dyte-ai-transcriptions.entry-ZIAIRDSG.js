import {
  clone
} from "./chunk-N3RLKLVD.js";
import {
  ChatHead
} from "./chunk-NIJZUVJX.js";
import {
  smoothScrollToBottom
} from "./chunk-4TVM64J3.js";
import "./chunk-G3PIBVWD.js";
import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import "./chunk-HWMB33MY.js";
import "./chunk-EZQDJRA5.js";
import {
  Host,
  h,
  registerInstance,
  useLanguage
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-ai-transcriptions.entry.js
var dyteAiTranscriptionsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.head{display:flex;align-items:center}.head .name{margin-right:var(--dyte-space-4, 16px);font-size:12px;font-weight:700}.head .time{font-size:12px;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}*{box-sizing:border-box;border-width:0;border-style:solid}:host{width:100%;display:flex;flex-direction:column}.processing{display:flex;flex:1 1 0%;flex-direction:column;align-items:center;justify-content:center}.content{box-sizing:border-box;display:flex;flex-direction:column;padding:var(--dyte-space-3, 12px);flex:1 0 0px;overflow-y:scroll}.started-message{margin-top:var(--dyte-space-5, 20px);margin-bottom:var(--dyte-space-5, 20px);text-align:center;font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.search-bar{height:var(--dyte-space-14, 56px);width:100%;border-bottom-width:var(--dyte-border-width-sm, 1px);--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity));padding:var(--dyte-space-3, 12px)}input{height:100%;width:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);font-size:14px;border-radius:var(--dyte-border-radius-sm, 4px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.caption-view{height:var(--dyte-space-12, 48px);width:100%;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);border-bottom-width:var(--dyte-border-width-sm, 1px);border-style:solid;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity));display:flex;align-items:center;justify-content:space-between;font-size:14px}.message .body{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);font-size:14px;word-break:break-word}.message{margin-bottom:var(--dyte-space-3, 12px)}.message:last-child{margin-bottom:var(--dyte-space-0, 0px)}";
var DyteAiTranscriptionsStyle0 = dyteAiTranscriptionsCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteAiTranscriptions = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.participantQuery = "";
    this.isProcessing = false;
    this.t = useLanguage();
    this.transcriptions = [];
    this.autoScrollEnabled = true;
    this.onScroll = (e) => {
      const { scrollTop, clientHeight, scrollHeight } = e.target;
      const fromTop = scrollTop + clientHeight;
      if (fromTop + 10 >= scrollHeight) {
        this.autoScrollEnabled = true;
      } else {
        this.autoScrollEnabled = false;
      }
    };
    this.onTranscriptHandler = (data) => {
      this.transcriptions = this.transcriptionsReducer(this.transcriptions, data);
    };
  }
  // private transcriptionHandler(data: Transcript) {
  //   this.transcriptions = [...this.transcriptions, data];
  // }
  transcriptionsReducer(acc, t) {
    if (!acc.length || acc[acc.length - 1].peerId !== t.peerId) {
      return acc.concat(t);
    }
    const lastElement = acc[acc.length - 1];
    if (lastElement.id === t.id) {
      lastElement.transcript = t.transcript;
      acc.pop();
      return acc.concat(lastElement);
    }
    return acc.concat(t);
  }
  connectedCallback() {
    if (!this.meeting)
      return;
    this.meetingChanged(this.meeting);
  }
  componentDidLoad() {
    var _a;
    (_a = this.contentContainer) === null || _a === void 0 ? void 0 : _a.addEventListener("scroll", this.onScroll);
  }
  disconnectedCallback() {
    var _a, _b, _c;
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.ai) === null || _b === void 0 ? void 0 : _b.off("transcript", this.onTranscriptHandler);
    (_c = this.contentContainer) === null || _c === void 0 ? void 0 : _c.removeEventListener("scroll", this.onScroll);
  }
  meetingChanged(meeting) {
    var _a, _b;
    this.transcriptions = clone((_a = meeting === null || meeting === void 0 ? void 0 : meeting.ai) === null || _a === void 0 ? void 0 : _a.transcripts);
    this.transcriptions = this.transcriptions.reduce(this.transcriptionsReducer, []);
    (_b = meeting === null || meeting === void 0 ? void 0 : meeting.ai) === null || _b === void 0 ? void 0 : _b.on("transcript", this.onTranscriptHandler);
  }
  transcriptionsChanged() {
    if (this.autoScrollEnabled) {
      setTimeout(() => {
        smoothScrollToBottom(this.contentContainer, false);
      }, 100);
    }
  }
  renderTranscripts() {
    const transcripts = this.transcriptions.filter((t) => this.participantQuery ? t.name.toLowerCase().includes(this.participantQuery.toLowerCase()) : true);
    const renderedTranscripts = [];
    transcripts.forEach((transcript) => {
      const t = {
        name: transcript.name,
        date: transcript.date,
        peerId: transcript.peerId,
        transcript: transcript.transcript
      };
      if (!renderedTranscripts.length) {
        renderedTranscripts.push(t);
        return;
      }
      const lastTranscript = renderedTranscripts[renderedTranscripts.length - 1];
      if (transcript.peerId !== lastTranscript.peerId) {
        renderedTranscripts.push(t);
        return;
      }
      lastTranscript.transcript += " " + transcript.transcript;
    });
    return renderedTranscripts.map((transcription) => {
      return h("div", { class: "message" }, h(ChatHead, { name: transcription.name, time: new Date(transcription.date), now: /* @__PURE__ */ new Date() }), h("div", { class: "body" }, transcription.transcript));
    });
  }
  render() {
    return h(Host, { key: "cfdc1cc64c5abbb817dc1455d99dcab905648ad9" }, h("div", { key: "0cc69fc4b5d19aefb7f551663fcc2adcc867fc33", class: "search-bar" }, h("input", { key: "80d42ae1c70f018ea9fc7b73e12db671ba25c986", type: "text", placeholder: "Search Participant", value: this.participantQuery, onInput: (e) => this.participantQuery = e.target.value })), this.isProcessing && h("div", { key: "23d4caa5f29c711769345215bb31581ca31fec97", class: "processing" }, h("p", { key: "a9d6646edb1a0bb7cf584c0274603da6bdbb2186" }, "Processing audio....")), !this.isProcessing && h("div", { key: "a94804092f6633dd1718b1c05520613fcf95e86c", class: "content scrollbar", ref: (el) => this.contentContainer = el }, h("div", { key: "2e59a195f936f787ba9a54c7433b83b12b17c4b6", class: "started-message" }, "Transcription started"), this.renderTranscripts()));
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"],
      "transcriptions": ["transcriptionsChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteAiTranscriptions.prototype, "t", void 0);
__decorate([
  SyncWithStore()
], DyteAiTranscriptions.prototype, "meeting", void 0);
DyteAiTranscriptions.style = DyteAiTranscriptionsStyle0;
export {
  DyteAiTranscriptions as dyte_ai_transcriptions
};
//# sourceMappingURL=dyte-ai-transcriptions.entry-ZIAIRDSG.js.map
