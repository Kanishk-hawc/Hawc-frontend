import {
  SyncWithStore
} from "./chunk-LFTNBGM5.js";
import {
  Host,
  createEvent,
  defaultIconPack,
  h,
  registerInstance,
  useLanguage
} from "./chunk-55A3BFCU.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-settings-toggle.entry.js
var dyteSettingsToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";
var DyteSettingsToggleStyle0 = dyteSettingsToggleCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteSettingsToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.variant = "button";
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
  }
  toggleSettings() {
    const updatePartial = { activeSettings: true, activeMoreMenu: false };
    this.states = Object.assign(Object.assign({}, this.states), updatePartial);
    this.stateUpdate.emit(updatePartial);
  }
  render() {
    const text = this.t("settings");
    return h(Host, { key: "ff76a80039b161c084cc7c81ecfc9dd35d027c6f", title: text }, h("dyte-controlbar-button", { key: "893015d704381d3da5d95065b1fbed512c955614", part: "controlbar-button", size: this.size, iconPack: this.iconPack, onClick: () => this.toggleSettings(), icon: this.iconPack.settings, label: text, variant: this.variant }));
  }
};
__decorate([
  SyncWithStore()
], DyteSettingsToggle.prototype, "states", void 0);
__decorate([
  SyncWithStore()
], DyteSettingsToggle.prototype, "size", void 0);
__decorate([
  SyncWithStore()
], DyteSettingsToggle.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DyteSettingsToggle.prototype, "t", void 0);
DyteSettingsToggle.style = DyteSettingsToggleStyle0;
export {
  DyteSettingsToggle as dyte_settings_toggle
};
//# sourceMappingURL=dyte-settings-toggle.entry-3USHLXNV.js.map
