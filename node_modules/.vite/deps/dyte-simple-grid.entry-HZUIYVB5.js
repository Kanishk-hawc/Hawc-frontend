import {
  useGrid
} from "./chunk-VRBKAAFS.js";
import {
  index
} from "./chunk-GFZSYAMB.js";
import {
  Render
} from "./chunk-3STK22JP.js";
import {
  SyncWithStore
} from "./chunk-PQDXOFV7.js";
import {
  Host,
  defaultConfig,
  defaultIconPack,
  getElement,
  h,
  registerInstance,
  useLanguage
} from "./chunk-HB73EBAH.js";
import "./chunk-HFNDKYVF.js";

// node_modules/@dytesdk/ui-kit/dist/esm/dyte-simple-grid.entry.js
var dyteSimpleGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block;height:100%;width:100%}";
var DyteSimpleGridStyle0 = dyteSimpleGridCss;
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DyteSimpleGrid = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.participants = [];
    this.aspectRatio = "16:9";
    this.gap = 8;
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.dimensions = { width: 0, height: 0 };
    this.setHostDimensions = () => {
      const { clientWidth: width, clientHeight: height } = this.host;
      this.dimensions = { width, height };
    };
  }
  connectedCallback() {
    this.resizeObserver = new index(this.setHostDimensions);
    this.resizeObserver.observe(this.host);
    this.meetingChanged(this.meeting);
  }
  meetingChanged(meeting) {
    const meta = meeting === null || meeting === void 0 ? void 0 : meeting.meta;
    if (meta)
      this.mediaConnection = Object.assign({}, meta.mediaState);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states,
      size: this.size,
      iconPack: this.iconPack,
      t: this.t
    };
    const { width, height, getPosition } = useGrid({
      dimensions: this.dimensions,
      count: this.participants.length,
      aspectRatio: this.aspectRatio,
      gap: this.gap
    });
    return h(Host, { key: "966acd8e36eb46608d9dc7aa026497b86b062be5" }, h("slot", { key: "b67280589e7b5ecd630da8584ea34755400c9a33" }, this.participants.map((participant, index2) => {
      const { top, left } = getPosition(index2);
      return h(Render, { element: "dyte-participant-tile", defaults, props: {
        participant,
        style: {
          position: "absolute",
          top: `${top}px`,
          left: `${left}px`,
          width: `${width}px`,
          height: `${height}px`
        },
        key: participant.id,
        "data-participant": participant.id,
        mediaConnection: this.mediaConnection
      }, childProps: { participant }, deepProps: true });
    })));
  }
  get host() {
    return getElement(this);
  }
  static get watchers() {
    return {
      "meeting": ["meetingChanged"]
    };
  }
};
__decorate([
  SyncWithStore()
], DyteSimpleGrid.prototype, "size", void 0);
__decorate([
  SyncWithStore()
], DyteSimpleGrid.prototype, "meeting", void 0);
__decorate([
  SyncWithStore()
], DyteSimpleGrid.prototype, "states", void 0);
__decorate([
  SyncWithStore()
], DyteSimpleGrid.prototype, "iconPack", void 0);
__decorate([
  SyncWithStore()
], DyteSimpleGrid.prototype, "t", void 0);
DyteSimpleGrid.style = DyteSimpleGridStyle0;
export {
  DyteSimpleGrid as dyte_simple_grid
};
//# sourceMappingURL=dyte-simple-grid.entry-HZUIYVB5.js.map
